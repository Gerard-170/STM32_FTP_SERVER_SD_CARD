
SHM_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fa48  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010fc  0800fc28  0800fc28  0001fc28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010d24  08010d24  00030130  2**0
                  CONTENTS
  4 .ARM          00000008  08010d24  08010d24  00020d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010d2c  08010d2c  00030130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010d2c  08010d2c  00020d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010d30  08010d30  00020d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  08010d34  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dc8  20000130  08010e64  00030130  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ef8  08010e64  00030ef8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030130  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002546f  00000000  00000000  00030160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bef  00000000  00000000  000555cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fb0  00000000  00000000  0005a1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001da8  00000000  00000000  0005c170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ee49  00000000  00000000  0005df18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028d32  00000000  00000000  0008cd61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001235f7  00000000  00000000  000b5a93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d908a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000094a4  00000000  00000000  001d90dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000130 	.word	0x20000130
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800fc10 	.word	0x0800fc10

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000134 	.word	0x20000134
 800021c:	0800fc10 	.word	0x0800fc10

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	; 0x28
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f001 fa34 	bl	8001a66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f8f5 	bl	80007ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 fc85 	bl	8000f10 <MX_GPIO_Init>
  MX_DMA_Init();
 8000606:	f000 fc59 	bl	8000ebc <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800060a:	f000 fae1 	bl	8000bd0 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 800060e:	f000 f947 	bl	80008a0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000612:	f000 fa1f 	bl	8000a54 <MX_ADC2_Init>
  MX_RTC_Init();
 8000616:	f000 fb25 	bl	8000c64 <MX_RTC_Init>
  MX_SPI2_Init();
 800061a:	f000 fb85 	bl	8000d28 <MX_SPI2_Init>
  MX_SPI3_Init();
 800061e:	f000 fbc1 	bl	8000da4 <MX_SPI3_Init>
  MX_TIM2_Init();
 8000622:	f000 fbfd 	bl	8000e20 <MX_TIM2_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8000626:	f009 fc25 	bl	8009e74 <MX_FATFS_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <main+0x40>
    Error_Handler();
 8000630:	f000 fd92 	bl	8001158 <Error_Handler>
  /* USER CODE BEGIN 2 */

  //bufsize se refiere al tamaño del buffer tx, rx por cada socket el w5500 tiene hasta 8 sockets
  //Los 32Kbytes se dividen por los 8 sockets

  printf("\r\nYour name: ");
 8000634:	4855      	ldr	r0, [pc, #340]	; (800078c <main+0x198>)
 8000636:	f00d fffb 	bl	800e630 <iprintf>
  uint8_t bufSize[] = {2, 2, 2, 2, 2, 2, 2, 2};
 800063a:	4a55      	ldr	r2, [pc, #340]	; (8000790 <main+0x19c>)
 800063c:	f107 031c 	add.w	r3, r7, #28
 8000640:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000644:	e883 0003 	stmia.w	r3, {r0, r1}

  //Funciones para mandar a seleccionar el chip:
  reg_wizchip_cs_cbfunc(CS_SEL_FUN, CS_DES_FUN);
 8000648:	4952      	ldr	r1, [pc, #328]	; (8000794 <main+0x1a0>)
 800064a:	4853      	ldr	r0, [pc, #332]	; (8000798 <main+0x1a4>)
 800064c:	f007 fefc 	bl	8008448 <reg_wizchip_cs_cbfunc>

  //Funcion para mandar a escribir y leer datos del SPI
  reg_wizchip_spi_cbfunc(SPI_Received, SPI_Transmit);
 8000650:	4952      	ldr	r1, [pc, #328]	; (800079c <main+0x1a8>)
 8000652:	4853      	ldr	r0, [pc, #332]	; (80007a0 <main+0x1ac>)
 8000654:	f007 ff1e 	bl	8008494 <reg_wizchip_spi_cbfunc>

  wizchip_init(bufSize, bufSize);
 8000658:	f107 021c 	add.w	r2, r7, #28
 800065c:	f107 031c 	add.w	r3, r7, #28
 8000660:	4611      	mov	r1, r2
 8000662:	4618      	mov	r0, r3
 8000664:	f007 ffcc 	bl	8008600 <wizchip_init>
  wiz_NetInfo netInfo = { .mac 	= {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef},	// Mac address
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]
 8000676:	f8c3 2013 	str.w	r2, [r3, #19]
 800067a:	4a4a      	ldr	r2, [pc, #296]	; (80007a4 <main+0x1b0>)
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000682:	6018      	str	r0, [r3, #0]
 8000684:	3304      	adds	r3, #4
 8000686:	8019      	strh	r1, [r3, #0]
 8000688:	4a47      	ldr	r2, [pc, #284]	; (80007a8 <main+0x1b4>)
 800068a:	f107 030a 	add.w	r3, r7, #10
 800068e:	6810      	ldr	r0, [r2, #0]
 8000690:	6018      	str	r0, [r3, #0]
 8000692:	4a46      	ldr	r2, [pc, #280]	; (80007ac <main+0x1b8>)
 8000694:	f107 030e 	add.w	r3, r7, #14
 8000698:	6810      	ldr	r0, [r2, #0]
 800069a:	6018      	str	r0, [r3, #0]
 800069c:	4a44      	ldr	r2, [pc, #272]	; (80007b0 <main+0x1bc>)
 800069e:	f107 0312 	add.w	r3, r7, #18
 80006a2:	6810      	ldr	r0, [r2, #0]
 80006a4:	6018      	str	r0, [r3, #0]
          	              .ip 	= {192, 168, 10, 5},					// IP address
          	              .sn 	= {255, 255, 255, 0},					// Subnet mask
          	              .gw 	= {192, 168, 10, 1}};					// Gateway address

  wizchip_setnetinfo(&netInfo);											//Se configura el chip con los datos ingresados anteriormente
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	4618      	mov	r0, r3
 80006aa:	f008 f835 	bl	8008718 <wizchip_setnetinfo>



  buff_length = sprintf(tx_buff, "FIN Config W5500 \r\n");
 80006ae:	4941      	ldr	r1, [pc, #260]	; (80007b4 <main+0x1c0>)
 80006b0:	4841      	ldr	r0, [pc, #260]	; (80007b8 <main+0x1c4>)
 80006b2:	f00e f871 	bl	800e798 <siprintf>
 80006b6:	4603      	mov	r3, r0
 80006b8:	b2da      	uxtb	r2, r3
 80006ba:	4b40      	ldr	r3, [pc, #256]	; (80007bc <main+0x1c8>)
 80006bc:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&hlpuart1,  (uint8_t *)tx_buff, buff_length, 100);
 80006be:	4b3f      	ldr	r3, [pc, #252]	; (80007bc <main+0x1c8>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	2364      	movs	r3, #100	; 0x64
 80006c8:	493b      	ldr	r1, [pc, #236]	; (80007b8 <main+0x1c4>)
 80006ca:	483d      	ldr	r0, [pc, #244]	; (80007c0 <main+0x1cc>)
 80006cc:	f005 ff86 	bl	80065dc <HAL_UART_Transmit>

  buff_length = sprintf(tx_buff, "Inicio Prueba: \r\n");
 80006d0:	493c      	ldr	r1, [pc, #240]	; (80007c4 <main+0x1d0>)
 80006d2:	4839      	ldr	r0, [pc, #228]	; (80007b8 <main+0x1c4>)
 80006d4:	f00e f860 	bl	800e798 <siprintf>
 80006d8:	4603      	mov	r3, r0
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4b37      	ldr	r3, [pc, #220]	; (80007bc <main+0x1c8>)
 80006de:	701a      	strb	r2, [r3, #0]
  	HAL_UART_Transmit(&hlpuart1,  (uint8_t *)tx_buff, buff_length, 100);
 80006e0:	4b36      	ldr	r3, [pc, #216]	; (80007bc <main+0x1c8>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	2364      	movs	r3, #100	; 0x64
 80006ea:	4933      	ldr	r1, [pc, #204]	; (80007b8 <main+0x1c4>)
 80006ec:	4834      	ldr	r0, [pc, #208]	; (80007c0 <main+0x1cc>)
 80006ee:	f005 ff75 	bl	80065dc <HAL_UART_Transmit>
  	/* Mount SD Card */
  	if(f_mount(&fs, "", 0) != FR_OK)
 80006f2:	2200      	movs	r2, #0
 80006f4:	4934      	ldr	r1, [pc, #208]	; (80007c8 <main+0x1d4>)
 80006f6:	4835      	ldr	r0, [pc, #212]	; (80007cc <main+0x1d8>)
 80006f8:	f00c fc58 	bl	800cfac <f_mount>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <main+0x112>
  	{
  		Error_Handler();
 8000702:	f000 fd29 	bl	8001158 <Error_Handler>
  	}

  	/* Open file to write */
  	FRESULT sdflag;
  	sdflag = f_open(&fil, "SHMv2.txt", FA_OPEN_APPEND | FA_READ | FA_WRITE);
 8000706:	2233      	movs	r2, #51	; 0x33
 8000708:	4931      	ldr	r1, [pc, #196]	; (80007d0 <main+0x1dc>)
 800070a:	4832      	ldr	r0, [pc, #200]	; (80007d4 <main+0x1e0>)
 800070c:	f00c fc94 	bl	800d038 <f_open>
 8000710:	4603      	mov	r3, r0
 8000712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  	if(sdflag != FR_OK)
 8000716:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <main+0x12e>
  	{
  		Error_Handler();
 800071e:	f000 fd1b 	bl	8001158 <Error_Handler>
  	}

  	f_puts("Save the world ST!!!\n", &fil);
 8000722:	492c      	ldr	r1, [pc, #176]	; (80007d4 <main+0x1e0>)
 8000724:	482c      	ldr	r0, [pc, #176]	; (80007d8 <main+0x1e4>)
 8000726:	f00d fcf0 	bl	800e10a <f_puts>
  	if(f_sync(&fil) != FR_OK)
 800072a:	482a      	ldr	r0, [pc, #168]	; (80007d4 <main+0x1e0>)
 800072c:	f00d f906 	bl	800d93c <f_sync>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <main+0x146>
  	{
  		Error_Handler();
 8000736:	f000 fd0f 	bl	8001158 <Error_Handler>
  	}

  	/* Close file */
  	if(f_close(&fil) != FR_OK)
 800073a:	4826      	ldr	r0, [pc, #152]	; (80007d4 <main+0x1e0>)
 800073c:	f00d f97c 	bl	800da38 <f_close>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <main+0x156>
  	{
  		Error_Handler();
 8000746:	f000 fd07 	bl	8001158 <Error_Handler>
  	}

  	buff_length = sprintf(tx_buff, "FIN Prueba SD: \r\n");
 800074a:	4924      	ldr	r1, [pc, #144]	; (80007dc <main+0x1e8>)
 800074c:	481a      	ldr	r0, [pc, #104]	; (80007b8 <main+0x1c4>)
 800074e:	f00e f823 	bl	800e798 <siprintf>
 8000752:	4603      	mov	r3, r0
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b19      	ldr	r3, [pc, #100]	; (80007bc <main+0x1c8>)
 8000758:	701a      	strb	r2, [r3, #0]
  	HAL_UART_Transmit(&hlpuart1,  (uint8_t *)tx_buff, buff_length, 100);
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <main+0x1c8>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	b29a      	uxth	r2, r3
 8000762:	2364      	movs	r3, #100	; 0x64
 8000764:	4914      	ldr	r1, [pc, #80]	; (80007b8 <main+0x1c4>)
 8000766:	4816      	ldr	r0, [pc, #88]	; (80007c0 <main+0x1cc>)
 8000768:	f005 ff38 	bl	80065dc <HAL_UART_Transmit>

  	ftpd_init("user10", "pass10");
 800076c:	491c      	ldr	r1, [pc, #112]	; (80007e0 <main+0x1ec>)
 800076e:	481d      	ldr	r0, [pc, #116]	; (80007e4 <main+0x1f0>)
 8000770:	f008 f96a 	bl	8008a48 <ftpd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 ftpd_run(gFTPBUF);
 8000774:	481c      	ldr	r0, [pc, #112]	; (80007e8 <main+0x1f4>)
 8000776:	f008 f9e9 	bl	8008b4c <ftpd_run>
	 HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800077a:	2120      	movs	r1, #32
 800077c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000780:	f002 ff08 	bl	8003594 <HAL_GPIO_TogglePin>
	 HAL_Delay(100);
 8000784:	2064      	movs	r0, #100	; 0x64
 8000786:	f001 f9a5 	bl	8001ad4 <HAL_Delay>
	 ftpd_run(gFTPBUF);
 800078a:	e7f3      	b.n	8000774 <main+0x180>
 800078c:	0800fc30 	.word	0x0800fc30
 8000790:	0800fcb4 	.word	0x0800fcb4
 8000794:	080010cd 	.word	0x080010cd
 8000798:	080010b5 	.word	0x080010b5
 800079c:	08001105 	.word	0x08001105
 80007a0:	080010e5 	.word	0x080010e5
 80007a4:	0800fcbc 	.word	0x0800fcbc
 80007a8:	0800fcc4 	.word	0x0800fcc4
 80007ac:	0800fcc8 	.word	0x0800fcc8
 80007b0:	0800fccc 	.word	0x0800fccc
 80007b4:	0800fc40 	.word	0x0800fc40
 80007b8:	20000450 	.word	0x20000450
 80007bc:	200004aa 	.word	0x200004aa
 80007c0:	20000284 	.word	0x20000284
 80007c4:	0800fc54 	.word	0x0800fc54
 80007c8:	0800fc68 	.word	0x0800fc68
 80007cc:	200004ac 	.word	0x200004ac
 80007d0:	0800fc6c 	.word	0x0800fc6c
 80007d4:	200006e0 	.word	0x200006e0
 80007d8:	0800fc78 	.word	0x0800fc78
 80007dc:	0800fc90 	.word	0x0800fc90
 80007e0:	0800fca4 	.word	0x0800fca4
 80007e4:	0800fcac 	.word	0x0800fcac
 80007e8:	20000910 	.word	0x20000910

080007ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b094      	sub	sp, #80	; 0x50
 80007f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	f107 0318 	add.w	r3, r7, #24
 80007f6:	2238      	movs	r2, #56	; 0x38
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f00d fe30 	bl	800e460 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800080e:	2000      	movs	r0, #0
 8000810:	f002 ff0e 	bl	8003630 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000814:	f002 fefc 	bl	8003610 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000818:	4b20      	ldr	r3, [pc, #128]	; (800089c <SystemClock_Config+0xb0>)
 800081a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800081e:	4a1f      	ldr	r2, [pc, #124]	; (800089c <SystemClock_Config+0xb0>)
 8000820:	f023 0318 	bic.w	r3, r3, #24
 8000824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000828:	2306      	movs	r3, #6
 800082a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800082c:	2301      	movs	r3, #1
 800082e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000830:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000836:	2340      	movs	r3, #64	; 0x40
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083a:	2302      	movs	r3, #2
 800083c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800083e:	2302      	movs	r3, #2
 8000840:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000842:	2304      	movs	r3, #4
 8000844:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000846:	2355      	movs	r3, #85	; 0x55
 8000848:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800084a:	2302      	movs	r3, #2
 800084c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800084e:	2302      	movs	r3, #2
 8000850:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000852:	2302      	movs	r3, #2
 8000854:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000856:	f107 0318 	add.w	r3, r7, #24
 800085a:	4618      	mov	r0, r3
 800085c:	f002 ff9c 	bl	8003798 <HAL_RCC_OscConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000866:	f000 fc77 	bl	8001158 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086a:	230f      	movs	r3, #15
 800086c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086e:	2303      	movs	r3, #3
 8000870:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2104      	movs	r1, #4
 8000882:	4618      	mov	r0, r3
 8000884:	f003 faa0 	bl	8003dc8 <HAL_RCC_ClockConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800088e:	f000 fc63 	bl	8001158 <Error_Handler>
  }
}
 8000892:	bf00      	nop
 8000894:	3750      	adds	r7, #80	; 0x50
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40021000 	.word	0x40021000

080008a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08c      	sub	sp, #48	; 0x30
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	2220      	movs	r2, #32
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f00d fdd1 	bl	800e460 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008be:	4b5e      	ldr	r3, [pc, #376]	; (8000a38 <MX_ADC1_Init+0x198>)
 80008c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008c6:	4b5c      	ldr	r3, [pc, #368]	; (8000a38 <MX_ADC1_Init+0x198>)
 80008c8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008ce:	4b5a      	ldr	r3, [pc, #360]	; (8000a38 <MX_ADC1_Init+0x198>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008d4:	4b58      	ldr	r3, [pc, #352]	; (8000a38 <MX_ADC1_Init+0x198>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80008da:	4b57      	ldr	r3, [pc, #348]	; (8000a38 <MX_ADC1_Init+0x198>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008e0:	4b55      	ldr	r3, [pc, #340]	; (8000a38 <MX_ADC1_Init+0x198>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008e6:	4b54      	ldr	r3, [pc, #336]	; (8000a38 <MX_ADC1_Init+0x198>)
 80008e8:	2204      	movs	r2, #4
 80008ea:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008ec:	4b52      	ldr	r3, [pc, #328]	; (8000a38 <MX_ADC1_Init+0x198>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008f2:	4b51      	ldr	r3, [pc, #324]	; (8000a38 <MX_ADC1_Init+0x198>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 6;
 80008f8:	4b4f      	ldr	r3, [pc, #316]	; (8000a38 <MX_ADC1_Init+0x198>)
 80008fa:	2206      	movs	r2, #6
 80008fc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008fe:	4b4e      	ldr	r3, [pc, #312]	; (8000a38 <MX_ADC1_Init+0x198>)
 8000900:	2200      	movs	r2, #0
 8000902:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000906:	4b4c      	ldr	r3, [pc, #304]	; (8000a38 <MX_ADC1_Init+0x198>)
 8000908:	2200      	movs	r2, #0
 800090a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800090c:	4b4a      	ldr	r3, [pc, #296]	; (8000a38 <MX_ADC1_Init+0x198>)
 800090e:	2200      	movs	r2, #0
 8000910:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000912:	4b49      	ldr	r3, [pc, #292]	; (8000a38 <MX_ADC1_Init+0x198>)
 8000914:	2200      	movs	r2, #0
 8000916:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800091a:	4b47      	ldr	r3, [pc, #284]	; (8000a38 <MX_ADC1_Init+0x198>)
 800091c:	2200      	movs	r2, #0
 800091e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8000920:	4b45      	ldr	r3, [pc, #276]	; (8000a38 <MX_ADC1_Init+0x198>)
 8000922:	2201      	movs	r2, #1
 8000924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8000928:	4b43      	ldr	r3, [pc, #268]	; (8000a38 <MX_ADC1_Init+0x198>)
 800092a:	221c      	movs	r2, #28
 800092c:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 800092e:	4b42      	ldr	r3, [pc, #264]	; (8000a38 <MX_ADC1_Init+0x198>)
 8000930:	2280      	movs	r2, #128	; 0x80
 8000932:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000934:	4b40      	ldr	r3, [pc, #256]	; (8000a38 <MX_ADC1_Init+0x198>)
 8000936:	2200      	movs	r2, #0
 8000938:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800093a:	4b3f      	ldr	r3, [pc, #252]	; (8000a38 <MX_ADC1_Init+0x198>)
 800093c:	2201      	movs	r2, #1
 800093e:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000940:	483d      	ldr	r0, [pc, #244]	; (8000a38 <MX_ADC1_Init+0x198>)
 8000942:	f001 fac3 	bl	8001ecc <HAL_ADC_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800094c:	f000 fc04 	bl	8001158 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8000950:	2306      	movs	r3, #6
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 8000954:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 800095a:	2300      	movs	r3, #0
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800095e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000962:	4619      	mov	r1, r3
 8000964:	4834      	ldr	r0, [pc, #208]	; (8000a38 <MX_ADC1_Init+0x198>)
 8000966:	f002 f8d9 	bl	8002b1c <HAL_ADCEx_MultiModeConfigChannel>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000970:	f000 fbf2 	bl	8001158 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000974:	4b31      	ldr	r3, [pc, #196]	; (8000a3c <MX_ADC1_Init+0x19c>)
 8000976:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000978:	2306      	movs	r3, #6
 800097a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000980:	237f      	movs	r3, #127	; 0x7f
 8000982:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000984:	2304      	movs	r3, #4
 8000986:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	4619      	mov	r1, r3
 8000990:	4829      	ldr	r0, [pc, #164]	; (8000a38 <MX_ADC1_Init+0x198>)
 8000992:	f001 fc5d 	bl	8002250 <HAL_ADC_ConfigChannel>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800099c:	f000 fbdc 	bl	8001158 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009a0:	4b27      	ldr	r3, [pc, #156]	; (8000a40 <MX_ADC1_Init+0x1a0>)
 80009a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009a4:	230c      	movs	r3, #12
 80009a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	4619      	mov	r1, r3
 80009ac:	4822      	ldr	r0, [pc, #136]	; (8000a38 <MX_ADC1_Init+0x198>)
 80009ae:	f001 fc4f 	bl	8002250 <HAL_ADC_ConfigChannel>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80009b8:	f000 fbce 	bl	8001158 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80009bc:	4b21      	ldr	r3, [pc, #132]	; (8000a44 <MX_ADC1_Init+0x1a4>)
 80009be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80009c0:	2312      	movs	r3, #18
 80009c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	4619      	mov	r1, r3
 80009c8:	481b      	ldr	r0, [pc, #108]	; (8000a38 <MX_ADC1_Init+0x198>)
 80009ca:	f001 fc41 	bl	8002250 <HAL_ADC_ConfigChannel>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80009d4:	f000 fbc0 	bl	8001158 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80009d8:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <MX_ADC1_Init+0x1a8>)
 80009da:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80009dc:	2318      	movs	r3, #24
 80009de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	4619      	mov	r1, r3
 80009e4:	4814      	ldr	r0, [pc, #80]	; (8000a38 <MX_ADC1_Init+0x198>)
 80009e6:	f001 fc33 	bl	8002250 <HAL_ADC_ConfigChannel>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80009f0:	f000 fbb2 	bl	8001158 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_ADC1_Init+0x1ac>)
 80009f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80009f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	4619      	mov	r1, r3
 8000a02:	480d      	ldr	r0, [pc, #52]	; (8000a38 <MX_ADC1_Init+0x198>)
 8000a04:	f001 fc24 	bl	8002250 <HAL_ADC_ConfigChannel>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 8000a0e:	f000 fba3 	bl	8001158 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <MX_ADC1_Init+0x1b0>)
 8000a14:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000a16:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000a1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_ADC1_Init+0x198>)
 8000a22:	f001 fc15 	bl	8002250 <HAL_ADC_ConfigChannel>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_ADC1_Init+0x190>
  {
    Error_Handler();
 8000a2c:	f000 fb94 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	3730      	adds	r7, #48	; 0x30
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	2000014c 	.word	0x2000014c
 8000a3c:	04300002 	.word	0x04300002
 8000a40:	08600004 	.word	0x08600004
 8000a44:	19200040 	.word	0x19200040
 8000a48:	1d500080 	.word	0x1d500080
 8000a4c:	21800100 	.word	0x21800100
 8000a50:	25b00200 	.word	0x25b00200

08000a54 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	2220      	movs	r2, #32
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f00d fcfd 	bl	800e460 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a66:	4b52      	ldr	r3, [pc, #328]	; (8000bb0 <MX_ADC2_Init+0x15c>)
 8000a68:	4a52      	ldr	r2, [pc, #328]	; (8000bb4 <MX_ADC2_Init+0x160>)
 8000a6a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a6c:	4b50      	ldr	r3, [pc, #320]	; (8000bb0 <MX_ADC2_Init+0x15c>)
 8000a6e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a72:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000a74:	4b4e      	ldr	r3, [pc, #312]	; (8000bb0 <MX_ADC2_Init+0x15c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a7a:	4b4d      	ldr	r3, [pc, #308]	; (8000bb0 <MX_ADC2_Init+0x15c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000a80:	4b4b      	ldr	r3, [pc, #300]	; (8000bb0 <MX_ADC2_Init+0x15c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a86:	4b4a      	ldr	r3, [pc, #296]	; (8000bb0 <MX_ADC2_Init+0x15c>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a8c:	4b48      	ldr	r3, [pc, #288]	; (8000bb0 <MX_ADC2_Init+0x15c>)
 8000a8e:	2204      	movs	r2, #4
 8000a90:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000a92:	4b47      	ldr	r3, [pc, #284]	; (8000bb0 <MX_ADC2_Init+0x15c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a98:	4b45      	ldr	r3, [pc, #276]	; (8000bb0 <MX_ADC2_Init+0x15c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 6;
 8000a9e:	4b44      	ldr	r3, [pc, #272]	; (8000bb0 <MX_ADC2_Init+0x15c>)
 8000aa0:	2206      	movs	r2, #6
 8000aa2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000aa4:	4b42      	ldr	r3, [pc, #264]	; (8000bb0 <MX_ADC2_Init+0x15c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000aac:	4b40      	ldr	r3, [pc, #256]	; (8000bb0 <MX_ADC2_Init+0x15c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ab4:	4b3e      	ldr	r3, [pc, #248]	; (8000bb0 <MX_ADC2_Init+0x15c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 8000aba:	4b3d      	ldr	r3, [pc, #244]	; (8000bb0 <MX_ADC2_Init+0x15c>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8000ac2:	4b3b      	ldr	r3, [pc, #236]	; (8000bb0 <MX_ADC2_Init+0x15c>)
 8000ac4:	221c      	movs	r2, #28
 8000ac6:	645a      	str	r2, [r3, #68]	; 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000ac8:	4b39      	ldr	r3, [pc, #228]	; (8000bb0 <MX_ADC2_Init+0x15c>)
 8000aca:	2280      	movs	r2, #128	; 0x80
 8000acc:	649a      	str	r2, [r3, #72]	; 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000ace:	4b38      	ldr	r3, [pc, #224]	; (8000bb0 <MX_ADC2_Init+0x15c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000ad4:	4b36      	ldr	r3, [pc, #216]	; (8000bb0 <MX_ADC2_Init+0x15c>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ada:	4835      	ldr	r0, [pc, #212]	; (8000bb0 <MX_ADC2_Init+0x15c>)
 8000adc:	f001 f9f6 	bl	8001ecc <HAL_ADC_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_ADC2_Init+0x96>
  {
    Error_Handler();
 8000ae6:	f000 fb37 	bl	8001158 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000aea:	4b33      	ldr	r3, [pc, #204]	; (8000bb8 <MX_ADC2_Init+0x164>)
 8000aec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aee:	2306      	movs	r3, #6
 8000af0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000af6:	237f      	movs	r3, #127	; 0x7f
 8000af8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000afa:	2304      	movs	r3, #4
 8000afc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b02:	463b      	mov	r3, r7
 8000b04:	4619      	mov	r1, r3
 8000b06:	482a      	ldr	r0, [pc, #168]	; (8000bb0 <MX_ADC2_Init+0x15c>)
 8000b08:	f001 fba2 	bl	8002250 <HAL_ADC_ConfigChannel>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_ADC2_Init+0xc2>
  {
    Error_Handler();
 8000b12:	f000 fb21 	bl	8001158 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b16:	4b29      	ldr	r3, [pc, #164]	; (8000bbc <MX_ADC2_Init+0x168>)
 8000b18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b1a:	230c      	movs	r3, #12
 8000b1c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b1e:	463b      	mov	r3, r7
 8000b20:	4619      	mov	r1, r3
 8000b22:	4823      	ldr	r0, [pc, #140]	; (8000bb0 <MX_ADC2_Init+0x15c>)
 8000b24:	f001 fb94 	bl	8002250 <HAL_ADC_ConfigChannel>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_ADC2_Init+0xde>
  {
    Error_Handler();
 8000b2e:	f000 fb13 	bl	8001158 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b32:	4b23      	ldr	r3, [pc, #140]	; (8000bc0 <MX_ADC2_Init+0x16c>)
 8000b34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b36:	2312      	movs	r3, #18
 8000b38:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	481c      	ldr	r0, [pc, #112]	; (8000bb0 <MX_ADC2_Init+0x15c>)
 8000b40:	f001 fb86 	bl	8002250 <HAL_ADC_ConfigChannel>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_ADC2_Init+0xfa>
  {
    Error_Handler();
 8000b4a:	f000 fb05 	bl	8001158 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000b4e:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <MX_ADC2_Init+0x170>)
 8000b50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000b52:	2318      	movs	r3, #24
 8000b54:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b56:	463b      	mov	r3, r7
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4815      	ldr	r0, [pc, #84]	; (8000bb0 <MX_ADC2_Init+0x15c>)
 8000b5c:	f001 fb78 	bl	8002250 <HAL_ADC_ConfigChannel>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_ADC2_Init+0x116>
  {
    Error_Handler();
 8000b66:	f000 faf7 	bl	8001158 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000b6a:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <MX_ADC2_Init+0x174>)
 8000b6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000b6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b74:	463b      	mov	r3, r7
 8000b76:	4619      	mov	r1, r3
 8000b78:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <MX_ADC2_Init+0x15c>)
 8000b7a:	f001 fb69 	bl	8002250 <HAL_ADC_ConfigChannel>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_ADC2_Init+0x134>
  {
    Error_Handler();
 8000b84:	f000 fae8 	bl	8001158 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000b88:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <MX_ADC2_Init+0x178>)
 8000b8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000b8c:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000b90:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b92:	463b      	mov	r3, r7
 8000b94:	4619      	mov	r1, r3
 8000b96:	4806      	ldr	r0, [pc, #24]	; (8000bb0 <MX_ADC2_Init+0x15c>)
 8000b98:	f001 fb5a 	bl	8002250 <HAL_ADC_ConfigChannel>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_ADC2_Init+0x152>
  {
    Error_Handler();
 8000ba2:	f000 fad9 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	3720      	adds	r7, #32
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	200001b8 	.word	0x200001b8
 8000bb4:	50000100 	.word	0x50000100
 8000bb8:	0c900008 	.word	0x0c900008
 8000bbc:	10c00010 	.word	0x10c00010
 8000bc0:	14f00020 	.word	0x14f00020
 8000bc4:	2e300800 	.word	0x2e300800
 8000bc8:	32601000 	.word	0x32601000
 8000bcc:	3ac04000 	.word	0x3ac04000

08000bd0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000bd4:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <MX_LPUART1_UART_Init+0x8c>)
 8000bd6:	4a22      	ldr	r2, [pc, #136]	; (8000c60 <MX_LPUART1_UART_Init+0x90>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000bda:	4b20      	ldr	r3, [pc, #128]	; (8000c5c <MX_LPUART1_UART_Init+0x8c>)
 8000bdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000be0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000be2:	4b1e      	ldr	r3, [pc, #120]	; (8000c5c <MX_LPUART1_UART_Init+0x8c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000be8:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <MX_LPUART1_UART_Init+0x8c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000bee:	4b1b      	ldr	r3, [pc, #108]	; (8000c5c <MX_LPUART1_UART_Init+0x8c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000bf4:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <MX_LPUART1_UART_Init+0x8c>)
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfa:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <MX_LPUART1_UART_Init+0x8c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c00:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <MX_LPUART1_UART_Init+0x8c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <MX_LPUART1_UART_Init+0x8c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c0c:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <MX_LPUART1_UART_Init+0x8c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000c12:	4812      	ldr	r0, [pc, #72]	; (8000c5c <MX_LPUART1_UART_Init+0x8c>)
 8000c14:	f005 fc92 	bl	800653c <HAL_UART_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c1e:	f000 fa9b 	bl	8001158 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c22:	2100      	movs	r1, #0
 8000c24:	480d      	ldr	r0, [pc, #52]	; (8000c5c <MX_LPUART1_UART_Init+0x8c>)
 8000c26:	f006 fa59 	bl	80070dc <HAL_UARTEx_SetTxFifoThreshold>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000c30:	f000 fa92 	bl	8001158 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c34:	2100      	movs	r1, #0
 8000c36:	4809      	ldr	r0, [pc, #36]	; (8000c5c <MX_LPUART1_UART_Init+0x8c>)
 8000c38:	f006 fa8e 	bl	8007158 <HAL_UARTEx_SetRxFifoThreshold>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000c42:	f000 fa89 	bl	8001158 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <MX_LPUART1_UART_Init+0x8c>)
 8000c48:	f006 fa0f 	bl	800706a <HAL_UARTEx_DisableFifoMode>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000c52:	f000 fa81 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000284 	.word	0x20000284
 8000c60:	40008000 	.word	0x40008000

08000c64 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c78:	2300      	movs	r3, #0
 8000c7a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c7c:	4b28      	ldr	r3, [pc, #160]	; (8000d20 <MX_RTC_Init+0xbc>)
 8000c7e:	4a29      	ldr	r2, [pc, #164]	; (8000d24 <MX_RTC_Init+0xc0>)
 8000c80:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c82:	4b27      	ldr	r3, [pc, #156]	; (8000d20 <MX_RTC_Init+0xbc>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c88:	4b25      	ldr	r3, [pc, #148]	; (8000d20 <MX_RTC_Init+0xbc>)
 8000c8a:	227f      	movs	r2, #127	; 0x7f
 8000c8c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c8e:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <MX_RTC_Init+0xbc>)
 8000c90:	22ff      	movs	r2, #255	; 0xff
 8000c92:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c94:	4b22      	ldr	r3, [pc, #136]	; (8000d20 <MX_RTC_Init+0xbc>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000c9a:	4b21      	ldr	r3, [pc, #132]	; (8000d20 <MX_RTC_Init+0xbc>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ca0:	4b1f      	ldr	r3, [pc, #124]	; (8000d20 <MX_RTC_Init+0xbc>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <MX_RTC_Init+0xbc>)
 8000ca8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cac:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000cae:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <MX_RTC_Init+0xbc>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000cb4:	481a      	ldr	r0, [pc, #104]	; (8000d20 <MX_RTC_Init+0xbc>)
 8000cb6:	f003 fd23 	bl	8004700 <HAL_RTC_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000cc0:	f000 fa4a 	bl	8001158 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 22;
 8000cc4:	2316      	movs	r3, #22
 8000cc6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 35;
 8000cc8:	2323      	movs	r3, #35	; 0x23
 8000cca:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	2200      	movs	r2, #0
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	480f      	ldr	r0, [pc, #60]	; (8000d20 <MX_RTC_Init+0xbc>)
 8000ce4:	f003 fd81 	bl	80047ea <HAL_RTC_SetTime>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_RTC_Init+0x8e>
  {
    Error_Handler();
 8000cee:	f000 fa33 	bl	8001158 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8000cf6:	2305      	movs	r3, #5
 8000cf8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 9;
 8000cfa:	2309      	movs	r3, #9
 8000cfc:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 22;
 8000cfe:	2316      	movs	r3, #22
 8000d00:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000d02:	463b      	mov	r3, r7
 8000d04:	2200      	movs	r2, #0
 8000d06:	4619      	mov	r1, r3
 8000d08:	4805      	ldr	r0, [pc, #20]	; (8000d20 <MX_RTC_Init+0xbc>)
 8000d0a:	f003 fe0b 	bl	8004924 <HAL_RTC_SetDate>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8000d14:	f000 fa20 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d18:	bf00      	nop
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000314 	.word	0x20000314
 8000d24:	40002800 	.word	0x40002800

08000d28 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d2c:	4b1b      	ldr	r3, [pc, #108]	; (8000d9c <MX_SPI2_Init+0x74>)
 8000d2e:	4a1c      	ldr	r2, [pc, #112]	; (8000da0 <MX_SPI2_Init+0x78>)
 8000d30:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d32:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <MX_SPI2_Init+0x74>)
 8000d34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d38:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d3a:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <MX_SPI2_Init+0x74>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d40:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <MX_SPI2_Init+0x74>)
 8000d42:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d46:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <MX_SPI2_Init+0x74>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <MX_SPI2_Init+0x74>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_SPI2_Init+0x74>)
 8000d56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d5a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <MX_SPI2_Init+0x74>)
 8000d5e:	2218      	movs	r2, #24
 8000d60:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_SPI2_Init+0x74>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_SPI2_Init+0x74>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <MX_SPI2_Init+0x74>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000d74:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_SPI2_Init+0x74>)
 8000d76:	2207      	movs	r2, #7
 8000d78:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <MX_SPI2_Init+0x74>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <MX_SPI2_Init+0x74>)
 8000d82:	2208      	movs	r2, #8
 8000d84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <MX_SPI2_Init+0x74>)
 8000d88:	f003 ff12 	bl	8004bb0 <HAL_SPI_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000d92:	f000 f9e1 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000033c 	.word	0x2000033c
 8000da0:	40003800 	.word	0x40003800

08000da4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000da8:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <MX_SPI3_Init+0x74>)
 8000daa:	4a1c      	ldr	r2, [pc, #112]	; (8000e1c <MX_SPI3_Init+0x78>)
 8000dac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000dae:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <MX_SPI3_Init+0x74>)
 8000db0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000db4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000db6:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <MX_SPI3_Init+0x74>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dbc:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <MX_SPI3_Init+0x74>)
 8000dbe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000dc2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dc4:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <MX_SPI3_Init+0x74>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dca:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <MX_SPI3_Init+0x74>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <MX_SPI3_Init+0x74>)
 8000dd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dd6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <MX_SPI3_Init+0x74>)
 8000dda:	2218      	movs	r2, #24
 8000ddc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <MX_SPI3_Init+0x74>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <MX_SPI3_Init+0x74>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dea:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <MX_SPI3_Init+0x74>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <MX_SPI3_Init+0x74>)
 8000df2:	2207      	movs	r2, #7
 8000df4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000df6:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <MX_SPI3_Init+0x74>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <MX_SPI3_Init+0x74>)
 8000dfe:	2208      	movs	r2, #8
 8000e00:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <MX_SPI3_Init+0x74>)
 8000e04:	f003 fed4 	bl	8004bb0 <HAL_SPI_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000e0e:	f000 f9a3 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200003a0 	.word	0x200003a0
 8000e1c:	40003c00 	.word	0x40003c00

08000e20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e26:	f107 0310 	add.w	r3, r7, #16
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e34:	1d3b      	adds	r3, r7, #4
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e3e:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <MX_TIM2_Init+0x98>)
 8000e40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 30-1;
 8000e46:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <MX_TIM2_Init+0x98>)
 8000e48:	221d      	movs	r2, #29
 8000e4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <MX_TIM2_Init+0x98>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 28333;
 8000e52:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <MX_TIM2_Init+0x98>)
 8000e54:	f646 62ad 	movw	r2, #28333	; 0x6ead
 8000e58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e5a:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <MX_TIM2_Init+0x98>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e60:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <MX_TIM2_Init+0x98>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e66:	4814      	ldr	r0, [pc, #80]	; (8000eb8 <MX_TIM2_Init+0x98>)
 8000e68:	f004 fdba 	bl	80059e0 <HAL_TIM_Base_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e72:	f000 f971 	bl	8001158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e7c:	f107 0310 	add.w	r3, r7, #16
 8000e80:	4619      	mov	r1, r3
 8000e82:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <MX_TIM2_Init+0x98>)
 8000e84:	f004 fffc 	bl	8005e80 <HAL_TIM_ConfigClockSource>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e8e:	f000 f963 	bl	8001158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4806      	ldr	r0, [pc, #24]	; (8000eb8 <MX_TIM2_Init+0x98>)
 8000ea0:	f005 fa70 	bl	8006384 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000eaa:	f000 f955 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	3720      	adds	r7, #32
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000404 	.word	0x20000404

08000ebc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <MX_DMA_Init+0x50>)
 8000ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ec6:	4a11      	ldr	r2, [pc, #68]	; (8000f0c <MX_DMA_Init+0x50>)
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	6493      	str	r3, [r2, #72]	; 0x48
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <MX_DMA_Init+0x50>)
 8000ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <MX_DMA_Init+0x50>)
 8000edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ede:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <MX_DMA_Init+0x50>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6493      	str	r3, [r2, #72]	; 0x48
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <MX_DMA_Init+0x50>)
 8000ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 6, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2106      	movs	r1, #6
 8000ef6:	200b      	movs	r0, #11
 8000ef8:	f001 ffd0 	bl	8002e9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000efc:	200b      	movs	r0, #11
 8000efe:	f001 ffe7 	bl	8002ed0 <HAL_NVIC_EnableIRQ>

}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000

08000f10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f26:	4b4f      	ldr	r3, [pc, #316]	; (8001064 <MX_GPIO_Init+0x154>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2a:	4a4e      	ldr	r2, [pc, #312]	; (8001064 <MX_GPIO_Init+0x154>)
 8000f2c:	f043 0304 	orr.w	r3, r3, #4
 8000f30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f32:	4b4c      	ldr	r3, [pc, #304]	; (8001064 <MX_GPIO_Init+0x154>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	f003 0304 	and.w	r3, r3, #4
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f3e:	4b49      	ldr	r3, [pc, #292]	; (8001064 <MX_GPIO_Init+0x154>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f42:	4a48      	ldr	r2, [pc, #288]	; (8001064 <MX_GPIO_Init+0x154>)
 8000f44:	f043 0320 	orr.w	r3, r3, #32
 8000f48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f4a:	4b46      	ldr	r3, [pc, #280]	; (8001064 <MX_GPIO_Init+0x154>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	f003 0320 	and.w	r3, r3, #32
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	4b43      	ldr	r3, [pc, #268]	; (8001064 <MX_GPIO_Init+0x154>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	4a42      	ldr	r2, [pc, #264]	; (8001064 <MX_GPIO_Init+0x154>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f62:	4b40      	ldr	r3, [pc, #256]	; (8001064 <MX_GPIO_Init+0x154>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	4b3d      	ldr	r3, [pc, #244]	; (8001064 <MX_GPIO_Init+0x154>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	4a3c      	ldr	r2, [pc, #240]	; (8001064 <MX_GPIO_Init+0x154>)
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7a:	4b3a      	ldr	r3, [pc, #232]	; (8001064 <MX_GPIO_Init+0x154>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f86:	4b37      	ldr	r3, [pc, #220]	; (8001064 <MX_GPIO_Init+0x154>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	4a36      	ldr	r2, [pc, #216]	; (8001064 <MX_GPIO_Init+0x154>)
 8000f8c:	f043 0308 	orr.w	r3, r3, #8
 8000f90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f92:	4b34      	ldr	r3, [pc, #208]	; (8001064 <MX_GPIO_Init+0x154>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	f003 0308 	and.w	r3, r3, #8
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	2110      	movs	r1, #16
 8000fa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa6:	f002 fadd 	bl	8003564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2120      	movs	r1, #32
 8000fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb2:	f002 fad7 	bl	8003564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_ETH_GPIO_Port, CS_ETH_Pin, GPIO_PIN_SET);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2104      	movs	r1, #4
 8000fba:	482b      	ldr	r0, [pc, #172]	; (8001068 <MX_GPIO_Init+0x158>)
 8000fbc:	f002 fad2 	bl	8003564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fc6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4825      	ldr	r0, [pc, #148]	; (800106c <MX_GPIO_Init+0x15c>)
 8000fd8:	f002 f942 	bl	8003260 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin LD2_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|LD2_Pin;
 8000fdc:	2330      	movs	r3, #48	; 0x30
 8000fde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff6:	f002 f933 	bl	8003260 <HAL_GPIO_Init>

  /*Configure GPIO pins : IP_2_Pin IP_1_Pin IP_0_Pin */
  GPIO_InitStruct.Pin = IP_2_Pin|IP_1_Pin|IP_0_Pin;
 8000ffa:	f44f 7350 	mov.w	r3, #832	; 0x340
 8000ffe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001000:	2300      	movs	r3, #0
 8001002:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001004:	2302      	movs	r3, #2
 8001006:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	4619      	mov	r1, r3
 800100e:	4817      	ldr	r0, [pc, #92]	; (800106c <MX_GPIO_Init+0x15c>)
 8001010:	f002 f926 	bl	8003260 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_ETH_Pin */
  GPIO_InitStruct.Pin = CS_ETH_Pin;
 8001014:	2304      	movs	r3, #4
 8001016:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001018:	2301      	movs	r3, #1
 800101a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_ETH_GPIO_Port, &GPIO_InitStruct);
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4619      	mov	r1, r3
 800102a:	480f      	ldr	r0, [pc, #60]	; (8001068 <MX_GPIO_Init+0x158>)
 800102c:	f002 f918 	bl	8003260 <HAL_GPIO_Init>

  /*Configure GPIO pin : IP_3_Pin */
  GPIO_InitStruct.Pin = IP_3_Pin;
 8001030:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001034:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001036:	2300      	movs	r3, #0
 8001038:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800103a:	2302      	movs	r3, #2
 800103c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IP_3_GPIO_Port, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	480a      	ldr	r0, [pc, #40]	; (8001070 <MX_GPIO_Init+0x160>)
 8001046:	f002 f90b 	bl	8003260 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	210a      	movs	r1, #10
 800104e:	2028      	movs	r0, #40	; 0x28
 8001050:	f001 ff24 	bl	8002e9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001054:	2028      	movs	r0, #40	; 0x28
 8001056:	f001 ff3b 	bl	8002ed0 <HAL_NVIC_EnableIRQ>

}
 800105a:	bf00      	nop
 800105c:	3728      	adds	r7, #40	; 0x28
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40021000 	.word	0x40021000
 8001068:	48000c00 	.word	0x48000c00
 800106c:	48000800 	.word	0x48000800
 8001070:	48000400 	.word	0x48000400

08001074 <SDTimer_Handler>:

/* USER CODE BEGIN 4 */

void SDTimer_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <SDTimer_Handler+0x38>)
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d005      	beq.n	800108c <SDTimer_Handler+0x18>
    Timer1--;
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <SDTimer_Handler+0x38>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	3b01      	subs	r3, #1
 8001086:	b29a      	uxth	r2, r3
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <SDTimer_Handler+0x38>)
 800108a:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <SDTimer_Handler+0x3c>)
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d005      	beq.n	80010a0 <SDTimer_Handler+0x2c>
    Timer2--;
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <SDTimer_Handler+0x3c>)
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	3b01      	subs	r3, #1
 800109a:	b29a      	uxth	r2, r3
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <SDTimer_Handler+0x3c>)
 800109e:	801a      	strh	r2, [r3, #0]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000eae 	.word	0x20000eae
 80010b0:	20000eb0 	.word	0x20000eb0

080010b4 <CS_SEL_FUN>:

void CS_SEL_FUN(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
// CS y GPIO de SPI3
	HAL_GPIO_WritePin(CS_ETH_GPIO_Port, CS_ETH_Pin, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2104      	movs	r1, #4
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <CS_SEL_FUN+0x14>)
 80010be:	f002 fa51 	bl	8003564 <HAL_GPIO_WritePin>
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	48000c00 	.word	0x48000c00

080010cc <CS_DES_FUN>:

void CS_DES_FUN(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_ETH_GPIO_Port, CS_ETH_Pin, GPIO_PIN_SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	2104      	movs	r1, #4
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <CS_DES_FUN+0x14>)
 80010d6:	f002 fa45 	bl	8003564 <HAL_GPIO_WritePin>
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	48000c00 	.word	0x48000c00

080010e4 <SPI_Received>:
// Tener cuidado con el SPI que se esta usando
uint8_t SPI_Received(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
	uint8_t RX_Buff;
	HAL_SPI_Receive(&hspi3, &RX_Buff, 1, 100);
 80010ea:	1df9      	adds	r1, r7, #7
 80010ec:	2364      	movs	r3, #100	; 0x64
 80010ee:	2201      	movs	r2, #1
 80010f0:	4803      	ldr	r0, [pc, #12]	; (8001100 <SPI_Received+0x1c>)
 80010f2:	f003 ff76 	bl	8004fe2 <HAL_SPI_Receive>
	return RX_Buff;
 80010f6:	79fb      	ldrb	r3, [r7, #7]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200003a0 	.word	0x200003a0

08001104 <SPI_Transmit>:

void SPI_Transmit(uint8_t TX_Buff)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi3, &TX_Buff, 1, 100);
 800110e:	1df9      	adds	r1, r7, #7
 8001110:	2364      	movs	r3, #100	; 0x64
 8001112:	2201      	movs	r2, #1
 8001114:	4803      	ldr	r0, [pc, #12]	; (8001124 <SPI_Transmit+0x20>)
 8001116:	f003 fdf6 	bl	8004d06 <HAL_SPI_Transmit>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200003a0 	.word	0x200003a0

08001128 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM6) {
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a07      	ldr	r2, [pc, #28]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d101      	bne.n	800113e <HAL_TIM_PeriodElapsedCallback+0x16>
	    SDTimer_Handler();
 800113a:	f7ff ff9b 	bl	8001074 <SDTimer_Handler>
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a04      	ldr	r2, [pc, #16]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d101      	bne.n	800114c <HAL_TIM_PeriodElapsedCallback+0x24>
    HAL_IncTick();
 8001148:	f000 fca6 	bl	8001a98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40001000 	.word	0x40001000

08001158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	buff_length = sprintf(tx_buff, "Error_Handler\r\n");
 800115c:	4909      	ldr	r1, [pc, #36]	; (8001184 <Error_Handler+0x2c>)
 800115e:	480a      	ldr	r0, [pc, #40]	; (8001188 <Error_Handler+0x30>)
 8001160:	f00d fb1a 	bl	800e798 <siprintf>
 8001164:	4603      	mov	r3, r0
 8001166:	b2da      	uxtb	r2, r3
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <Error_Handler+0x34>)
 800116a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)tx_buff, buff_length, 100);
 800116c:	4b07      	ldr	r3, [pc, #28]	; (800118c <Error_Handler+0x34>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	b29a      	uxth	r2, r3
 8001174:	2364      	movs	r3, #100	; 0x64
 8001176:	4904      	ldr	r1, [pc, #16]	; (8001188 <Error_Handler+0x30>)
 8001178:	4805      	ldr	r0, [pc, #20]	; (8001190 <Error_Handler+0x38>)
 800117a:	f005 fa2f 	bl	80065dc <HAL_UART_Transmit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800117e:	b672      	cpsid	i
}
 8001180:	bf00      	nop
  __disable_irq();
  while (1)
 8001182:	e7fe      	b.n	8001182 <Error_Handler+0x2a>
 8001184:	0800fcd0 	.word	0x0800fcd0
 8001188:	20000450 	.word	0x20000450
 800118c:	200004aa 	.word	0x200004aa
 8001190:	20000284 	.word	0x20000284

08001194 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <HAL_MspInit+0x44>)
 800119c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119e:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <HAL_MspInit+0x44>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6613      	str	r3, [r2, #96]	; 0x60
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <HAL_MspInit+0x44>)
 80011a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <HAL_MspInit+0x44>)
 80011b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b6:	4a08      	ldr	r2, [pc, #32]	; (80011d8 <HAL_MspInit+0x44>)
 80011b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011bc:	6593      	str	r3, [r2, #88]	; 0x58
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_MspInit+0x44>)
 80011c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80011ca:	f002 fad5 	bl	8003778 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40021000 	.word	0x40021000

080011dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b0a4      	sub	sp, #144	; 0x90
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011f8:	2254      	movs	r2, #84	; 0x54
 80011fa:	2100      	movs	r1, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f00d f92f 	bl	800e460 <memset>
  if(hadc->Instance==ADC1)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800120a:	f040 8086 	bne.w	800131a <HAL_ADC_MspInit+0x13e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800120e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001212:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001214:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001218:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800121a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800121e:	4618      	mov	r0, r3
 8001220:	f003 f820 	bl	8004264 <HAL_RCCEx_PeriphCLKConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800122a:	f7ff ff95 	bl	8001158 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800122e:	4b7a      	ldr	r3, [pc, #488]	; (8001418 <HAL_ADC_MspInit+0x23c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	3301      	adds	r3, #1
 8001234:	4a78      	ldr	r2, [pc, #480]	; (8001418 <HAL_ADC_MspInit+0x23c>)
 8001236:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001238:	4b77      	ldr	r3, [pc, #476]	; (8001418 <HAL_ADC_MspInit+0x23c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d10b      	bne.n	8001258 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001240:	4b76      	ldr	r3, [pc, #472]	; (800141c <HAL_ADC_MspInit+0x240>)
 8001242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001244:	4a75      	ldr	r2, [pc, #468]	; (800141c <HAL_ADC_MspInit+0x240>)
 8001246:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800124a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124c:	4b73      	ldr	r3, [pc, #460]	; (800141c <HAL_ADC_MspInit+0x240>)
 800124e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001250:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001258:	4b70      	ldr	r3, [pc, #448]	; (800141c <HAL_ADC_MspInit+0x240>)
 800125a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125c:	4a6f      	ldr	r2, [pc, #444]	; (800141c <HAL_ADC_MspInit+0x240>)
 800125e:	f043 0304 	orr.w	r3, r3, #4
 8001262:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001264:	4b6d      	ldr	r3, [pc, #436]	; (800141c <HAL_ADC_MspInit+0x240>)
 8001266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	623b      	str	r3, [r7, #32]
 800126e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001270:	4b6a      	ldr	r3, [pc, #424]	; (800141c <HAL_ADC_MspInit+0x240>)
 8001272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001274:	4a69      	ldr	r2, [pc, #420]	; (800141c <HAL_ADC_MspInit+0x240>)
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127c:	4b67      	ldr	r3, [pc, #412]	; (800141c <HAL_ADC_MspInit+0x240>)
 800127e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	61fb      	str	r3, [r7, #28]
 8001286:	69fb      	ldr	r3, [r7, #28]
    PC2     ------> ADC1_IN8
    PC3     ------> ADC1_IN9
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001288:	230f      	movs	r3, #15
 800128a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800128c:	2303      	movs	r3, #3
 800128e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001298:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800129c:	4619      	mov	r1, r3
 800129e:	4860      	ldr	r0, [pc, #384]	; (8001420 <HAL_ADC_MspInit+0x244>)
 80012a0:	f001 ffde 	bl	8003260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012a4:	2303      	movs	r3, #3
 80012a6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a8:	2303      	movs	r3, #3
 80012aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80012b8:	4619      	mov	r1, r3
 80012ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012be:	f001 ffcf 	bl	8003260 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012c2:	4b58      	ldr	r3, [pc, #352]	; (8001424 <HAL_ADC_MspInit+0x248>)
 80012c4:	4a58      	ldr	r2, [pc, #352]	; (8001428 <HAL_ADC_MspInit+0x24c>)
 80012c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012c8:	4b56      	ldr	r3, [pc, #344]	; (8001424 <HAL_ADC_MspInit+0x248>)
 80012ca:	2205      	movs	r2, #5
 80012cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012ce:	4b55      	ldr	r3, [pc, #340]	; (8001424 <HAL_ADC_MspInit+0x248>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012d4:	4b53      	ldr	r3, [pc, #332]	; (8001424 <HAL_ADC_MspInit+0x248>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012da:	4b52      	ldr	r3, [pc, #328]	; (8001424 <HAL_ADC_MspInit+0x248>)
 80012dc:	2280      	movs	r2, #128	; 0x80
 80012de:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012e0:	4b50      	ldr	r3, [pc, #320]	; (8001424 <HAL_ADC_MspInit+0x248>)
 80012e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012e8:	4b4e      	ldr	r3, [pc, #312]	; (8001424 <HAL_ADC_MspInit+0x248>)
 80012ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012ee:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80012f0:	4b4c      	ldr	r3, [pc, #304]	; (8001424 <HAL_ADC_MspInit+0x248>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012f6:	4b4b      	ldr	r3, [pc, #300]	; (8001424 <HAL_ADC_MspInit+0x248>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012fc:	4849      	ldr	r0, [pc, #292]	; (8001424 <HAL_ADC_MspInit+0x248>)
 80012fe:	f001 fdf5 	bl	8002eec <HAL_DMA_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8001308:	f7ff ff26 	bl	8001158 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a45      	ldr	r2, [pc, #276]	; (8001424 <HAL_ADC_MspInit+0x248>)
 8001310:	655a      	str	r2, [r3, #84]	; 0x54
 8001312:	4a44      	ldr	r2, [pc, #272]	; (8001424 <HAL_ADC_MspInit+0x248>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001318:	e079      	b.n	800140e <HAL_ADC_MspInit+0x232>
  else if(hadc->Instance==ADC2)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a43      	ldr	r2, [pc, #268]	; (800142c <HAL_ADC_MspInit+0x250>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d174      	bne.n	800140e <HAL_ADC_MspInit+0x232>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001324:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001328:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800132a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800132e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001330:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001334:	4618      	mov	r0, r3
 8001336:	f002 ff95 	bl	8004264 <HAL_RCCEx_PeriphCLKConfig>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <HAL_ADC_MspInit+0x168>
      Error_Handler();
 8001340:	f7ff ff0a 	bl	8001158 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001344:	4b34      	ldr	r3, [pc, #208]	; (8001418 <HAL_ADC_MspInit+0x23c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	3301      	adds	r3, #1
 800134a:	4a33      	ldr	r2, [pc, #204]	; (8001418 <HAL_ADC_MspInit+0x23c>)
 800134c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800134e:	4b32      	ldr	r3, [pc, #200]	; (8001418 <HAL_ADC_MspInit+0x23c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d10b      	bne.n	800136e <HAL_ADC_MspInit+0x192>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001356:	4b31      	ldr	r3, [pc, #196]	; (800141c <HAL_ADC_MspInit+0x240>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	4a30      	ldr	r2, [pc, #192]	; (800141c <HAL_ADC_MspInit+0x240>)
 800135c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001362:	4b2e      	ldr	r3, [pc, #184]	; (800141c <HAL_ADC_MspInit+0x240>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800136a:	61bb      	str	r3, [r7, #24]
 800136c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	4b2b      	ldr	r3, [pc, #172]	; (800141c <HAL_ADC_MspInit+0x240>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	4a2a      	ldr	r2, [pc, #168]	; (800141c <HAL_ADC_MspInit+0x240>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137a:	4b28      	ldr	r3, [pc, #160]	; (800141c <HAL_ADC_MspInit+0x240>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001386:	4b25      	ldr	r3, [pc, #148]	; (800141c <HAL_ADC_MspInit+0x240>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	4a24      	ldr	r2, [pc, #144]	; (800141c <HAL_ADC_MspInit+0x240>)
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001392:	4b22      	ldr	r3, [pc, #136]	; (800141c <HAL_ADC_MspInit+0x240>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	4b1f      	ldr	r3, [pc, #124]	; (800141c <HAL_ADC_MspInit+0x240>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	4a1e      	ldr	r2, [pc, #120]	; (800141c <HAL_ADC_MspInit+0x240>)
 80013a4:	f043 0302 	orr.w	r3, r3, #2
 80013a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013aa:	4b1c      	ldr	r3, [pc, #112]	; (800141c <HAL_ADC_MspInit+0x240>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013b6:	23c0      	movs	r3, #192	; 0xc0
 80013b8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ba:	2303      	movs	r3, #3
 80013bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013ca:	4619      	mov	r1, r3
 80013cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d0:	f001 ff46 	bl	8003260 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80013d4:	2330      	movs	r3, #48	; 0x30
 80013d6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d8:	2303      	movs	r3, #3
 80013da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013e8:	4619      	mov	r1, r3
 80013ea:	480d      	ldr	r0, [pc, #52]	; (8001420 <HAL_ADC_MspInit+0x244>)
 80013ec:	f001 ff38 	bl	8003260 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_11;
 80013f0:	f640 0304 	movw	r3, #2052	; 0x804
 80013f4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f6:	2303      	movs	r3, #3
 80013f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001402:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001406:	4619      	mov	r1, r3
 8001408:	4809      	ldr	r0, [pc, #36]	; (8001430 <HAL_ADC_MspInit+0x254>)
 800140a:	f001 ff29 	bl	8003260 <HAL_GPIO_Init>
}
 800140e:	bf00      	nop
 8001410:	3790      	adds	r7, #144	; 0x90
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000974 	.word	0x20000974
 800141c:	40021000 	.word	0x40021000
 8001420:	48000800 	.word	0x48000800
 8001424:	20000224 	.word	0x20000224
 8001428:	40020008 	.word	0x40020008
 800142c:	50000100 	.word	0x50000100
 8001430:	48000400 	.word	0x48000400

08001434 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b09e      	sub	sp, #120	; 0x78
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800144c:	f107 0310 	add.w	r3, r7, #16
 8001450:	2254      	movs	r2, #84	; 0x54
 8001452:	2100      	movs	r1, #0
 8001454:	4618      	mov	r0, r3
 8001456:	f00d f803 	bl	800e460 <memset>
  if(huart->Instance==LPUART1)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a1f      	ldr	r2, [pc, #124]	; (80014dc <HAL_UART_MspInit+0xa8>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d136      	bne.n	80014d2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001464:	2320      	movs	r3, #32
 8001466:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001468:	2300      	movs	r3, #0
 800146a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800146c:	f107 0310 	add.w	r3, r7, #16
 8001470:	4618      	mov	r0, r3
 8001472:	f002 fef7 	bl	8004264 <HAL_RCCEx_PeriphCLKConfig>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800147c:	f7ff fe6c 	bl	8001158 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001480:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <HAL_UART_MspInit+0xac>)
 8001482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001484:	4a16      	ldr	r2, [pc, #88]	; (80014e0 <HAL_UART_MspInit+0xac>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800148c:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <HAL_UART_MspInit+0xac>)
 800148e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_UART_MspInit+0xac>)
 800149a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149c:	4a10      	ldr	r2, [pc, #64]	; (80014e0 <HAL_UART_MspInit+0xac>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a4:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <HAL_UART_MspInit+0xac>)
 80014a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80014b0:	230c      	movs	r3, #12
 80014b2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80014c0:	230c      	movs	r3, #12
 80014c2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014c8:	4619      	mov	r1, r3
 80014ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ce:	f001 fec7 	bl	8003260 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80014d2:	bf00      	nop
 80014d4:	3778      	adds	r7, #120	; 0x78
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40008000 	.word	0x40008000
 80014e0:	40021000 	.word	0x40021000

080014e4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b098      	sub	sp, #96	; 0x60
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014ec:	f107 030c 	add.w	r3, r7, #12
 80014f0:	2254      	movs	r2, #84	; 0x54
 80014f2:	2100      	movs	r1, #0
 80014f4:	4618      	mov	r0, r3
 80014f6:	f00c ffb3 	bl	800e460 <memset>
  if(hrtc->Instance==RTC)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a15      	ldr	r2, [pc, #84]	; (8001554 <HAL_RTC_MspInit+0x70>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d123      	bne.n	800154c <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001504:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001508:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800150a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800150e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	4618      	mov	r0, r3
 8001516:	f002 fea5 	bl	8004264 <HAL_RCCEx_PeriphCLKConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001520:	f7ff fe1a 	bl	8001158 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <HAL_RTC_MspInit+0x74>)
 8001526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800152a:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <HAL_RTC_MspInit+0x74>)
 800152c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001534:	4b08      	ldr	r3, [pc, #32]	; (8001558 <HAL_RTC_MspInit+0x74>)
 8001536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001538:	4a07      	ldr	r2, [pc, #28]	; (8001558 <HAL_RTC_MspInit+0x74>)
 800153a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800153e:	6593      	str	r3, [r2, #88]	; 0x58
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <HAL_RTC_MspInit+0x74>)
 8001542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800154c:	bf00      	nop
 800154e:	3760      	adds	r7, #96	; 0x60
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40002800 	.word	0x40002800
 8001558:	40021000 	.word	0x40021000

0800155c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08c      	sub	sp, #48	; 0x30
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 031c 	add.w	r3, r7, #28
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a2f      	ldr	r2, [pc, #188]	; (8001638 <HAL_SPI_MspInit+0xdc>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d129      	bne.n	80015d2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800157e:	4b2f      	ldr	r3, [pc, #188]	; (800163c <HAL_SPI_MspInit+0xe0>)
 8001580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001582:	4a2e      	ldr	r2, [pc, #184]	; (800163c <HAL_SPI_MspInit+0xe0>)
 8001584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001588:	6593      	str	r3, [r2, #88]	; 0x58
 800158a:	4b2c      	ldr	r3, [pc, #176]	; (800163c <HAL_SPI_MspInit+0xe0>)
 800158c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001592:	61bb      	str	r3, [r7, #24]
 8001594:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001596:	4b29      	ldr	r3, [pc, #164]	; (800163c <HAL_SPI_MspInit+0xe0>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159a:	4a28      	ldr	r2, [pc, #160]	; (800163c <HAL_SPI_MspInit+0xe0>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a2:	4b26      	ldr	r3, [pc, #152]	; (800163c <HAL_SPI_MspInit+0xe0>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80015ae:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80015b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015c0:	2305      	movs	r3, #5
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	4619      	mov	r1, r3
 80015ca:	481d      	ldr	r0, [pc, #116]	; (8001640 <HAL_SPI_MspInit+0xe4>)
 80015cc:	f001 fe48 	bl	8003260 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80015d0:	e02d      	b.n	800162e <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a1b      	ldr	r2, [pc, #108]	; (8001644 <HAL_SPI_MspInit+0xe8>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d128      	bne.n	800162e <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015dc:	4b17      	ldr	r3, [pc, #92]	; (800163c <HAL_SPI_MspInit+0xe0>)
 80015de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e0:	4a16      	ldr	r2, [pc, #88]	; (800163c <HAL_SPI_MspInit+0xe0>)
 80015e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015e6:	6593      	str	r3, [r2, #88]	; 0x58
 80015e8:	4b14      	ldr	r3, [pc, #80]	; (800163c <HAL_SPI_MspInit+0xe0>)
 80015ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <HAL_SPI_MspInit+0xe0>)
 80015f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f8:	4a10      	ldr	r2, [pc, #64]	; (800163c <HAL_SPI_MspInit+0xe0>)
 80015fa:	f043 0304 	orr.w	r3, r3, #4
 80015fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001600:	4b0e      	ldr	r3, [pc, #56]	; (800163c <HAL_SPI_MspInit+0xe0>)
 8001602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800160c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2300      	movs	r3, #0
 800161c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800161e:	2306      	movs	r3, #6
 8001620:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001622:	f107 031c 	add.w	r3, r7, #28
 8001626:	4619      	mov	r1, r3
 8001628:	4807      	ldr	r0, [pc, #28]	; (8001648 <HAL_SPI_MspInit+0xec>)
 800162a:	f001 fe19 	bl	8003260 <HAL_GPIO_Init>
}
 800162e:	bf00      	nop
 8001630:	3730      	adds	r7, #48	; 0x30
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40003800 	.word	0x40003800
 800163c:	40021000 	.word	0x40021000
 8001640:	48000400 	.word	0x48000400
 8001644:	40003c00 	.word	0x40003c00
 8001648:	48000800 	.word	0x48000800

0800164c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800165c:	d113      	bne.n	8001686 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <HAL_TIM_Base_MspInit+0x44>)
 8001660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001662:	4a0b      	ldr	r2, [pc, #44]	; (8001690 <HAL_TIM_Base_MspInit+0x44>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6593      	str	r3, [r2, #88]	; 0x58
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <HAL_TIM_Base_MspInit+0x44>)
 800166c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2100      	movs	r1, #0
 800167a:	201c      	movs	r0, #28
 800167c:	f001 fc0e 	bl	8002e9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001680:	201c      	movs	r0, #28
 8001682:	f001 fc25 	bl	8002ed0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000

08001694 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08c      	sub	sp, #48	; 0x30
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80016a4:	2300      	movs	r3, #0
 80016a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016aa:	4b2d      	ldr	r3, [pc, #180]	; (8001760 <HAL_InitTick+0xcc>)
 80016ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ae:	4a2c      	ldr	r2, [pc, #176]	; (8001760 <HAL_InitTick+0xcc>)
 80016b0:	f043 0310 	orr.w	r3, r3, #16
 80016b4:	6593      	str	r3, [r2, #88]	; 0x58
 80016b6:	4b2a      	ldr	r3, [pc, #168]	; (8001760 <HAL_InitTick+0xcc>)
 80016b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ba:	f003 0310 	and.w	r3, r3, #16
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016c2:	f107 020c 	add.w	r2, r7, #12
 80016c6:	f107 0310 	add.w	r3, r7, #16
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f002 fd51 	bl	8004174 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016d2:	f002 fd23 	bl	800411c <HAL_RCC_GetPCLK1Freq>
 80016d6:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016da:	4a22      	ldr	r2, [pc, #136]	; (8001764 <HAL_InitTick+0xd0>)
 80016dc:	fba2 2303 	umull	r2, r3, r2, r3
 80016e0:	0c9b      	lsrs	r3, r3, #18
 80016e2:	3b01      	subs	r3, #1
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016e6:	4b20      	ldr	r3, [pc, #128]	; (8001768 <HAL_InitTick+0xd4>)
 80016e8:	4a20      	ldr	r2, [pc, #128]	; (800176c <HAL_InitTick+0xd8>)
 80016ea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016ec:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <HAL_InitTick+0xd4>)
 80016ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016f2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016f4:	4a1c      	ldr	r2, [pc, #112]	; (8001768 <HAL_InitTick+0xd4>)
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016fa:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <HAL_InitTick+0xd4>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001700:	4b19      	ldr	r3, [pc, #100]	; (8001768 <HAL_InitTick+0xd4>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001706:	4818      	ldr	r0, [pc, #96]	; (8001768 <HAL_InitTick+0xd4>)
 8001708:	f004 f96a 	bl	80059e0 <HAL_TIM_Base_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001712:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001716:	2b00      	cmp	r3, #0
 8001718:	d11b      	bne.n	8001752 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800171a:	4813      	ldr	r0, [pc, #76]	; (8001768 <HAL_InitTick+0xd4>)
 800171c:	f004 f9b8 	bl	8005a90 <HAL_TIM_Base_Start_IT>
 8001720:	4603      	mov	r3, r0
 8001722:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001726:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800172a:	2b00      	cmp	r3, #0
 800172c:	d111      	bne.n	8001752 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800172e:	2036      	movs	r0, #54	; 0x36
 8001730:	f001 fbce 	bl	8002ed0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b0f      	cmp	r3, #15
 8001738:	d808      	bhi.n	800174c <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800173a:	2200      	movs	r2, #0
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	2036      	movs	r0, #54	; 0x36
 8001740:	f001 fbac 	bl	8002e9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001744:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <HAL_InitTick+0xdc>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	e002      	b.n	8001752 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 8001752:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001756:	4618      	mov	r0, r3
 8001758:	3730      	adds	r7, #48	; 0x30
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40021000 	.word	0x40021000
 8001764:	431bde83 	.word	0x431bde83
 8001768:	20000978 	.word	0x20000978
 800176c:	40001000 	.word	0x40001000
 8001770:	20000004 	.word	0x20000004

08001774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001778:	e7fe      	b.n	8001778 <NMI_Handler+0x4>

0800177a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177e:	e7fe      	b.n	800177e <HardFault_Handler+0x4>

08001780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001784:	e7fe      	b.n	8001784 <MemManage_Handler+0x4>

08001786 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800178a:	e7fe      	b.n	800178a <BusFault_Handler+0x4>

0800178c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <UsageFault_Handler+0x4>

08001792 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017d0:	4802      	ldr	r0, [pc, #8]	; (80017dc <DMA1_Channel1_IRQHandler+0x10>)
 80017d2:	f001 fc33 	bl	800303c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000224 	.word	0x20000224

080017e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017e4:	4802      	ldr	r0, [pc, #8]	; (80017f0 <TIM2_IRQHandler+0x10>)
 80017e6:	f004 f9cb 	bl	8005b80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000404 	.word	0x20000404

080017f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80017f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017fc:	f001 fee4 	bl	80035c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}

08001804 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <TIM6_DAC_IRQHandler+0x10>)
 800180a:	f004 f9b9 	bl	8005b80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000978 	.word	0x20000978

08001818 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001820:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001824:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b00      	cmp	r3, #0
 800182e:	d013      	beq.n	8001858 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001830:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001834:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001838:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800183c:	2b00      	cmp	r3, #0
 800183e:	d00b      	beq.n	8001858 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001840:	e000      	b.n	8001844 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001842:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001844:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0f9      	beq.n	8001842 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800184e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001858:	687b      	ldr	r3, [r7, #4]
}
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0
	return 1;
 800186a:	2301      	movs	r3, #1
}
 800186c:	4618      	mov	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <_kill>:

int _kill(int pid, int sig)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001880:	f00c fda6 	bl	800e3d0 <__errno>
 8001884:	4603      	mov	r3, r0
 8001886:	2216      	movs	r2, #22
 8001888:	601a      	str	r2, [r3, #0]
	return -1;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <_exit>:

void _exit (int status)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800189e:	f04f 31ff 	mov.w	r1, #4294967295
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff ffe7 	bl	8001876 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018a8:	e7fe      	b.n	80018a8 <_exit+0x12>

080018aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b086      	sub	sp, #24
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	60f8      	str	r0, [r7, #12]
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	e00a      	b.n	80018d2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018bc:	f3af 8000 	nop.w
 80018c0:	4601      	mov	r1, r0
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	1c5a      	adds	r2, r3, #1
 80018c6:	60ba      	str	r2, [r7, #8]
 80018c8:	b2ca      	uxtb	r2, r1
 80018ca:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	3301      	adds	r3, #1
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	dbf0      	blt.n	80018bc <_read+0x12>
	}

return len;
 80018da:	687b      	ldr	r3, [r7, #4]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	e009      	b.n	800190a <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	1c5a      	adds	r2, r3, #1
 80018fa:	60ba      	str	r2, [r7, #8]
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff ff8a 	bl	8001818 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	3301      	adds	r3, #1
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	429a      	cmp	r2, r3
 8001910:	dbf1      	blt.n	80018f6 <_write+0x12>
	}
	return len;
 8001912:	687b      	ldr	r3, [r7, #4]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <_close>:

int _close(int file)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
	return -1;
 8001924:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001944:	605a      	str	r2, [r3, #4]
	return 0;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <_isatty>:

int _isatty(int file)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	return 1;
 800195c:	2301      	movs	r3, #1
}
 800195e:	4618      	mov	r0, r3
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800196a:	b480      	push	{r7}
 800196c:	b085      	sub	sp, #20
 800196e:	af00      	add	r7, sp, #0
 8001970:	60f8      	str	r0, [r7, #12]
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
	return 0;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800198c:	4a14      	ldr	r2, [pc, #80]	; (80019e0 <_sbrk+0x5c>)
 800198e:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <_sbrk+0x60>)
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001998:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <_sbrk+0x64>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d102      	bne.n	80019a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <_sbrk+0x64>)
 80019a2:	4a12      	ldr	r2, [pc, #72]	; (80019ec <_sbrk+0x68>)
 80019a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <_sbrk+0x64>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d207      	bcs.n	80019c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b4:	f00c fd0c 	bl	800e3d0 <__errno>
 80019b8:	4603      	mov	r3, r0
 80019ba:	220c      	movs	r2, #12
 80019bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019be:	f04f 33ff 	mov.w	r3, #4294967295
 80019c2:	e009      	b.n	80019d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <_sbrk+0x64>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ca:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <_sbrk+0x64>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	4a05      	ldr	r2, [pc, #20]	; (80019e8 <_sbrk+0x64>)
 80019d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019d6:	68fb      	ldr	r3, [r7, #12]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20020000 	.word	0x20020000
 80019e4:	00000400 	.word	0x00000400
 80019e8:	200009c4 	.word	0x200009c4
 80019ec:	20000ef8 	.word	0x20000ef8

080019f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <SystemInit+0x20>)
 80019f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019fa:	4a05      	ldr	r2, [pc, #20]	; (8001a10 <SystemInit+0x20>)
 80019fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <Reset_Handler>:
 8001a14:	480d      	ldr	r0, [pc, #52]	; (8001a4c <LoopForever+0x2>)
 8001a16:	4685      	mov	sp, r0
 8001a18:	480d      	ldr	r0, [pc, #52]	; (8001a50 <LoopForever+0x6>)
 8001a1a:	490e      	ldr	r1, [pc, #56]	; (8001a54 <LoopForever+0xa>)
 8001a1c:	4a0e      	ldr	r2, [pc, #56]	; (8001a58 <LoopForever+0xe>)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e002      	b.n	8001a28 <LoopCopyDataInit>

08001a22 <CopyDataInit>:
 8001a22:	58d4      	ldr	r4, [r2, r3]
 8001a24:	50c4      	str	r4, [r0, r3]
 8001a26:	3304      	adds	r3, #4

08001a28 <LoopCopyDataInit>:
 8001a28:	18c4      	adds	r4, r0, r3
 8001a2a:	428c      	cmp	r4, r1
 8001a2c:	d3f9      	bcc.n	8001a22 <CopyDataInit>
 8001a2e:	4a0b      	ldr	r2, [pc, #44]	; (8001a5c <LoopForever+0x12>)
 8001a30:	4c0b      	ldr	r4, [pc, #44]	; (8001a60 <LoopForever+0x16>)
 8001a32:	2300      	movs	r3, #0
 8001a34:	e001      	b.n	8001a3a <LoopFillZerobss>

08001a36 <FillZerobss>:
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	3204      	adds	r2, #4

08001a3a <LoopFillZerobss>:
 8001a3a:	42a2      	cmp	r2, r4
 8001a3c:	d3fb      	bcc.n	8001a36 <FillZerobss>
 8001a3e:	f7ff ffd7 	bl	80019f0 <SystemInit>
 8001a42:	f00c fccb 	bl	800e3dc <__libc_init_array>
 8001a46:	f7fe fdd5 	bl	80005f4 <main>

08001a4a <LoopForever>:
 8001a4a:	e7fe      	b.n	8001a4a <LoopForever>
 8001a4c:	20020000 	.word	0x20020000
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000130 	.word	0x20000130
 8001a58:	08010d34 	.word	0x08010d34
 8001a5c:	20000130 	.word	0x20000130
 8001a60:	20000ef8 	.word	0x20000ef8

08001a64 <ADC1_2_IRQHandler>:
 8001a64:	e7fe      	b.n	8001a64 <ADC1_2_IRQHandler>

08001a66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a70:	2003      	movs	r0, #3
 8001a72:	f001 fa08 	bl	8002e86 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a76:	200f      	movs	r0, #15
 8001a78:	f7ff fe0c 	bl	8001694 <HAL_InitTick>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d002      	beq.n	8001a88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	71fb      	strb	r3, [r7, #7]
 8001a86:	e001      	b.n	8001a8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a88:	f7ff fb84 	bl	8001194 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a8c:	79fb      	ldrb	r3, [r7, #7]

}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_IncTick+0x1c>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_IncTick+0x20>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	4a03      	ldr	r2, [pc, #12]	; (8001ab4 <HAL_IncTick+0x1c>)
 8001aa8:	6013      	str	r3, [r2, #0]
}
 8001aaa:	bf00      	nop
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	200009c8 	.word	0x200009c8
 8001ab8:	20000008 	.word	0x20000008

08001abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac0:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <HAL_GetTick+0x14>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	200009c8 	.word	0x200009c8

08001ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001adc:	f7ff ffee 	bl	8001abc <HAL_GetTick>
 8001ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aec:	d004      	beq.n	8001af8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <HAL_Delay+0x40>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	4413      	add	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001af8:	bf00      	nop
 8001afa:	f7ff ffdf 	bl	8001abc <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d8f7      	bhi.n	8001afa <HAL_Delay+0x26>
  {
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	bf00      	nop
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000008 	.word	0x20000008

08001b18 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	609a      	str	r2, [r3, #8]
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	609a      	str	r2, [r3, #8]
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b087      	sub	sp, #28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
 8001b8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	3360      	adds	r3, #96	; 0x60
 8001b92:	461a      	mov	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <LL_ADC_SetOffset+0x44>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001bb8:	bf00      	nop
 8001bba:	371c      	adds	r7, #28
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	03fff000 	.word	0x03fff000

08001bc8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3360      	adds	r3, #96	; 0x60
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b087      	sub	sp, #28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	3360      	adds	r3, #96	; 0x60
 8001c04:	461a      	mov	r2, r3
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c1e:	bf00      	nop
 8001c20:	371c      	adds	r7, #28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b087      	sub	sp, #28
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	60f8      	str	r0, [r7, #12]
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	3360      	adds	r3, #96	; 0x60
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001c54:	bf00      	nop
 8001c56:	371c      	adds	r7, #28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	3360      	adds	r3, #96	; 0x60
 8001c70:	461a      	mov	r2, r3
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	431a      	orrs	r2, r3
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001c8a:	bf00      	nop
 8001c8c:	371c      	adds	r7, #28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	615a      	str	r2, [r3, #20]
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b087      	sub	sp, #28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	3330      	adds	r3, #48	; 0x30
 8001ccc:	461a      	mov	r2, r3
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	0a1b      	lsrs	r3, r3, #8
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	f003 030c 	and.w	r3, r3, #12
 8001cd8:	4413      	add	r3, r2
 8001cda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	f003 031f 	and.w	r3, r3, #31
 8001ce6:	211f      	movs	r1, #31
 8001ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	401a      	ands	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	0e9b      	lsrs	r3, r3, #26
 8001cf4:	f003 011f 	and.w	r1, r3, #31
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	f003 031f 	and.w	r3, r3, #31
 8001cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001d02:	431a      	orrs	r2, r3
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d08:	bf00      	nop
 8001d0a:	371c      	adds	r7, #28
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b087      	sub	sp, #28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	3314      	adds	r3, #20
 8001d24:	461a      	mov	r2, r3
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	0e5b      	lsrs	r3, r3, #25
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	4413      	add	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	0d1b      	lsrs	r3, r3, #20
 8001d3c:	f003 031f 	and.w	r3, r3, #31
 8001d40:	2107      	movs	r1, #7
 8001d42:	fa01 f303 	lsl.w	r3, r1, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	401a      	ands	r2, r3
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	0d1b      	lsrs	r3, r3, #20
 8001d4e:	f003 031f 	and.w	r3, r3, #31
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	fa01 f303 	lsl.w	r3, r1, r3
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d5e:	bf00      	nop
 8001d60:	371c      	adds	r7, #28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a0f      	ldr	r2, [pc, #60]	; (8001db8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d10a      	bne.n	8001d96 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001d94:	e00a      	b.n	8001dac <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da2:	43db      	mvns	r3, r3
 8001da4:	401a      	ands	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001dac:	bf00      	nop
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	407f0000 	.word	0x407f0000

08001dbc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001dcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6093      	str	r3, [r2, #8]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001df0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001df4:	d101      	bne.n	8001dfa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001e18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e1c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e44:	d101      	bne.n	8001e4a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <LL_ADC_IsEnabled+0x18>
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e000      	b.n	8001e72 <LL_ADC_IsEnabled+0x1a>
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d101      	bne.n	8001e96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d101      	bne.n	8001ebc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
	...

08001ecc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ecc:	b590      	push	{r4, r7, lr}
 8001ece:	b089      	sub	sp, #36	; 0x24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e1af      	b.n	8002246 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d109      	bne.n	8001f08 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff f971 	bl	80011dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff67 	bl	8001de0 <LL_ADC_IsDeepPowerDownEnabled>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d004      	beq.n	8001f22 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff4d 	bl	8001dbc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff ff82 	bl	8001e30 <LL_ADC_IsInternalRegulatorEnabled>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d115      	bne.n	8001f5e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff ff66 	bl	8001e08 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f3c:	4b9f      	ldr	r3, [pc, #636]	; (80021bc <HAL_ADC_Init+0x2f0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	099b      	lsrs	r3, r3, #6
 8001f42:	4a9f      	ldr	r2, [pc, #636]	; (80021c0 <HAL_ADC_Init+0x2f4>)
 8001f44:	fba2 2303 	umull	r2, r3, r2, r3
 8001f48:	099b      	lsrs	r3, r3, #6
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f50:	e002      	b.n	8001f58 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	3b01      	subs	r3, #1
 8001f56:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f9      	bne.n	8001f52 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff ff64 	bl	8001e30 <LL_ADC_IsInternalRegulatorEnabled>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10d      	bne.n	8001f8a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f72:	f043 0210 	orr.w	r2, r3, #16
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f7e:	f043 0201 	orr.w	r2, r3, #1
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff ff75 	bl	8001e7e <LL_ADC_REG_IsConversionOngoing>
 8001f94:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9a:	f003 0310 	and.w	r3, r3, #16
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f040 8148 	bne.w	8002234 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f040 8144 	bne.w	8002234 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001fb4:	f043 0202 	orr.w	r2, r3, #2
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff ff49 	bl	8001e58 <LL_ADC_IsEnabled>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d141      	bne.n	8002050 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fd4:	d004      	beq.n	8001fe0 <HAL_ADC_Init+0x114>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a7a      	ldr	r2, [pc, #488]	; (80021c4 <HAL_ADC_Init+0x2f8>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d10f      	bne.n	8002000 <HAL_ADC_Init+0x134>
 8001fe0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001fe4:	f7ff ff38 	bl	8001e58 <LL_ADC_IsEnabled>
 8001fe8:	4604      	mov	r4, r0
 8001fea:	4876      	ldr	r0, [pc, #472]	; (80021c4 <HAL_ADC_Init+0x2f8>)
 8001fec:	f7ff ff34 	bl	8001e58 <LL_ADC_IsEnabled>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	4323      	orrs	r3, r4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	bf0c      	ite	eq
 8001ff8:	2301      	moveq	r3, #1
 8001ffa:	2300      	movne	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	e012      	b.n	8002026 <HAL_ADC_Init+0x15a>
 8002000:	4871      	ldr	r0, [pc, #452]	; (80021c8 <HAL_ADC_Init+0x2fc>)
 8002002:	f7ff ff29 	bl	8001e58 <LL_ADC_IsEnabled>
 8002006:	4604      	mov	r4, r0
 8002008:	4870      	ldr	r0, [pc, #448]	; (80021cc <HAL_ADC_Init+0x300>)
 800200a:	f7ff ff25 	bl	8001e58 <LL_ADC_IsEnabled>
 800200e:	4603      	mov	r3, r0
 8002010:	431c      	orrs	r4, r3
 8002012:	486f      	ldr	r0, [pc, #444]	; (80021d0 <HAL_ADC_Init+0x304>)
 8002014:	f7ff ff20 	bl	8001e58 <LL_ADC_IsEnabled>
 8002018:	4603      	mov	r3, r0
 800201a:	4323      	orrs	r3, r4
 800201c:	2b00      	cmp	r3, #0
 800201e:	bf0c      	ite	eq
 8002020:	2301      	moveq	r3, #1
 8002022:	2300      	movne	r3, #0
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d012      	beq.n	8002050 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002032:	d004      	beq.n	800203e <HAL_ADC_Init+0x172>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a62      	ldr	r2, [pc, #392]	; (80021c4 <HAL_ADC_Init+0x2f8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d101      	bne.n	8002042 <HAL_ADC_Init+0x176>
 800203e:	4a65      	ldr	r2, [pc, #404]	; (80021d4 <HAL_ADC_Init+0x308>)
 8002040:	e000      	b.n	8002044 <HAL_ADC_Init+0x178>
 8002042:	4a65      	ldr	r2, [pc, #404]	; (80021d8 <HAL_ADC_Init+0x30c>)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	4619      	mov	r1, r3
 800204a:	4610      	mov	r0, r2
 800204c:	f7ff fd64 	bl	8001b18 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	7f5b      	ldrb	r3, [r3, #29]
 8002054:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800205a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002060:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002066:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800206e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800207a:	2b01      	cmp	r3, #1
 800207c:	d106      	bne.n	800208c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002082:	3b01      	subs	r3, #1
 8002084:	045b      	lsls	r3, r3, #17
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4313      	orrs	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002090:	2b00      	cmp	r3, #0
 8002092:	d009      	beq.n	80020a8 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002098:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	4b4b      	ldr	r3, [pc, #300]	; (80021dc <HAL_ADC_Init+0x310>)
 80020b0:	4013      	ands	r3, r2
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6812      	ldr	r2, [r2, #0]
 80020b6:	69b9      	ldr	r1, [r7, #24]
 80020b8:	430b      	orrs	r3, r1
 80020ba:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff fed1 	bl	8001e7e <LL_ADC_REG_IsConversionOngoing>
 80020dc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fede 	bl	8001ea4 <LL_ADC_INJ_IsConversionOngoing>
 80020e8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d17f      	bne.n	80021f0 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d17c      	bne.n	80021f0 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020fa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002102:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002112:	f023 0302 	bic.w	r3, r3, #2
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6812      	ldr	r2, [r2, #0]
 800211a:	69b9      	ldr	r1, [r7, #24]
 800211c:	430b      	orrs	r3, r1
 800211e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d017      	beq.n	8002158 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691a      	ldr	r2, [r3, #16]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002136:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002140:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002144:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6911      	ldr	r1, [r2, #16]
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6812      	ldr	r2, [r2, #0]
 8002150:	430b      	orrs	r3, r1
 8002152:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002156:	e013      	b.n	8002180 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	691a      	ldr	r2, [r3, #16]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002166:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002178:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800217c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002186:	2b01      	cmp	r3, #1
 8002188:	d12a      	bne.n	80021e0 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002194:	f023 0304 	bic.w	r3, r3, #4
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80021a0:	4311      	orrs	r1, r2
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80021a6:	4311      	orrs	r1, r2
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80021ac:	430a      	orrs	r2, r1
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f042 0201 	orr.w	r2, r2, #1
 80021b8:	611a      	str	r2, [r3, #16]
 80021ba:	e019      	b.n	80021f0 <HAL_ADC_Init+0x324>
 80021bc:	20000000 	.word	0x20000000
 80021c0:	053e2d63 	.word	0x053e2d63
 80021c4:	50000100 	.word	0x50000100
 80021c8:	50000400 	.word	0x50000400
 80021cc:	50000500 	.word	0x50000500
 80021d0:	50000600 	.word	0x50000600
 80021d4:	50000300 	.word	0x50000300
 80021d8:	50000700 	.word	0x50000700
 80021dc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691a      	ldr	r2, [r3, #16]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0201 	bic.w	r2, r2, #1
 80021ee:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d10c      	bne.n	8002212 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	f023 010f 	bic.w	r1, r3, #15
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	1e5a      	subs	r2, r3, #1
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	631a      	str	r2, [r3, #48]	; 0x30
 8002210:	e007      	b.n	8002222 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 020f 	bic.w	r2, r2, #15
 8002220:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002226:	f023 0303 	bic.w	r3, r3, #3
 800222a:	f043 0201 	orr.w	r2, r3, #1
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	65da      	str	r2, [r3, #92]	; 0x5c
 8002232:	e007      	b.n	8002244 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002238:	f043 0210 	orr.w	r2, r3, #16
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002244:	7ffb      	ldrb	r3, [r7, #31]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3724      	adds	r7, #36	; 0x24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd90      	pop	{r4, r7, pc}
 800224e:	bf00      	nop

08002250 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b0b6      	sub	sp, #216	; 0xd8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800226a:	2b01      	cmp	r3, #1
 800226c:	d102      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x24>
 800226e:	2302      	movs	r3, #2
 8002270:	f000 bc13 	b.w	8002a9a <HAL_ADC_ConfigChannel+0x84a>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff fdfc 	bl	8001e7e <LL_ADC_REG_IsConversionOngoing>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	f040 83f3 	bne.w	8002a74 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	6859      	ldr	r1, [r3, #4]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	f7ff fd0e 	bl	8001cbc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff fdea 	bl	8001e7e <LL_ADC_REG_IsConversionOngoing>
 80022aa:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff fdf6 	bl	8001ea4 <LL_ADC_INJ_IsConversionOngoing>
 80022b8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f040 81d9 	bne.w	8002678 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f040 81d4 	bne.w	8002678 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022d8:	d10f      	bne.n	80022fa <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6818      	ldr	r0, [r3, #0]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2200      	movs	r2, #0
 80022e4:	4619      	mov	r1, r3
 80022e6:	f7ff fd15 	bl	8001d14 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff fccf 	bl	8001c96 <LL_ADC_SetSamplingTimeCommonConfig>
 80022f8:	e00e      	b.n	8002318 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6818      	ldr	r0, [r3, #0]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	6819      	ldr	r1, [r3, #0]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	461a      	mov	r2, r3
 8002308:	f7ff fd04 	bl	8001d14 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2100      	movs	r1, #0
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff fcbf 	bl	8001c96 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	695a      	ldr	r2, [r3, #20]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	08db      	lsrs	r3, r3, #3
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	2b04      	cmp	r3, #4
 8002338:	d022      	beq.n	8002380 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	6919      	ldr	r1, [r3, #16]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800234a:	f7ff fc19 	bl	8001b80 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	6919      	ldr	r1, [r3, #16]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	461a      	mov	r2, r3
 800235c:	f7ff fc65 	bl	8001c2a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6818      	ldr	r0, [r3, #0]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	6919      	ldr	r1, [r3, #16]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	7f1b      	ldrb	r3, [r3, #28]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d102      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x126>
 8002370:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002374:	e000      	b.n	8002378 <HAL_ADC_ConfigChannel+0x128>
 8002376:	2300      	movs	r3, #0
 8002378:	461a      	mov	r2, r3
 800237a:	f7ff fc71 	bl	8001c60 <LL_ADC_SetOffsetSaturation>
 800237e:	e17b      	b.n	8002678 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2100      	movs	r1, #0
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff fc1e 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 800238c:	4603      	mov	r3, r0
 800238e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10a      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x15c>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2100      	movs	r1, #0
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fc13 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 80023a2:	4603      	mov	r3, r0
 80023a4:	0e9b      	lsrs	r3, r3, #26
 80023a6:	f003 021f 	and.w	r2, r3, #31
 80023aa:	e01e      	b.n	80023ea <HAL_ADC_ConfigChannel+0x19a>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2100      	movs	r1, #0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff fc08 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 80023b8:	4603      	mov	r3, r0
 80023ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80023c2:	fa93 f3a3 	rbit	r3, r3
 80023c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80023ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80023da:	2320      	movs	r3, #32
 80023dc:	e004      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80023de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023e2:	fab3 f383 	clz	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d105      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x1b2>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	0e9b      	lsrs	r3, r3, #26
 80023fc:	f003 031f 	and.w	r3, r3, #31
 8002400:	e018      	b.n	8002434 <HAL_ADC_ConfigChannel+0x1e4>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800240e:	fa93 f3a3 	rbit	r3, r3
 8002412:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002416:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800241a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800241e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002426:	2320      	movs	r3, #32
 8002428:	e004      	b.n	8002434 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800242a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800242e:	fab3 f383 	clz	r3, r3
 8002432:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002434:	429a      	cmp	r2, r3
 8002436:	d106      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2200      	movs	r2, #0
 800243e:	2100      	movs	r1, #0
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff fbd7 	bl	8001bf4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2101      	movs	r1, #1
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff fbbb 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 8002452:	4603      	mov	r3, r0
 8002454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10a      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x222>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2101      	movs	r1, #1
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff fbb0 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 8002468:	4603      	mov	r3, r0
 800246a:	0e9b      	lsrs	r3, r3, #26
 800246c:	f003 021f 	and.w	r2, r3, #31
 8002470:	e01e      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x260>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2101      	movs	r1, #1
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff fba5 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 800247e:	4603      	mov	r3, r0
 8002480:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002488:	fa93 f3a3 	rbit	r3, r3
 800248c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002490:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002494:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002498:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80024a0:	2320      	movs	r3, #32
 80024a2:	e004      	b.n	80024ae <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80024a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024a8:	fab3 f383 	clz	r3, r3
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d105      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x278>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	0e9b      	lsrs	r3, r3, #26
 80024c2:	f003 031f 	and.w	r3, r3, #31
 80024c6:	e018      	b.n	80024fa <HAL_ADC_ConfigChannel+0x2aa>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024d4:	fa93 f3a3 	rbit	r3, r3
 80024d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80024dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80024e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80024ec:	2320      	movs	r3, #32
 80024ee:	e004      	b.n	80024fa <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80024f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024f4:	fab3 f383 	clz	r3, r3
 80024f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d106      	bne.n	800250c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2200      	movs	r2, #0
 8002504:	2101      	movs	r1, #1
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff fb74 	bl	8001bf4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2102      	movs	r1, #2
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff fb58 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 8002518:	4603      	mov	r3, r0
 800251a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10a      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x2e8>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2102      	movs	r1, #2
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff fb4d 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 800252e:	4603      	mov	r3, r0
 8002530:	0e9b      	lsrs	r3, r3, #26
 8002532:	f003 021f 	and.w	r2, r3, #31
 8002536:	e01e      	b.n	8002576 <HAL_ADC_ConfigChannel+0x326>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2102      	movs	r1, #2
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fb42 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 8002544:	4603      	mov	r3, r0
 8002546:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800254e:	fa93 f3a3 	rbit	r3, r3
 8002552:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002556:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800255a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800255e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002566:	2320      	movs	r3, #32
 8002568:	e004      	b.n	8002574 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800256a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800256e:	fab3 f383 	clz	r3, r3
 8002572:	b2db      	uxtb	r3, r3
 8002574:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800257e:	2b00      	cmp	r3, #0
 8002580:	d105      	bne.n	800258e <HAL_ADC_ConfigChannel+0x33e>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	0e9b      	lsrs	r3, r3, #26
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	e016      	b.n	80025bc <HAL_ADC_ConfigChannel+0x36c>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002596:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800259a:	fa93 f3a3 	rbit	r3, r3
 800259e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80025a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80025a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80025ae:	2320      	movs	r3, #32
 80025b0:	e004      	b.n	80025bc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80025b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025b6:	fab3 f383 	clz	r3, r3
 80025ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025bc:	429a      	cmp	r2, r3
 80025be:	d106      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2200      	movs	r2, #0
 80025c6:	2102      	movs	r1, #2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff fb13 	bl	8001bf4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2103      	movs	r1, #3
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff faf7 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 80025da:	4603      	mov	r3, r0
 80025dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10a      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x3aa>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2103      	movs	r1, #3
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff faec 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 80025f0:	4603      	mov	r3, r0
 80025f2:	0e9b      	lsrs	r3, r3, #26
 80025f4:	f003 021f 	and.w	r2, r3, #31
 80025f8:	e017      	b.n	800262a <HAL_ADC_ConfigChannel+0x3da>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2103      	movs	r1, #3
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fae1 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 8002606:	4603      	mov	r3, r0
 8002608:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800260c:	fa93 f3a3 	rbit	r3, r3
 8002610:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002612:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002614:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002616:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800261c:	2320      	movs	r3, #32
 800261e:	e003      	b.n	8002628 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002620:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002622:	fab3 f383 	clz	r3, r3
 8002626:	b2db      	uxtb	r3, r3
 8002628:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002632:	2b00      	cmp	r3, #0
 8002634:	d105      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x3f2>
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	0e9b      	lsrs	r3, r3, #26
 800263c:	f003 031f 	and.w	r3, r3, #31
 8002640:	e011      	b.n	8002666 <HAL_ADC_ConfigChannel+0x416>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002648:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800264a:	fa93 f3a3 	rbit	r3, r3
 800264e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002652:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800265a:	2320      	movs	r3, #32
 800265c:	e003      	b.n	8002666 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800265e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002660:	fab3 f383 	clz	r3, r3
 8002664:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002666:	429a      	cmp	r2, r3
 8002668:	d106      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2200      	movs	r2, #0
 8002670:	2103      	movs	r1, #3
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff fabe 	bl	8001bf4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff fbeb 	bl	8001e58 <LL_ADC_IsEnabled>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	f040 813d 	bne.w	8002904 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6818      	ldr	r0, [r3, #0]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	6819      	ldr	r1, [r3, #0]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	461a      	mov	r2, r3
 8002698:	f7ff fb68 	bl	8001d6c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	4aa2      	ldr	r2, [pc, #648]	; (800292c <HAL_ADC_ConfigChannel+0x6dc>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	f040 812e 	bne.w	8002904 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10b      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x480>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	0e9b      	lsrs	r3, r3, #26
 80026be:	3301      	adds	r3, #1
 80026c0:	f003 031f 	and.w	r3, r3, #31
 80026c4:	2b09      	cmp	r3, #9
 80026c6:	bf94      	ite	ls
 80026c8:	2301      	movls	r3, #1
 80026ca:	2300      	movhi	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	e019      	b.n	8002704 <HAL_ADC_ConfigChannel+0x4b4>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026d8:	fa93 f3a3 	rbit	r3, r3
 80026dc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80026de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026e0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80026e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80026e8:	2320      	movs	r3, #32
 80026ea:	e003      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80026ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026ee:	fab3 f383 	clz	r3, r3
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	3301      	adds	r3, #1
 80026f6:	f003 031f 	and.w	r3, r3, #31
 80026fa:	2b09      	cmp	r3, #9
 80026fc:	bf94      	ite	ls
 80026fe:	2301      	movls	r3, #1
 8002700:	2300      	movhi	r3, #0
 8002702:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002704:	2b00      	cmp	r3, #0
 8002706:	d079      	beq.n	80027fc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002710:	2b00      	cmp	r3, #0
 8002712:	d107      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x4d4>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	0e9b      	lsrs	r3, r3, #26
 800271a:	3301      	adds	r3, #1
 800271c:	069b      	lsls	r3, r3, #26
 800271e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002722:	e015      	b.n	8002750 <HAL_ADC_ConfigChannel+0x500>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800272c:	fa93 f3a3 	rbit	r3, r3
 8002730:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002734:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800273c:	2320      	movs	r3, #32
 800273e:	e003      	b.n	8002748 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002740:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002742:	fab3 f383 	clz	r3, r3
 8002746:	b2db      	uxtb	r3, r3
 8002748:	3301      	adds	r3, #1
 800274a:	069b      	lsls	r3, r3, #26
 800274c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002758:	2b00      	cmp	r3, #0
 800275a:	d109      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x520>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	0e9b      	lsrs	r3, r3, #26
 8002762:	3301      	adds	r3, #1
 8002764:	f003 031f 	and.w	r3, r3, #31
 8002768:	2101      	movs	r1, #1
 800276a:	fa01 f303 	lsl.w	r3, r1, r3
 800276e:	e017      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x550>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002778:	fa93 f3a3 	rbit	r3, r3
 800277c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800277e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002780:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002788:	2320      	movs	r3, #32
 800278a:	e003      	b.n	8002794 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800278c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800278e:	fab3 f383 	clz	r3, r3
 8002792:	b2db      	uxtb	r3, r3
 8002794:	3301      	adds	r3, #1
 8002796:	f003 031f 	and.w	r3, r3, #31
 800279a:	2101      	movs	r1, #1
 800279c:	fa01 f303 	lsl.w	r3, r1, r3
 80027a0:	ea42 0103 	orr.w	r1, r2, r3
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10a      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x576>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	0e9b      	lsrs	r3, r3, #26
 80027b6:	3301      	adds	r3, #1
 80027b8:	f003 021f 	and.w	r2, r3, #31
 80027bc:	4613      	mov	r3, r2
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	4413      	add	r3, r2
 80027c2:	051b      	lsls	r3, r3, #20
 80027c4:	e018      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x5a8>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ce:	fa93 f3a3 	rbit	r3, r3
 80027d2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80027d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80027d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80027de:	2320      	movs	r3, #32
 80027e0:	e003      	b.n	80027ea <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80027e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027e4:	fab3 f383 	clz	r3, r3
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	3301      	adds	r3, #1
 80027ec:	f003 021f 	and.w	r2, r3, #31
 80027f0:	4613      	mov	r3, r2
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	4413      	add	r3, r2
 80027f6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027f8:	430b      	orrs	r3, r1
 80027fa:	e07e      	b.n	80028fa <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002804:	2b00      	cmp	r3, #0
 8002806:	d107      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x5c8>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	0e9b      	lsrs	r3, r3, #26
 800280e:	3301      	adds	r3, #1
 8002810:	069b      	lsls	r3, r3, #26
 8002812:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002816:	e015      	b.n	8002844 <HAL_ADC_ConfigChannel+0x5f4>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002820:	fa93 f3a3 	rbit	r3, r3
 8002824:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002828:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800282a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002830:	2320      	movs	r3, #32
 8002832:	e003      	b.n	800283c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002836:	fab3 f383 	clz	r3, r3
 800283a:	b2db      	uxtb	r3, r3
 800283c:	3301      	adds	r3, #1
 800283e:	069b      	lsls	r3, r3, #26
 8002840:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800284c:	2b00      	cmp	r3, #0
 800284e:	d109      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x614>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	0e9b      	lsrs	r3, r3, #26
 8002856:	3301      	adds	r3, #1
 8002858:	f003 031f 	and.w	r3, r3, #31
 800285c:	2101      	movs	r1, #1
 800285e:	fa01 f303 	lsl.w	r3, r1, r3
 8002862:	e017      	b.n	8002894 <HAL_ADC_ConfigChannel+0x644>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	fa93 f3a3 	rbit	r3, r3
 8002870:	61fb      	str	r3, [r7, #28]
  return result;
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800287c:	2320      	movs	r3, #32
 800287e:	e003      	b.n	8002888 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	fab3 f383 	clz	r3, r3
 8002886:	b2db      	uxtb	r3, r3
 8002888:	3301      	adds	r3, #1
 800288a:	f003 031f 	and.w	r3, r3, #31
 800288e:	2101      	movs	r1, #1
 8002890:	fa01 f303 	lsl.w	r3, r1, r3
 8002894:	ea42 0103 	orr.w	r1, r2, r3
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10d      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x670>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	0e9b      	lsrs	r3, r3, #26
 80028aa:	3301      	adds	r3, #1
 80028ac:	f003 021f 	and.w	r2, r3, #31
 80028b0:	4613      	mov	r3, r2
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	4413      	add	r3, r2
 80028b6:	3b1e      	subs	r3, #30
 80028b8:	051b      	lsls	r3, r3, #20
 80028ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028be:	e01b      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x6a8>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	fa93 f3a3 	rbit	r3, r3
 80028cc:	613b      	str	r3, [r7, #16]
  return result;
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80028d8:	2320      	movs	r3, #32
 80028da:	e003      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	fab3 f383 	clz	r3, r3
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	3301      	adds	r3, #1
 80028e6:	f003 021f 	and.w	r2, r3, #31
 80028ea:	4613      	mov	r3, r2
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	4413      	add	r3, r2
 80028f0:	3b1e      	subs	r3, #30
 80028f2:	051b      	lsls	r3, r3, #20
 80028f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028f8:	430b      	orrs	r3, r1
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	6892      	ldr	r2, [r2, #8]
 80028fe:	4619      	mov	r1, r3
 8002900:	f7ff fa08 	bl	8001d14 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	4b09      	ldr	r3, [pc, #36]	; (8002930 <HAL_ADC_ConfigChannel+0x6e0>)
 800290a:	4013      	ands	r3, r2
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 80be 	beq.w	8002a8e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800291a:	d004      	beq.n	8002926 <HAL_ADC_ConfigChannel+0x6d6>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a04      	ldr	r2, [pc, #16]	; (8002934 <HAL_ADC_ConfigChannel+0x6e4>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d10a      	bne.n	800293c <HAL_ADC_ConfigChannel+0x6ec>
 8002926:	4b04      	ldr	r3, [pc, #16]	; (8002938 <HAL_ADC_ConfigChannel+0x6e8>)
 8002928:	e009      	b.n	800293e <HAL_ADC_ConfigChannel+0x6ee>
 800292a:	bf00      	nop
 800292c:	407f0000 	.word	0x407f0000
 8002930:	80080000 	.word	0x80080000
 8002934:	50000100 	.word	0x50000100
 8002938:	50000300 	.word	0x50000300
 800293c:	4b59      	ldr	r3, [pc, #356]	; (8002aa4 <HAL_ADC_ConfigChannel+0x854>)
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff f910 	bl	8001b64 <LL_ADC_GetCommonPathInternalCh>
 8002944:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a56      	ldr	r2, [pc, #344]	; (8002aa8 <HAL_ADC_ConfigChannel+0x858>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d004      	beq.n	800295c <HAL_ADC_ConfigChannel+0x70c>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a55      	ldr	r2, [pc, #340]	; (8002aac <HAL_ADC_ConfigChannel+0x85c>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d13a      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800295c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002960:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d134      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002970:	d005      	beq.n	800297e <HAL_ADC_ConfigChannel+0x72e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a4e      	ldr	r2, [pc, #312]	; (8002ab0 <HAL_ADC_ConfigChannel+0x860>)
 8002978:	4293      	cmp	r3, r2
 800297a:	f040 8085 	bne.w	8002a88 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002986:	d004      	beq.n	8002992 <HAL_ADC_ConfigChannel+0x742>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a49      	ldr	r2, [pc, #292]	; (8002ab4 <HAL_ADC_ConfigChannel+0x864>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d101      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x746>
 8002992:	4a49      	ldr	r2, [pc, #292]	; (8002ab8 <HAL_ADC_ConfigChannel+0x868>)
 8002994:	e000      	b.n	8002998 <HAL_ADC_ConfigChannel+0x748>
 8002996:	4a43      	ldr	r2, [pc, #268]	; (8002aa4 <HAL_ADC_ConfigChannel+0x854>)
 8002998:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800299c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029a0:	4619      	mov	r1, r3
 80029a2:	4610      	mov	r0, r2
 80029a4:	f7ff f8cb 	bl	8001b3e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029a8:	4b44      	ldr	r3, [pc, #272]	; (8002abc <HAL_ADC_ConfigChannel+0x86c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	099b      	lsrs	r3, r3, #6
 80029ae:	4a44      	ldr	r2, [pc, #272]	; (8002ac0 <HAL_ADC_ConfigChannel+0x870>)
 80029b0:	fba2 2303 	umull	r2, r3, r2, r3
 80029b4:	099b      	lsrs	r3, r3, #6
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	4613      	mov	r3, r2
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	4413      	add	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029c2:	e002      	b.n	80029ca <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f9      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029d0:	e05a      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a3b      	ldr	r2, [pc, #236]	; (8002ac4 <HAL_ADC_ConfigChannel+0x874>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d125      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x7d8>
 80029dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d11f      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a31      	ldr	r2, [pc, #196]	; (8002ab4 <HAL_ADC_ConfigChannel+0x864>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d104      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x7ac>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a34      	ldr	r2, [pc, #208]	; (8002ac8 <HAL_ADC_ConfigChannel+0x878>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d047      	beq.n	8002a8c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a04:	d004      	beq.n	8002a10 <HAL_ADC_ConfigChannel+0x7c0>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a2a      	ldr	r2, [pc, #168]	; (8002ab4 <HAL_ADC_ConfigChannel+0x864>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d101      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x7c4>
 8002a10:	4a29      	ldr	r2, [pc, #164]	; (8002ab8 <HAL_ADC_ConfigChannel+0x868>)
 8002a12:	e000      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x7c6>
 8002a14:	4a23      	ldr	r2, [pc, #140]	; (8002aa4 <HAL_ADC_ConfigChannel+0x854>)
 8002a16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4610      	mov	r0, r2
 8002a22:	f7ff f88c 	bl	8001b3e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a26:	e031      	b.n	8002a8c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a27      	ldr	r2, [pc, #156]	; (8002acc <HAL_ADC_ConfigChannel+0x87c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d12d      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d127      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a1c      	ldr	r2, [pc, #112]	; (8002ab4 <HAL_ADC_ConfigChannel+0x864>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d022      	beq.n	8002a8e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a50:	d004      	beq.n	8002a5c <HAL_ADC_ConfigChannel+0x80c>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a17      	ldr	r2, [pc, #92]	; (8002ab4 <HAL_ADC_ConfigChannel+0x864>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d101      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x810>
 8002a5c:	4a16      	ldr	r2, [pc, #88]	; (8002ab8 <HAL_ADC_ConfigChannel+0x868>)
 8002a5e:	e000      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x812>
 8002a60:	4a10      	ldr	r2, [pc, #64]	; (8002aa4 <HAL_ADC_ConfigChannel+0x854>)
 8002a62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4610      	mov	r0, r2
 8002a6e:	f7ff f866 	bl	8001b3e <LL_ADC_SetCommonPathInternalCh>
 8002a72:	e00c      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a78:	f043 0220 	orr.w	r2, r3, #32
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002a86:	e002      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a88:	bf00      	nop
 8002a8a:	e000      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a8c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a96:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	37d8      	adds	r7, #216	; 0xd8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	50000700 	.word	0x50000700
 8002aa8:	c3210000 	.word	0xc3210000
 8002aac:	90c00010 	.word	0x90c00010
 8002ab0:	50000600 	.word	0x50000600
 8002ab4:	50000100 	.word	0x50000100
 8002ab8:	50000300 	.word	0x50000300
 8002abc:	20000000 	.word	0x20000000
 8002ac0:	053e2d63 	.word	0x053e2d63
 8002ac4:	c7520000 	.word	0xc7520000
 8002ac8:	50000500 	.word	0x50000500
 8002acc:	cb840000 	.word	0xcb840000

08002ad0 <LL_ADC_IsEnabled>:
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <LL_ADC_IsEnabled+0x18>
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e000      	b.n	8002aea <LL_ADC_IsEnabled+0x1a>
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <LL_ADC_REG_IsConversionOngoing>:
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d101      	bne.n	8002b0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002b1c:	b590      	push	{r4, r7, lr}
 8002b1e:	b0a1      	sub	sp, #132	; 0x84
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b26:	2300      	movs	r3, #0
 8002b28:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d101      	bne.n	8002b3a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b36:	2302      	movs	r3, #2
 8002b38:	e0e7      	b.n	8002d0a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002b42:	2300      	movs	r3, #0
 8002b44:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002b46:	2300      	movs	r3, #0
 8002b48:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b52:	d102      	bne.n	8002b5a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002b54:	4b6f      	ldr	r3, [pc, #444]	; (8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b56:	60bb      	str	r3, [r7, #8]
 8002b58:	e009      	b.n	8002b6e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a6e      	ldr	r2, [pc, #440]	; (8002d18 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d102      	bne.n	8002b6a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002b64:	4b6d      	ldr	r3, [pc, #436]	; (8002d1c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002b66:	60bb      	str	r3, [r7, #8]
 8002b68:	e001      	b.n	8002b6e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10b      	bne.n	8002b8c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b78:	f043 0220 	orr.w	r2, r3, #32
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0be      	b.n	8002d0a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff ffb1 	bl	8002af6 <LL_ADC_REG_IsConversionOngoing>
 8002b94:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff ffab 	bl	8002af6 <LL_ADC_REG_IsConversionOngoing>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f040 80a0 	bne.w	8002ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002ba8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f040 809c 	bne.w	8002ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bb8:	d004      	beq.n	8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a55      	ldr	r2, [pc, #340]	; (8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d101      	bne.n	8002bc8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002bc4:	4b56      	ldr	r3, [pc, #344]	; (8002d20 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002bc6:	e000      	b.n	8002bca <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002bc8:	4b56      	ldr	r3, [pc, #344]	; (8002d24 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002bca:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d04b      	beq.n	8002c6c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002bd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	6859      	ldr	r1, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002be6:	035b      	lsls	r3, r3, #13
 8002be8:	430b      	orrs	r3, r1
 8002bea:	431a      	orrs	r2, r3
 8002bec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bf8:	d004      	beq.n	8002c04 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a45      	ldr	r2, [pc, #276]	; (8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d10f      	bne.n	8002c24 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002c04:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c08:	f7ff ff62 	bl	8002ad0 <LL_ADC_IsEnabled>
 8002c0c:	4604      	mov	r4, r0
 8002c0e:	4841      	ldr	r0, [pc, #260]	; (8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c10:	f7ff ff5e 	bl	8002ad0 <LL_ADC_IsEnabled>
 8002c14:	4603      	mov	r3, r0
 8002c16:	4323      	orrs	r3, r4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	bf0c      	ite	eq
 8002c1c:	2301      	moveq	r3, #1
 8002c1e:	2300      	movne	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	e012      	b.n	8002c4a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002c24:	483c      	ldr	r0, [pc, #240]	; (8002d18 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002c26:	f7ff ff53 	bl	8002ad0 <LL_ADC_IsEnabled>
 8002c2a:	4604      	mov	r4, r0
 8002c2c:	483b      	ldr	r0, [pc, #236]	; (8002d1c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002c2e:	f7ff ff4f 	bl	8002ad0 <LL_ADC_IsEnabled>
 8002c32:	4603      	mov	r3, r0
 8002c34:	431c      	orrs	r4, r3
 8002c36:	483c      	ldr	r0, [pc, #240]	; (8002d28 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002c38:	f7ff ff4a 	bl	8002ad0 <LL_ADC_IsEnabled>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	4323      	orrs	r3, r4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	bf0c      	ite	eq
 8002c44:	2301      	moveq	r3, #1
 8002c46:	2300      	movne	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d056      	beq.n	8002cfc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c56:	f023 030f 	bic.w	r3, r3, #15
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	6811      	ldr	r1, [r2, #0]
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	6892      	ldr	r2, [r2, #8]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	431a      	orrs	r2, r3
 8002c66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c68:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c6a:	e047      	b.n	8002cfc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c76:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c80:	d004      	beq.n	8002c8c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a23      	ldr	r2, [pc, #140]	; (8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d10f      	bne.n	8002cac <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002c8c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c90:	f7ff ff1e 	bl	8002ad0 <LL_ADC_IsEnabled>
 8002c94:	4604      	mov	r4, r0
 8002c96:	481f      	ldr	r0, [pc, #124]	; (8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c98:	f7ff ff1a 	bl	8002ad0 <LL_ADC_IsEnabled>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4323      	orrs	r3, r4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	bf0c      	ite	eq
 8002ca4:	2301      	moveq	r3, #1
 8002ca6:	2300      	movne	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	e012      	b.n	8002cd2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002cac:	481a      	ldr	r0, [pc, #104]	; (8002d18 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002cae:	f7ff ff0f 	bl	8002ad0 <LL_ADC_IsEnabled>
 8002cb2:	4604      	mov	r4, r0
 8002cb4:	4819      	ldr	r0, [pc, #100]	; (8002d1c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002cb6:	f7ff ff0b 	bl	8002ad0 <LL_ADC_IsEnabled>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	431c      	orrs	r4, r3
 8002cbe:	481a      	ldr	r0, [pc, #104]	; (8002d28 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002cc0:	f7ff ff06 	bl	8002ad0 <LL_ADC_IsEnabled>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	4323      	orrs	r3, r4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	bf0c      	ite	eq
 8002ccc:	2301      	moveq	r3, #1
 8002cce:	2300      	movne	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d012      	beq.n	8002cfc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002cd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002cde:	f023 030f 	bic.w	r3, r3, #15
 8002ce2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002ce4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ce6:	e009      	b.n	8002cfc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cec:	f043 0220 	orr.w	r2, r3, #32
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002cfa:	e000      	b.n	8002cfe <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cfc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d06:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3784      	adds	r7, #132	; 0x84
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd90      	pop	{r4, r7, pc}
 8002d12:	bf00      	nop
 8002d14:	50000100 	.word	0x50000100
 8002d18:	50000400 	.word	0x50000400
 8002d1c:	50000500 	.word	0x50000500
 8002d20:	50000300 	.word	0x50000300
 8002d24:	50000700 	.word	0x50000700
 8002d28:	50000600 	.word	0x50000600

08002d2c <__NVIC_SetPriorityGrouping>:
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d3c:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <__NVIC_SetPriorityGrouping+0x44>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d48:	4013      	ands	r3, r2
 8002d4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d5e:	4a04      	ldr	r2, [pc, #16]	; (8002d70 <__NVIC_SetPriorityGrouping+0x44>)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	60d3      	str	r3, [r2, #12]
}
 8002d64:	bf00      	nop
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	e000ed00 	.word	0xe000ed00

08002d74 <__NVIC_GetPriorityGrouping>:
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d78:	4b04      	ldr	r3, [pc, #16]	; (8002d8c <__NVIC_GetPriorityGrouping+0x18>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	0a1b      	lsrs	r3, r3, #8
 8002d7e:	f003 0307 	and.w	r3, r3, #7
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <__NVIC_EnableIRQ>:
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	db0b      	blt.n	8002dba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002da2:	79fb      	ldrb	r3, [r7, #7]
 8002da4:	f003 021f 	and.w	r2, r3, #31
 8002da8:	4907      	ldr	r1, [pc, #28]	; (8002dc8 <__NVIC_EnableIRQ+0x38>)
 8002daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dae:	095b      	lsrs	r3, r3, #5
 8002db0:	2001      	movs	r0, #1
 8002db2:	fa00 f202 	lsl.w	r2, r0, r2
 8002db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	e000e100 	.word	0xe000e100

08002dcc <__NVIC_SetPriority>:
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	6039      	str	r1, [r7, #0]
 8002dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	db0a      	blt.n	8002df6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	490c      	ldr	r1, [pc, #48]	; (8002e18 <__NVIC_SetPriority+0x4c>)
 8002de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dea:	0112      	lsls	r2, r2, #4
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	440b      	add	r3, r1
 8002df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002df4:	e00a      	b.n	8002e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	4908      	ldr	r1, [pc, #32]	; (8002e1c <__NVIC_SetPriority+0x50>)
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	3b04      	subs	r3, #4
 8002e04:	0112      	lsls	r2, r2, #4
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	440b      	add	r3, r1
 8002e0a:	761a      	strb	r2, [r3, #24]
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	e000e100 	.word	0xe000e100
 8002e1c:	e000ed00 	.word	0xe000ed00

08002e20 <NVIC_EncodePriority>:
{
 8002e20:	b480      	push	{r7}
 8002e22:	b089      	sub	sp, #36	; 0x24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f1c3 0307 	rsb	r3, r3, #7
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	bf28      	it	cs
 8002e3e:	2304      	movcs	r3, #4
 8002e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	3304      	adds	r3, #4
 8002e46:	2b06      	cmp	r3, #6
 8002e48:	d902      	bls.n	8002e50 <NVIC_EncodePriority+0x30>
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	3b03      	subs	r3, #3
 8002e4e:	e000      	b.n	8002e52 <NVIC_EncodePriority+0x32>
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e54:	f04f 32ff 	mov.w	r2, #4294967295
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43da      	mvns	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	401a      	ands	r2, r3
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e68:	f04f 31ff 	mov.w	r1, #4294967295
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e72:	43d9      	mvns	r1, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e78:	4313      	orrs	r3, r2
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3724      	adds	r7, #36	; 0x24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b082      	sub	sp, #8
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7ff ff4c 	bl	8002d2c <__NVIC_SetPriorityGrouping>
}
 8002e94:	bf00      	nop
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
 8002ea8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002eaa:	f7ff ff63 	bl	8002d74 <__NVIC_GetPriorityGrouping>
 8002eae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	68b9      	ldr	r1, [r7, #8]
 8002eb4:	6978      	ldr	r0, [r7, #20]
 8002eb6:	f7ff ffb3 	bl	8002e20 <NVIC_EncodePriority>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff ff82 	bl	8002dcc <__NVIC_SetPriority>
}
 8002ec8:	bf00      	nop
 8002eca:	3718      	adds	r7, #24
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff ff56 	bl	8002d90 <__NVIC_EnableIRQ>
}
 8002ee4:	bf00      	nop
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e08d      	b.n	800301a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	461a      	mov	r2, r3
 8002f04:	4b47      	ldr	r3, [pc, #284]	; (8003024 <HAL_DMA_Init+0x138>)
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d80f      	bhi.n	8002f2a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	4b45      	ldr	r3, [pc, #276]	; (8003028 <HAL_DMA_Init+0x13c>)
 8002f12:	4413      	add	r3, r2
 8002f14:	4a45      	ldr	r2, [pc, #276]	; (800302c <HAL_DMA_Init+0x140>)
 8002f16:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1a:	091b      	lsrs	r3, r3, #4
 8002f1c:	009a      	lsls	r2, r3, #2
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a42      	ldr	r2, [pc, #264]	; (8003030 <HAL_DMA_Init+0x144>)
 8002f26:	641a      	str	r2, [r3, #64]	; 0x40
 8002f28:	e00e      	b.n	8002f48 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	4b40      	ldr	r3, [pc, #256]	; (8003034 <HAL_DMA_Init+0x148>)
 8002f32:	4413      	add	r3, r2
 8002f34:	4a3d      	ldr	r2, [pc, #244]	; (800302c <HAL_DMA_Init+0x140>)
 8002f36:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3a:	091b      	lsrs	r3, r3, #4
 8002f3c:	009a      	lsls	r2, r3, #2
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a3c      	ldr	r2, [pc, #240]	; (8003038 <HAL_DMA_Init+0x14c>)
 8002f46:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f62:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f8fe 	bl	800319c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fa8:	d102      	bne.n	8002fb0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002fc4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d010      	beq.n	8002ff0 <HAL_DMA_Init+0x104>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d80c      	bhi.n	8002ff0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f91e 	bl	8003218 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	e008      	b.n	8003002 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40020407 	.word	0x40020407
 8003028:	bffdfff8 	.word	0xbffdfff8
 800302c:	cccccccd 	.word	0xcccccccd
 8003030:	40020000 	.word	0x40020000
 8003034:	bffdfbf8 	.word	0xbffdfbf8
 8003038:	40020400 	.word	0x40020400

0800303c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003058:	f003 031f 	and.w	r3, r3, #31
 800305c:	2204      	movs	r2, #4
 800305e:	409a      	lsls	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4013      	ands	r3, r2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d026      	beq.n	80030b6 <HAL_DMA_IRQHandler+0x7a>
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b00      	cmp	r3, #0
 8003070:	d021      	beq.n	80030b6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0320 	and.w	r3, r3, #32
 800307c:	2b00      	cmp	r3, #0
 800307e:	d107      	bne.n	8003090 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 0204 	bic.w	r2, r2, #4
 800308e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003094:	f003 021f 	and.w	r2, r3, #31
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	2104      	movs	r1, #4
 800309e:	fa01 f202 	lsl.w	r2, r1, r2
 80030a2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d071      	beq.n	8003190 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80030b4:	e06c      	b.n	8003190 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ba:	f003 031f 	and.w	r3, r3, #31
 80030be:	2202      	movs	r2, #2
 80030c0:	409a      	lsls	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4013      	ands	r3, r2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d02e      	beq.n	8003128 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d029      	beq.n	8003128 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0320 	and.w	r3, r3, #32
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10b      	bne.n	80030fa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 020a 	bic.w	r2, r2, #10
 80030f0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fe:	f003 021f 	and.w	r2, r3, #31
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	2102      	movs	r1, #2
 8003108:	fa01 f202 	lsl.w	r2, r1, r2
 800310c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311a:	2b00      	cmp	r3, #0
 800311c:	d038      	beq.n	8003190 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003126:	e033      	b.n	8003190 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312c:	f003 031f 	and.w	r3, r3, #31
 8003130:	2208      	movs	r2, #8
 8003132:	409a      	lsls	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4013      	ands	r3, r2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d02a      	beq.n	8003192 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d025      	beq.n	8003192 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 020e 	bic.w	r2, r2, #14
 8003154:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315a:	f003 021f 	and.w	r2, r3, #31
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	2101      	movs	r1, #1
 8003164:	fa01 f202 	lsl.w	r2, r1, r2
 8003168:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003184:	2b00      	cmp	r3, #0
 8003186:	d004      	beq.n	8003192 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003190:	bf00      	nop
 8003192:	bf00      	nop
}
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800319c:	b480      	push	{r7}
 800319e:	b087      	sub	sp, #28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	461a      	mov	r2, r3
 80031aa:	4b16      	ldr	r3, [pc, #88]	; (8003204 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d802      	bhi.n	80031b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80031b0:	4b15      	ldr	r3, [pc, #84]	; (8003208 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	e001      	b.n	80031ba <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80031b6:	4b15      	ldr	r3, [pc, #84]	; (800320c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80031b8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	3b08      	subs	r3, #8
 80031c6:	4a12      	ldr	r2, [pc, #72]	; (8003210 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80031c8:	fba2 2303 	umull	r2, r3, r2, r3
 80031cc:	091b      	lsrs	r3, r3, #4
 80031ce:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d4:	089b      	lsrs	r3, r3, #2
 80031d6:	009a      	lsls	r2, r3, #2
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4413      	add	r3, r2
 80031dc:	461a      	mov	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a0b      	ldr	r2, [pc, #44]	; (8003214 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80031e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f003 031f 	and.w	r3, r3, #31
 80031ee:	2201      	movs	r2, #1
 80031f0:	409a      	lsls	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80031f6:	bf00      	nop
 80031f8:	371c      	adds	r7, #28
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	40020407 	.word	0x40020407
 8003208:	40020800 	.word	0x40020800
 800320c:	40020820 	.word	0x40020820
 8003210:	cccccccd 	.word	0xcccccccd
 8003214:	40020880 	.word	0x40020880

08003218 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	b2db      	uxtb	r3, r3
 8003226:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	461a      	mov	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a08      	ldr	r2, [pc, #32]	; (800325c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800323a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	3b01      	subs	r3, #1
 8003240:	f003 031f 	and.w	r3, r3, #31
 8003244:	2201      	movs	r2, #1
 8003246:	409a      	lsls	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800324c:	bf00      	nop
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	1000823f 	.word	0x1000823f
 800325c:	40020940 	.word	0x40020940

08003260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003260:	b480      	push	{r7}
 8003262:	b087      	sub	sp, #28
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800326e:	e15a      	b.n	8003526 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	2101      	movs	r1, #1
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	fa01 f303 	lsl.w	r3, r1, r3
 800327c:	4013      	ands	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 814c 	beq.w	8003520 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 0303 	and.w	r3, r3, #3
 8003290:	2b01      	cmp	r3, #1
 8003292:	d005      	beq.n	80032a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800329c:	2b02      	cmp	r3, #2
 800329e:	d130      	bne.n	8003302 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	2203      	movs	r2, #3
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	43db      	mvns	r3, r3
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	4013      	ands	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032d6:	2201      	movs	r2, #1
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43db      	mvns	r3, r3
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	4013      	ands	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	091b      	lsrs	r3, r3, #4
 80032ec:	f003 0201 	and.w	r2, r3, #1
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	2b03      	cmp	r3, #3
 800330c:	d017      	beq.n	800333e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	2203      	movs	r2, #3
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	4013      	ands	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	4313      	orrs	r3, r2
 8003336:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d123      	bne.n	8003392 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	08da      	lsrs	r2, r3, #3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3208      	adds	r2, #8
 8003352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003356:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	220f      	movs	r2, #15
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43db      	mvns	r3, r3
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	4013      	ands	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	691a      	ldr	r2, [r3, #16]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	4313      	orrs	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	08da      	lsrs	r2, r3, #3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3208      	adds	r2, #8
 800338c:	6939      	ldr	r1, [r7, #16]
 800338e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	2203      	movs	r2, #3
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	4013      	ands	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f003 0203 	and.w	r2, r3, #3
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4313      	orrs	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 80a6 	beq.w	8003520 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033d4:	4b5b      	ldr	r3, [pc, #364]	; (8003544 <HAL_GPIO_Init+0x2e4>)
 80033d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d8:	4a5a      	ldr	r2, [pc, #360]	; (8003544 <HAL_GPIO_Init+0x2e4>)
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	6613      	str	r3, [r2, #96]	; 0x60
 80033e0:	4b58      	ldr	r3, [pc, #352]	; (8003544 <HAL_GPIO_Init+0x2e4>)
 80033e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	60bb      	str	r3, [r7, #8]
 80033ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033ec:	4a56      	ldr	r2, [pc, #344]	; (8003548 <HAL_GPIO_Init+0x2e8>)
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	089b      	lsrs	r3, r3, #2
 80033f2:	3302      	adds	r3, #2
 80033f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f003 0303 	and.w	r3, r3, #3
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	220f      	movs	r2, #15
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	43db      	mvns	r3, r3
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4013      	ands	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003416:	d01f      	beq.n	8003458 <HAL_GPIO_Init+0x1f8>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a4c      	ldr	r2, [pc, #304]	; (800354c <HAL_GPIO_Init+0x2ec>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d019      	beq.n	8003454 <HAL_GPIO_Init+0x1f4>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a4b      	ldr	r2, [pc, #300]	; (8003550 <HAL_GPIO_Init+0x2f0>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d013      	beq.n	8003450 <HAL_GPIO_Init+0x1f0>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a4a      	ldr	r2, [pc, #296]	; (8003554 <HAL_GPIO_Init+0x2f4>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d00d      	beq.n	800344c <HAL_GPIO_Init+0x1ec>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a49      	ldr	r2, [pc, #292]	; (8003558 <HAL_GPIO_Init+0x2f8>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d007      	beq.n	8003448 <HAL_GPIO_Init+0x1e8>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a48      	ldr	r2, [pc, #288]	; (800355c <HAL_GPIO_Init+0x2fc>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d101      	bne.n	8003444 <HAL_GPIO_Init+0x1e4>
 8003440:	2305      	movs	r3, #5
 8003442:	e00a      	b.n	800345a <HAL_GPIO_Init+0x1fa>
 8003444:	2306      	movs	r3, #6
 8003446:	e008      	b.n	800345a <HAL_GPIO_Init+0x1fa>
 8003448:	2304      	movs	r3, #4
 800344a:	e006      	b.n	800345a <HAL_GPIO_Init+0x1fa>
 800344c:	2303      	movs	r3, #3
 800344e:	e004      	b.n	800345a <HAL_GPIO_Init+0x1fa>
 8003450:	2302      	movs	r3, #2
 8003452:	e002      	b.n	800345a <HAL_GPIO_Init+0x1fa>
 8003454:	2301      	movs	r3, #1
 8003456:	e000      	b.n	800345a <HAL_GPIO_Init+0x1fa>
 8003458:	2300      	movs	r3, #0
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	f002 0203 	and.w	r2, r2, #3
 8003460:	0092      	lsls	r2, r2, #2
 8003462:	4093      	lsls	r3, r2
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4313      	orrs	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800346a:	4937      	ldr	r1, [pc, #220]	; (8003548 <HAL_GPIO_Init+0x2e8>)
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	089b      	lsrs	r3, r3, #2
 8003470:	3302      	adds	r3, #2
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003478:	4b39      	ldr	r3, [pc, #228]	; (8003560 <HAL_GPIO_Init+0x300>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	43db      	mvns	r3, r3
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	4013      	ands	r3, r2
 8003486:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	4313      	orrs	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800349c:	4a30      	ldr	r2, [pc, #192]	; (8003560 <HAL_GPIO_Init+0x300>)
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034a2:	4b2f      	ldr	r3, [pc, #188]	; (8003560 <HAL_GPIO_Init+0x300>)
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	43db      	mvns	r3, r3
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	4013      	ands	r3, r2
 80034b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034c6:	4a26      	ldr	r2, [pc, #152]	; (8003560 <HAL_GPIO_Init+0x300>)
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80034cc:	4b24      	ldr	r3, [pc, #144]	; (8003560 <HAL_GPIO_Init+0x300>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	43db      	mvns	r3, r3
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	4013      	ands	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034f0:	4a1b      	ldr	r2, [pc, #108]	; (8003560 <HAL_GPIO_Init+0x300>)
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80034f6:	4b1a      	ldr	r3, [pc, #104]	; (8003560 <HAL_GPIO_Init+0x300>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	43db      	mvns	r3, r3
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4013      	ands	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4313      	orrs	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800351a:	4a11      	ldr	r2, [pc, #68]	; (8003560 <HAL_GPIO_Init+0x300>)
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	3301      	adds	r3, #1
 8003524:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	fa22 f303 	lsr.w	r3, r2, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	f47f ae9d 	bne.w	8003270 <HAL_GPIO_Init+0x10>
  }
}
 8003536:	bf00      	nop
 8003538:	bf00      	nop
 800353a:	371c      	adds	r7, #28
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	40021000 	.word	0x40021000
 8003548:	40010000 	.word	0x40010000
 800354c:	48000400 	.word	0x48000400
 8003550:	48000800 	.word	0x48000800
 8003554:	48000c00 	.word	0x48000c00
 8003558:	48001000 	.word	0x48001000
 800355c:	48001400 	.word	0x48001400
 8003560:	40010400 	.word	0x40010400

08003564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	807b      	strh	r3, [r7, #2]
 8003570:	4613      	mov	r3, r2
 8003572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003574:	787b      	ldrb	r3, [r7, #1]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800357a:	887a      	ldrh	r2, [r7, #2]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003580:	e002      	b.n	8003588 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003582:	887a      	ldrh	r2, [r7, #2]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035a6:	887a      	ldrh	r2, [r7, #2]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4013      	ands	r3, r2
 80035ac:	041a      	lsls	r2, r3, #16
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	43d9      	mvns	r1, r3
 80035b2:	887b      	ldrh	r3, [r7, #2]
 80035b4:	400b      	ands	r3, r1
 80035b6:	431a      	orrs	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	619a      	str	r2, [r3, #24]
}
 80035bc:	bf00      	nop
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035d2:	4b08      	ldr	r3, [pc, #32]	; (80035f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035d4:	695a      	ldr	r2, [r3, #20]
 80035d6:	88fb      	ldrh	r3, [r7, #6]
 80035d8:	4013      	ands	r3, r2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d006      	beq.n	80035ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035de:	4a05      	ldr	r2, [pc, #20]	; (80035f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035e0:	88fb      	ldrh	r3, [r7, #6]
 80035e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035e4:	88fb      	ldrh	r3, [r7, #6]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 f806 	bl	80035f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80035ec:	bf00      	nop
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40010400 	.word	0x40010400

080035f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
	...

08003610 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003614:	4b05      	ldr	r3, [pc, #20]	; (800362c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a04      	ldr	r2, [pc, #16]	; (800362c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800361a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800361e:	6013      	str	r3, [r2, #0]
}
 8003620:	bf00      	nop
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40007000 	.word	0x40007000

08003630 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d141      	bne.n	80036c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800363e:	4b4b      	ldr	r3, [pc, #300]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800364a:	d131      	bne.n	80036b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800364c:	4b47      	ldr	r3, [pc, #284]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800364e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003652:	4a46      	ldr	r2, [pc, #280]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003658:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800365c:	4b43      	ldr	r3, [pc, #268]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003664:	4a41      	ldr	r2, [pc, #260]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003666:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800366a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800366c:	4b40      	ldr	r3, [pc, #256]	; (8003770 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2232      	movs	r2, #50	; 0x32
 8003672:	fb02 f303 	mul.w	r3, r2, r3
 8003676:	4a3f      	ldr	r2, [pc, #252]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003678:	fba2 2303 	umull	r2, r3, r2, r3
 800367c:	0c9b      	lsrs	r3, r3, #18
 800367e:	3301      	adds	r3, #1
 8003680:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003682:	e002      	b.n	800368a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	3b01      	subs	r3, #1
 8003688:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800368a:	4b38      	ldr	r3, [pc, #224]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003696:	d102      	bne.n	800369e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f2      	bne.n	8003684 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800369e:	4b33      	ldr	r3, [pc, #204]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036aa:	d158      	bne.n	800375e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e057      	b.n	8003760 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036b0:	4b2e      	ldr	r3, [pc, #184]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036b6:	4a2d      	ldr	r2, [pc, #180]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80036c0:	e04d      	b.n	800375e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036c8:	d141      	bne.n	800374e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036ca:	4b28      	ldr	r3, [pc, #160]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d6:	d131      	bne.n	800373c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036d8:	4b24      	ldr	r3, [pc, #144]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036de:	4a23      	ldr	r2, [pc, #140]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036e8:	4b20      	ldr	r3, [pc, #128]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036f0:	4a1e      	ldr	r2, [pc, #120]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036f8:	4b1d      	ldr	r3, [pc, #116]	; (8003770 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2232      	movs	r2, #50	; 0x32
 80036fe:	fb02 f303 	mul.w	r3, r2, r3
 8003702:	4a1c      	ldr	r2, [pc, #112]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003704:	fba2 2303 	umull	r2, r3, r2, r3
 8003708:	0c9b      	lsrs	r3, r3, #18
 800370a:	3301      	adds	r3, #1
 800370c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800370e:	e002      	b.n	8003716 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	3b01      	subs	r3, #1
 8003714:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003716:	4b15      	ldr	r3, [pc, #84]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800371e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003722:	d102      	bne.n	800372a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f2      	bne.n	8003710 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800372a:	4b10      	ldr	r3, [pc, #64]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003736:	d112      	bne.n	800375e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e011      	b.n	8003760 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800373c:	4b0b      	ldr	r3, [pc, #44]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800373e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003742:	4a0a      	ldr	r2, [pc, #40]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003748:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800374c:	e007      	b.n	800375e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800374e:	4b07      	ldr	r3, [pc, #28]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003756:	4a05      	ldr	r2, [pc, #20]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003758:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800375c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	40007000 	.word	0x40007000
 8003770:	20000000 	.word	0x20000000
 8003774:	431bde83 	.word	0x431bde83

08003778 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800377c:	4b05      	ldr	r3, [pc, #20]	; (8003794 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	4a04      	ldr	r2, [pc, #16]	; (8003794 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003782:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003786:	6093      	str	r3, [r2, #8]
}
 8003788:	bf00      	nop
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40007000 	.word	0x40007000

08003798 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b088      	sub	sp, #32
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e306      	b.n	8003db8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d075      	beq.n	80038a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037b6:	4b97      	ldr	r3, [pc, #604]	; (8003a14 <HAL_RCC_OscConfig+0x27c>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 030c 	and.w	r3, r3, #12
 80037be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037c0:	4b94      	ldr	r3, [pc, #592]	; (8003a14 <HAL_RCC_OscConfig+0x27c>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f003 0303 	and.w	r3, r3, #3
 80037c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	2b0c      	cmp	r3, #12
 80037ce:	d102      	bne.n	80037d6 <HAL_RCC_OscConfig+0x3e>
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	d002      	beq.n	80037dc <HAL_RCC_OscConfig+0x44>
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d10b      	bne.n	80037f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037dc:	4b8d      	ldr	r3, [pc, #564]	; (8003a14 <HAL_RCC_OscConfig+0x27c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d05b      	beq.n	80038a0 <HAL_RCC_OscConfig+0x108>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d157      	bne.n	80038a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e2e1      	b.n	8003db8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037fc:	d106      	bne.n	800380c <HAL_RCC_OscConfig+0x74>
 80037fe:	4b85      	ldr	r3, [pc, #532]	; (8003a14 <HAL_RCC_OscConfig+0x27c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a84      	ldr	r2, [pc, #528]	; (8003a14 <HAL_RCC_OscConfig+0x27c>)
 8003804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	e01d      	b.n	8003848 <HAL_RCC_OscConfig+0xb0>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003814:	d10c      	bne.n	8003830 <HAL_RCC_OscConfig+0x98>
 8003816:	4b7f      	ldr	r3, [pc, #508]	; (8003a14 <HAL_RCC_OscConfig+0x27c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a7e      	ldr	r2, [pc, #504]	; (8003a14 <HAL_RCC_OscConfig+0x27c>)
 800381c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003820:	6013      	str	r3, [r2, #0]
 8003822:	4b7c      	ldr	r3, [pc, #496]	; (8003a14 <HAL_RCC_OscConfig+0x27c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a7b      	ldr	r2, [pc, #492]	; (8003a14 <HAL_RCC_OscConfig+0x27c>)
 8003828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	e00b      	b.n	8003848 <HAL_RCC_OscConfig+0xb0>
 8003830:	4b78      	ldr	r3, [pc, #480]	; (8003a14 <HAL_RCC_OscConfig+0x27c>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a77      	ldr	r2, [pc, #476]	; (8003a14 <HAL_RCC_OscConfig+0x27c>)
 8003836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800383a:	6013      	str	r3, [r2, #0]
 800383c:	4b75      	ldr	r3, [pc, #468]	; (8003a14 <HAL_RCC_OscConfig+0x27c>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a74      	ldr	r2, [pc, #464]	; (8003a14 <HAL_RCC_OscConfig+0x27c>)
 8003842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003846:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d013      	beq.n	8003878 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003850:	f7fe f934 	bl	8001abc <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003858:	f7fe f930 	bl	8001abc <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b64      	cmp	r3, #100	; 0x64
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e2a6      	b.n	8003db8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800386a:	4b6a      	ldr	r3, [pc, #424]	; (8003a14 <HAL_RCC_OscConfig+0x27c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0f0      	beq.n	8003858 <HAL_RCC_OscConfig+0xc0>
 8003876:	e014      	b.n	80038a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003878:	f7fe f920 	bl	8001abc <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003880:	f7fe f91c 	bl	8001abc <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b64      	cmp	r3, #100	; 0x64
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e292      	b.n	8003db8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003892:	4b60      	ldr	r3, [pc, #384]	; (8003a14 <HAL_RCC_OscConfig+0x27c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1f0      	bne.n	8003880 <HAL_RCC_OscConfig+0xe8>
 800389e:	e000      	b.n	80038a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d075      	beq.n	800399a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ae:	4b59      	ldr	r3, [pc, #356]	; (8003a14 <HAL_RCC_OscConfig+0x27c>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 030c 	and.w	r3, r3, #12
 80038b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038b8:	4b56      	ldr	r3, [pc, #344]	; (8003a14 <HAL_RCC_OscConfig+0x27c>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f003 0303 	and.w	r3, r3, #3
 80038c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	2b0c      	cmp	r3, #12
 80038c6:	d102      	bne.n	80038ce <HAL_RCC_OscConfig+0x136>
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d002      	beq.n	80038d4 <HAL_RCC_OscConfig+0x13c>
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	d11f      	bne.n	8003914 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038d4:	4b4f      	ldr	r3, [pc, #316]	; (8003a14 <HAL_RCC_OscConfig+0x27c>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d005      	beq.n	80038ec <HAL_RCC_OscConfig+0x154>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e265      	b.n	8003db8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ec:	4b49      	ldr	r3, [pc, #292]	; (8003a14 <HAL_RCC_OscConfig+0x27c>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	061b      	lsls	r3, r3, #24
 80038fa:	4946      	ldr	r1, [pc, #280]	; (8003a14 <HAL_RCC_OscConfig+0x27c>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003900:	4b45      	ldr	r3, [pc, #276]	; (8003a18 <HAL_RCC_OscConfig+0x280>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f7fd fec5 	bl	8001694 <HAL_InitTick>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d043      	beq.n	8003998 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e251      	b.n	8003db8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d023      	beq.n	8003964 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800391c:	4b3d      	ldr	r3, [pc, #244]	; (8003a14 <HAL_RCC_OscConfig+0x27c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a3c      	ldr	r2, [pc, #240]	; (8003a14 <HAL_RCC_OscConfig+0x27c>)
 8003922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003928:	f7fe f8c8 	bl	8001abc <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003930:	f7fe f8c4 	bl	8001abc <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e23a      	b.n	8003db8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003942:	4b34      	ldr	r3, [pc, #208]	; (8003a14 <HAL_RCC_OscConfig+0x27c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800394a:	2b00      	cmp	r3, #0
 800394c:	d0f0      	beq.n	8003930 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800394e:	4b31      	ldr	r3, [pc, #196]	; (8003a14 <HAL_RCC_OscConfig+0x27c>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	061b      	lsls	r3, r3, #24
 800395c:	492d      	ldr	r1, [pc, #180]	; (8003a14 <HAL_RCC_OscConfig+0x27c>)
 800395e:	4313      	orrs	r3, r2
 8003960:	604b      	str	r3, [r1, #4]
 8003962:	e01a      	b.n	800399a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003964:	4b2b      	ldr	r3, [pc, #172]	; (8003a14 <HAL_RCC_OscConfig+0x27c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a2a      	ldr	r2, [pc, #168]	; (8003a14 <HAL_RCC_OscConfig+0x27c>)
 800396a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800396e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003970:	f7fe f8a4 	bl	8001abc <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003978:	f7fe f8a0 	bl	8001abc <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e216      	b.n	8003db8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800398a:	4b22      	ldr	r3, [pc, #136]	; (8003a14 <HAL_RCC_OscConfig+0x27c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1f0      	bne.n	8003978 <HAL_RCC_OscConfig+0x1e0>
 8003996:	e000      	b.n	800399a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003998:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0308 	and.w	r3, r3, #8
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d041      	beq.n	8003a2a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d01c      	beq.n	80039e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ae:	4b19      	ldr	r3, [pc, #100]	; (8003a14 <HAL_RCC_OscConfig+0x27c>)
 80039b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039b4:	4a17      	ldr	r2, [pc, #92]	; (8003a14 <HAL_RCC_OscConfig+0x27c>)
 80039b6:	f043 0301 	orr.w	r3, r3, #1
 80039ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039be:	f7fe f87d 	bl	8001abc <HAL_GetTick>
 80039c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039c4:	e008      	b.n	80039d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039c6:	f7fe f879 	bl	8001abc <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e1ef      	b.n	8003db8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039d8:	4b0e      	ldr	r3, [pc, #56]	; (8003a14 <HAL_RCC_OscConfig+0x27c>)
 80039da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0ef      	beq.n	80039c6 <HAL_RCC_OscConfig+0x22e>
 80039e6:	e020      	b.n	8003a2a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039e8:	4b0a      	ldr	r3, [pc, #40]	; (8003a14 <HAL_RCC_OscConfig+0x27c>)
 80039ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ee:	4a09      	ldr	r2, [pc, #36]	; (8003a14 <HAL_RCC_OscConfig+0x27c>)
 80039f0:	f023 0301 	bic.w	r3, r3, #1
 80039f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f8:	f7fe f860 	bl	8001abc <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039fe:	e00d      	b.n	8003a1c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a00:	f7fe f85c 	bl	8001abc <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d906      	bls.n	8003a1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e1d2      	b.n	8003db8 <HAL_RCC_OscConfig+0x620>
 8003a12:	bf00      	nop
 8003a14:	40021000 	.word	0x40021000
 8003a18:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a1c:	4b8c      	ldr	r3, [pc, #560]	; (8003c50 <HAL_RCC_OscConfig+0x4b8>)
 8003a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1ea      	bne.n	8003a00 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0304 	and.w	r3, r3, #4
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 80a6 	beq.w	8003b84 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a3c:	4b84      	ldr	r3, [pc, #528]	; (8003c50 <HAL_RCC_OscConfig+0x4b8>)
 8003a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <HAL_RCC_OscConfig+0x2b4>
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e000      	b.n	8003a4e <HAL_RCC_OscConfig+0x2b6>
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00d      	beq.n	8003a6e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a52:	4b7f      	ldr	r3, [pc, #508]	; (8003c50 <HAL_RCC_OscConfig+0x4b8>)
 8003a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a56:	4a7e      	ldr	r2, [pc, #504]	; (8003c50 <HAL_RCC_OscConfig+0x4b8>)
 8003a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a5c:	6593      	str	r3, [r2, #88]	; 0x58
 8003a5e:	4b7c      	ldr	r3, [pc, #496]	; (8003c50 <HAL_RCC_OscConfig+0x4b8>)
 8003a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a6e:	4b79      	ldr	r3, [pc, #484]	; (8003c54 <HAL_RCC_OscConfig+0x4bc>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d118      	bne.n	8003aac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a7a:	4b76      	ldr	r3, [pc, #472]	; (8003c54 <HAL_RCC_OscConfig+0x4bc>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a75      	ldr	r2, [pc, #468]	; (8003c54 <HAL_RCC_OscConfig+0x4bc>)
 8003a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a86:	f7fe f819 	bl	8001abc <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a8e:	f7fe f815 	bl	8001abc <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e18b      	b.n	8003db8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aa0:	4b6c      	ldr	r3, [pc, #432]	; (8003c54 <HAL_RCC_OscConfig+0x4bc>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0f0      	beq.n	8003a8e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d108      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x32e>
 8003ab4:	4b66      	ldr	r3, [pc, #408]	; (8003c50 <HAL_RCC_OscConfig+0x4b8>)
 8003ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aba:	4a65      	ldr	r2, [pc, #404]	; (8003c50 <HAL_RCC_OscConfig+0x4b8>)
 8003abc:	f043 0301 	orr.w	r3, r3, #1
 8003ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ac4:	e024      	b.n	8003b10 <HAL_RCC_OscConfig+0x378>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b05      	cmp	r3, #5
 8003acc:	d110      	bne.n	8003af0 <HAL_RCC_OscConfig+0x358>
 8003ace:	4b60      	ldr	r3, [pc, #384]	; (8003c50 <HAL_RCC_OscConfig+0x4b8>)
 8003ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad4:	4a5e      	ldr	r2, [pc, #376]	; (8003c50 <HAL_RCC_OscConfig+0x4b8>)
 8003ad6:	f043 0304 	orr.w	r3, r3, #4
 8003ada:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ade:	4b5c      	ldr	r3, [pc, #368]	; (8003c50 <HAL_RCC_OscConfig+0x4b8>)
 8003ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae4:	4a5a      	ldr	r2, [pc, #360]	; (8003c50 <HAL_RCC_OscConfig+0x4b8>)
 8003ae6:	f043 0301 	orr.w	r3, r3, #1
 8003aea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aee:	e00f      	b.n	8003b10 <HAL_RCC_OscConfig+0x378>
 8003af0:	4b57      	ldr	r3, [pc, #348]	; (8003c50 <HAL_RCC_OscConfig+0x4b8>)
 8003af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af6:	4a56      	ldr	r2, [pc, #344]	; (8003c50 <HAL_RCC_OscConfig+0x4b8>)
 8003af8:	f023 0301 	bic.w	r3, r3, #1
 8003afc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b00:	4b53      	ldr	r3, [pc, #332]	; (8003c50 <HAL_RCC_OscConfig+0x4b8>)
 8003b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b06:	4a52      	ldr	r2, [pc, #328]	; (8003c50 <HAL_RCC_OscConfig+0x4b8>)
 8003b08:	f023 0304 	bic.w	r3, r3, #4
 8003b0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d016      	beq.n	8003b46 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b18:	f7fd ffd0 	bl	8001abc <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b1e:	e00a      	b.n	8003b36 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b20:	f7fd ffcc 	bl	8001abc <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e140      	b.n	8003db8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b36:	4b46      	ldr	r3, [pc, #280]	; (8003c50 <HAL_RCC_OscConfig+0x4b8>)
 8003b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0ed      	beq.n	8003b20 <HAL_RCC_OscConfig+0x388>
 8003b44:	e015      	b.n	8003b72 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b46:	f7fd ffb9 	bl	8001abc <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b4c:	e00a      	b.n	8003b64 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b4e:	f7fd ffb5 	bl	8001abc <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e129      	b.n	8003db8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b64:	4b3a      	ldr	r3, [pc, #232]	; (8003c50 <HAL_RCC_OscConfig+0x4b8>)
 8003b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1ed      	bne.n	8003b4e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b72:	7ffb      	ldrb	r3, [r7, #31]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d105      	bne.n	8003b84 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b78:	4b35      	ldr	r3, [pc, #212]	; (8003c50 <HAL_RCC_OscConfig+0x4b8>)
 8003b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7c:	4a34      	ldr	r2, [pc, #208]	; (8003c50 <HAL_RCC_OscConfig+0x4b8>)
 8003b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b82:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0320 	and.w	r3, r3, #32
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d03c      	beq.n	8003c0a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d01c      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b98:	4b2d      	ldr	r3, [pc, #180]	; (8003c50 <HAL_RCC_OscConfig+0x4b8>)
 8003b9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b9e:	4a2c      	ldr	r2, [pc, #176]	; (8003c50 <HAL_RCC_OscConfig+0x4b8>)
 8003ba0:	f043 0301 	orr.w	r3, r3, #1
 8003ba4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba8:	f7fd ff88 	bl	8001abc <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bb0:	f7fd ff84 	bl	8001abc <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e0fa      	b.n	8003db8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bc2:	4b23      	ldr	r3, [pc, #140]	; (8003c50 <HAL_RCC_OscConfig+0x4b8>)
 8003bc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0ef      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x418>
 8003bd0:	e01b      	b.n	8003c0a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bd2:	4b1f      	ldr	r3, [pc, #124]	; (8003c50 <HAL_RCC_OscConfig+0x4b8>)
 8003bd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bd8:	4a1d      	ldr	r2, [pc, #116]	; (8003c50 <HAL_RCC_OscConfig+0x4b8>)
 8003bda:	f023 0301 	bic.w	r3, r3, #1
 8003bde:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be2:	f7fd ff6b 	bl	8001abc <HAL_GetTick>
 8003be6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003be8:	e008      	b.n	8003bfc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bea:	f7fd ff67 	bl	8001abc <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e0dd      	b.n	8003db8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bfc:	4b14      	ldr	r3, [pc, #80]	; (8003c50 <HAL_RCC_OscConfig+0x4b8>)
 8003bfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1ef      	bne.n	8003bea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 80d1 	beq.w	8003db6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c14:	4b0e      	ldr	r3, [pc, #56]	; (8003c50 <HAL_RCC_OscConfig+0x4b8>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f003 030c 	and.w	r3, r3, #12
 8003c1c:	2b0c      	cmp	r3, #12
 8003c1e:	f000 808b 	beq.w	8003d38 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d15e      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c2a:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <HAL_RCC_OscConfig+0x4b8>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a08      	ldr	r2, [pc, #32]	; (8003c50 <HAL_RCC_OscConfig+0x4b8>)
 8003c30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c36:	f7fd ff41 	bl	8001abc <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c3c:	e00c      	b.n	8003c58 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c3e:	f7fd ff3d 	bl	8001abc <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d905      	bls.n	8003c58 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e0b3      	b.n	8003db8 <HAL_RCC_OscConfig+0x620>
 8003c50:	40021000 	.word	0x40021000
 8003c54:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c58:	4b59      	ldr	r3, [pc, #356]	; (8003dc0 <HAL_RCC_OscConfig+0x628>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1ec      	bne.n	8003c3e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c64:	4b56      	ldr	r3, [pc, #344]	; (8003dc0 <HAL_RCC_OscConfig+0x628>)
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	4b56      	ldr	r3, [pc, #344]	; (8003dc4 <HAL_RCC_OscConfig+0x62c>)
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6a11      	ldr	r1, [r2, #32]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c74:	3a01      	subs	r2, #1
 8003c76:	0112      	lsls	r2, r2, #4
 8003c78:	4311      	orrs	r1, r2
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003c7e:	0212      	lsls	r2, r2, #8
 8003c80:	4311      	orrs	r1, r2
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c86:	0852      	lsrs	r2, r2, #1
 8003c88:	3a01      	subs	r2, #1
 8003c8a:	0552      	lsls	r2, r2, #21
 8003c8c:	4311      	orrs	r1, r2
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c92:	0852      	lsrs	r2, r2, #1
 8003c94:	3a01      	subs	r2, #1
 8003c96:	0652      	lsls	r2, r2, #25
 8003c98:	4311      	orrs	r1, r2
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c9e:	06d2      	lsls	r2, r2, #27
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	4947      	ldr	r1, [pc, #284]	; (8003dc0 <HAL_RCC_OscConfig+0x628>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ca8:	4b45      	ldr	r3, [pc, #276]	; (8003dc0 <HAL_RCC_OscConfig+0x628>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a44      	ldr	r2, [pc, #272]	; (8003dc0 <HAL_RCC_OscConfig+0x628>)
 8003cae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cb2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cb4:	4b42      	ldr	r3, [pc, #264]	; (8003dc0 <HAL_RCC_OscConfig+0x628>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	4a41      	ldr	r2, [pc, #260]	; (8003dc0 <HAL_RCC_OscConfig+0x628>)
 8003cba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cbe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc0:	f7fd fefc 	bl	8001abc <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc8:	f7fd fef8 	bl	8001abc <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e06e      	b.n	8003db8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cda:	4b39      	ldr	r3, [pc, #228]	; (8003dc0 <HAL_RCC_OscConfig+0x628>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0f0      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x530>
 8003ce6:	e066      	b.n	8003db6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce8:	4b35      	ldr	r3, [pc, #212]	; (8003dc0 <HAL_RCC_OscConfig+0x628>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a34      	ldr	r2, [pc, #208]	; (8003dc0 <HAL_RCC_OscConfig+0x628>)
 8003cee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cf2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003cf4:	4b32      	ldr	r3, [pc, #200]	; (8003dc0 <HAL_RCC_OscConfig+0x628>)
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	4a31      	ldr	r2, [pc, #196]	; (8003dc0 <HAL_RCC_OscConfig+0x628>)
 8003cfa:	f023 0303 	bic.w	r3, r3, #3
 8003cfe:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003d00:	4b2f      	ldr	r3, [pc, #188]	; (8003dc0 <HAL_RCC_OscConfig+0x628>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	4a2e      	ldr	r2, [pc, #184]	; (8003dc0 <HAL_RCC_OscConfig+0x628>)
 8003d06:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d0e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d10:	f7fd fed4 	bl	8001abc <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d18:	f7fd fed0 	bl	8001abc <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e046      	b.n	8003db8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d2a:	4b25      	ldr	r3, [pc, #148]	; (8003dc0 <HAL_RCC_OscConfig+0x628>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1f0      	bne.n	8003d18 <HAL_RCC_OscConfig+0x580>
 8003d36:	e03e      	b.n	8003db6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d101      	bne.n	8003d44 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e039      	b.n	8003db8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003d44:	4b1e      	ldr	r3, [pc, #120]	; (8003dc0 <HAL_RCC_OscConfig+0x628>)
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f003 0203 	and.w	r2, r3, #3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d12c      	bne.n	8003db2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	3b01      	subs	r3, #1
 8003d64:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d123      	bne.n	8003db2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d11b      	bne.n	8003db2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d84:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d113      	bne.n	8003db2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d94:	085b      	lsrs	r3, r3, #1
 8003d96:	3b01      	subs	r3, #1
 8003d98:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d109      	bne.n	8003db2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da8:	085b      	lsrs	r3, r3, #1
 8003daa:	3b01      	subs	r3, #1
 8003dac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d001      	beq.n	8003db6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e000      	b.n	8003db8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3720      	adds	r7, #32
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	019f800c 	.word	0x019f800c

08003dc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e11e      	b.n	800401e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003de0:	4b91      	ldr	r3, [pc, #580]	; (8004028 <HAL_RCC_ClockConfig+0x260>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 030f 	and.w	r3, r3, #15
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d910      	bls.n	8003e10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dee:	4b8e      	ldr	r3, [pc, #568]	; (8004028 <HAL_RCC_ClockConfig+0x260>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f023 020f 	bic.w	r2, r3, #15
 8003df6:	498c      	ldr	r1, [pc, #560]	; (8004028 <HAL_RCC_ClockConfig+0x260>)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dfe:	4b8a      	ldr	r3, [pc, #552]	; (8004028 <HAL_RCC_ClockConfig+0x260>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d001      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e106      	b.n	800401e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d073      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2b03      	cmp	r3, #3
 8003e22:	d129      	bne.n	8003e78 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e24:	4b81      	ldr	r3, [pc, #516]	; (800402c <HAL_RCC_ClockConfig+0x264>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e0f4      	b.n	800401e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003e34:	f000 f9d0 	bl	80041d8 <RCC_GetSysClockFreqFromPLLSource>
 8003e38:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	4a7c      	ldr	r2, [pc, #496]	; (8004030 <HAL_RCC_ClockConfig+0x268>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d93f      	bls.n	8003ec2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e42:	4b7a      	ldr	r3, [pc, #488]	; (800402c <HAL_RCC_ClockConfig+0x264>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d009      	beq.n	8003e62 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d033      	beq.n	8003ec2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d12f      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e62:	4b72      	ldr	r3, [pc, #456]	; (800402c <HAL_RCC_ClockConfig+0x264>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e6a:	4a70      	ldr	r2, [pc, #448]	; (800402c <HAL_RCC_ClockConfig+0x264>)
 8003e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e70:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e72:	2380      	movs	r3, #128	; 0x80
 8003e74:	617b      	str	r3, [r7, #20]
 8003e76:	e024      	b.n	8003ec2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d107      	bne.n	8003e90 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e80:	4b6a      	ldr	r3, [pc, #424]	; (800402c <HAL_RCC_ClockConfig+0x264>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d109      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e0c6      	b.n	800401e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e90:	4b66      	ldr	r3, [pc, #408]	; (800402c <HAL_RCC_ClockConfig+0x264>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e0be      	b.n	800401e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003ea0:	f000 f8ce 	bl	8004040 <HAL_RCC_GetSysClockFreq>
 8003ea4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	4a61      	ldr	r2, [pc, #388]	; (8004030 <HAL_RCC_ClockConfig+0x268>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d909      	bls.n	8003ec2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003eae:	4b5f      	ldr	r3, [pc, #380]	; (800402c <HAL_RCC_ClockConfig+0x264>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003eb6:	4a5d      	ldr	r2, [pc, #372]	; (800402c <HAL_RCC_ClockConfig+0x264>)
 8003eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ebc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003ebe:	2380      	movs	r3, #128	; 0x80
 8003ec0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ec2:	4b5a      	ldr	r3, [pc, #360]	; (800402c <HAL_RCC_ClockConfig+0x264>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f023 0203 	bic.w	r2, r3, #3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	4957      	ldr	r1, [pc, #348]	; (800402c <HAL_RCC_ClockConfig+0x264>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed4:	f7fd fdf2 	bl	8001abc <HAL_GetTick>
 8003ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eda:	e00a      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003edc:	f7fd fdee 	bl	8001abc <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e095      	b.n	800401e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef2:	4b4e      	ldr	r3, [pc, #312]	; (800402c <HAL_RCC_ClockConfig+0x264>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 020c 	and.w	r2, r3, #12
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d1eb      	bne.n	8003edc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d023      	beq.n	8003f58 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f1c:	4b43      	ldr	r3, [pc, #268]	; (800402c <HAL_RCC_ClockConfig+0x264>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	4a42      	ldr	r2, [pc, #264]	; (800402c <HAL_RCC_ClockConfig+0x264>)
 8003f22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f26:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0308 	and.w	r3, r3, #8
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d007      	beq.n	8003f44 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003f34:	4b3d      	ldr	r3, [pc, #244]	; (800402c <HAL_RCC_ClockConfig+0x264>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f3c:	4a3b      	ldr	r2, [pc, #236]	; (800402c <HAL_RCC_ClockConfig+0x264>)
 8003f3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f44:	4b39      	ldr	r3, [pc, #228]	; (800402c <HAL_RCC_ClockConfig+0x264>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	4936      	ldr	r1, [pc, #216]	; (800402c <HAL_RCC_ClockConfig+0x264>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	608b      	str	r3, [r1, #8]
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	2b80      	cmp	r3, #128	; 0x80
 8003f5c:	d105      	bne.n	8003f6a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f5e:	4b33      	ldr	r3, [pc, #204]	; (800402c <HAL_RCC_ClockConfig+0x264>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	4a32      	ldr	r2, [pc, #200]	; (800402c <HAL_RCC_ClockConfig+0x264>)
 8003f64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f68:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f6a:	4b2f      	ldr	r3, [pc, #188]	; (8004028 <HAL_RCC_ClockConfig+0x260>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d21d      	bcs.n	8003fb4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f78:	4b2b      	ldr	r3, [pc, #172]	; (8004028 <HAL_RCC_ClockConfig+0x260>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f023 020f 	bic.w	r2, r3, #15
 8003f80:	4929      	ldr	r1, [pc, #164]	; (8004028 <HAL_RCC_ClockConfig+0x260>)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f88:	f7fd fd98 	bl	8001abc <HAL_GetTick>
 8003f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8e:	e00a      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f90:	f7fd fd94 	bl	8001abc <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e03b      	b.n	800401e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa6:	4b20      	ldr	r3, [pc, #128]	; (8004028 <HAL_RCC_ClockConfig+0x260>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d1ed      	bne.n	8003f90 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d008      	beq.n	8003fd2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fc0:	4b1a      	ldr	r3, [pc, #104]	; (800402c <HAL_RCC_ClockConfig+0x264>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	4917      	ldr	r1, [pc, #92]	; (800402c <HAL_RCC_ClockConfig+0x264>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0308 	and.w	r3, r3, #8
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d009      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fde:	4b13      	ldr	r3, [pc, #76]	; (800402c <HAL_RCC_ClockConfig+0x264>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	490f      	ldr	r1, [pc, #60]	; (800402c <HAL_RCC_ClockConfig+0x264>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ff2:	f000 f825 	bl	8004040 <HAL_RCC_GetSysClockFreq>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	4b0c      	ldr	r3, [pc, #48]	; (800402c <HAL_RCC_ClockConfig+0x264>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	091b      	lsrs	r3, r3, #4
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	490c      	ldr	r1, [pc, #48]	; (8004034 <HAL_RCC_ClockConfig+0x26c>)
 8004004:	5ccb      	ldrb	r3, [r1, r3]
 8004006:	f003 031f 	and.w	r3, r3, #31
 800400a:	fa22 f303 	lsr.w	r3, r2, r3
 800400e:	4a0a      	ldr	r2, [pc, #40]	; (8004038 <HAL_RCC_ClockConfig+0x270>)
 8004010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004012:	4b0a      	ldr	r3, [pc, #40]	; (800403c <HAL_RCC_ClockConfig+0x274>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f7fd fb3c 	bl	8001694 <HAL_InitTick>
 800401c:	4603      	mov	r3, r0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40022000 	.word	0x40022000
 800402c:	40021000 	.word	0x40021000
 8004030:	04c4b400 	.word	0x04c4b400
 8004034:	08010658 	.word	0x08010658
 8004038:	20000000 	.word	0x20000000
 800403c:	20000004 	.word	0x20000004

08004040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004040:	b480      	push	{r7}
 8004042:	b087      	sub	sp, #28
 8004044:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004046:	4b2c      	ldr	r3, [pc, #176]	; (80040f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f003 030c 	and.w	r3, r3, #12
 800404e:	2b04      	cmp	r3, #4
 8004050:	d102      	bne.n	8004058 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004052:	4b2a      	ldr	r3, [pc, #168]	; (80040fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	e047      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004058:	4b27      	ldr	r3, [pc, #156]	; (80040f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f003 030c 	and.w	r3, r3, #12
 8004060:	2b08      	cmp	r3, #8
 8004062:	d102      	bne.n	800406a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004064:	4b26      	ldr	r3, [pc, #152]	; (8004100 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004066:	613b      	str	r3, [r7, #16]
 8004068:	e03e      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800406a:	4b23      	ldr	r3, [pc, #140]	; (80040f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 030c 	and.w	r3, r3, #12
 8004072:	2b0c      	cmp	r3, #12
 8004074:	d136      	bne.n	80040e4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004076:	4b20      	ldr	r3, [pc, #128]	; (80040f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004080:	4b1d      	ldr	r3, [pc, #116]	; (80040f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	091b      	lsrs	r3, r3, #4
 8004086:	f003 030f 	and.w	r3, r3, #15
 800408a:	3301      	adds	r3, #1
 800408c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2b03      	cmp	r3, #3
 8004092:	d10c      	bne.n	80040ae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004094:	4a1a      	ldr	r2, [pc, #104]	; (8004100 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	fbb2 f3f3 	udiv	r3, r2, r3
 800409c:	4a16      	ldr	r2, [pc, #88]	; (80040f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800409e:	68d2      	ldr	r2, [r2, #12]
 80040a0:	0a12      	lsrs	r2, r2, #8
 80040a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040a6:	fb02 f303 	mul.w	r3, r2, r3
 80040aa:	617b      	str	r3, [r7, #20]
      break;
 80040ac:	e00c      	b.n	80040c8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040ae:	4a13      	ldr	r2, [pc, #76]	; (80040fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b6:	4a10      	ldr	r2, [pc, #64]	; (80040f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040b8:	68d2      	ldr	r2, [r2, #12]
 80040ba:	0a12      	lsrs	r2, r2, #8
 80040bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040c0:	fb02 f303 	mul.w	r3, r2, r3
 80040c4:	617b      	str	r3, [r7, #20]
      break;
 80040c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040c8:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	0e5b      	lsrs	r3, r3, #25
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	3301      	adds	r3, #1
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e0:	613b      	str	r3, [r7, #16]
 80040e2:	e001      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80040e8:	693b      	ldr	r3, [r7, #16]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	371c      	adds	r7, #28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	40021000 	.word	0x40021000
 80040fc:	00f42400 	.word	0x00f42400
 8004100:	016e3600 	.word	0x016e3600

08004104 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004108:	4b03      	ldr	r3, [pc, #12]	; (8004118 <HAL_RCC_GetHCLKFreq+0x14>)
 800410a:	681b      	ldr	r3, [r3, #0]
}
 800410c:	4618      	mov	r0, r3
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	20000000 	.word	0x20000000

0800411c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004120:	f7ff fff0 	bl	8004104 <HAL_RCC_GetHCLKFreq>
 8004124:	4602      	mov	r2, r0
 8004126:	4b06      	ldr	r3, [pc, #24]	; (8004140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	0a1b      	lsrs	r3, r3, #8
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	4904      	ldr	r1, [pc, #16]	; (8004144 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004132:	5ccb      	ldrb	r3, [r1, r3]
 8004134:	f003 031f 	and.w	r3, r3, #31
 8004138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800413c:	4618      	mov	r0, r3
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40021000 	.word	0x40021000
 8004144:	08010668 	.word	0x08010668

08004148 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800414c:	f7ff ffda 	bl	8004104 <HAL_RCC_GetHCLKFreq>
 8004150:	4602      	mov	r2, r0
 8004152:	4b06      	ldr	r3, [pc, #24]	; (800416c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	0adb      	lsrs	r3, r3, #11
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	4904      	ldr	r1, [pc, #16]	; (8004170 <HAL_RCC_GetPCLK2Freq+0x28>)
 800415e:	5ccb      	ldrb	r3, [r1, r3]
 8004160:	f003 031f 	and.w	r3, r3, #31
 8004164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004168:	4618      	mov	r0, r3
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40021000 	.word	0x40021000
 8004170:	08010668 	.word	0x08010668

08004174 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	220f      	movs	r2, #15
 8004182:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004184:	4b12      	ldr	r3, [pc, #72]	; (80041d0 <HAL_RCC_GetClockConfig+0x5c>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 0203 	and.w	r2, r3, #3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004190:	4b0f      	ldr	r3, [pc, #60]	; (80041d0 <HAL_RCC_GetClockConfig+0x5c>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800419c:	4b0c      	ldr	r3, [pc, #48]	; (80041d0 <HAL_RCC_GetClockConfig+0x5c>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80041a8:	4b09      	ldr	r3, [pc, #36]	; (80041d0 <HAL_RCC_GetClockConfig+0x5c>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	08db      	lsrs	r3, r3, #3
 80041ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80041b6:	4b07      	ldr	r3, [pc, #28]	; (80041d4 <HAL_RCC_GetClockConfig+0x60>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 020f 	and.w	r2, r3, #15
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	601a      	str	r2, [r3, #0]
}
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40021000 	.word	0x40021000
 80041d4:	40022000 	.word	0x40022000

080041d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041de:	4b1e      	ldr	r3, [pc, #120]	; (8004258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041e8:	4b1b      	ldr	r3, [pc, #108]	; (8004258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	091b      	lsrs	r3, r3, #4
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	3301      	adds	r3, #1
 80041f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	2b03      	cmp	r3, #3
 80041fa:	d10c      	bne.n	8004216 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041fc:	4a17      	ldr	r2, [pc, #92]	; (800425c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	fbb2 f3f3 	udiv	r3, r2, r3
 8004204:	4a14      	ldr	r2, [pc, #80]	; (8004258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004206:	68d2      	ldr	r2, [r2, #12]
 8004208:	0a12      	lsrs	r2, r2, #8
 800420a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800420e:	fb02 f303 	mul.w	r3, r2, r3
 8004212:	617b      	str	r3, [r7, #20]
    break;
 8004214:	e00c      	b.n	8004230 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004216:	4a12      	ldr	r2, [pc, #72]	; (8004260 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	fbb2 f3f3 	udiv	r3, r2, r3
 800421e:	4a0e      	ldr	r2, [pc, #56]	; (8004258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004220:	68d2      	ldr	r2, [r2, #12]
 8004222:	0a12      	lsrs	r2, r2, #8
 8004224:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004228:	fb02 f303 	mul.w	r3, r2, r3
 800422c:	617b      	str	r3, [r7, #20]
    break;
 800422e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004230:	4b09      	ldr	r3, [pc, #36]	; (8004258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	0e5b      	lsrs	r3, r3, #25
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	3301      	adds	r3, #1
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	fbb2 f3f3 	udiv	r3, r2, r3
 8004248:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800424a:	687b      	ldr	r3, [r7, #4]
}
 800424c:	4618      	mov	r0, r3
 800424e:	371c      	adds	r7, #28
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	40021000 	.word	0x40021000
 800425c:	016e3600 	.word	0x016e3600
 8004260:	00f42400 	.word	0x00f42400

08004264 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800426c:	2300      	movs	r3, #0
 800426e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004270:	2300      	movs	r3, #0
 8004272:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 8098 	beq.w	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004282:	2300      	movs	r3, #0
 8004284:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004286:	4b43      	ldr	r3, [pc, #268]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10d      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004292:	4b40      	ldr	r3, [pc, #256]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004296:	4a3f      	ldr	r2, [pc, #252]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800429c:	6593      	str	r3, [r2, #88]	; 0x58
 800429e:	4b3d      	ldr	r3, [pc, #244]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a6:	60bb      	str	r3, [r7, #8]
 80042a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042aa:	2301      	movs	r3, #1
 80042ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042ae:	4b3a      	ldr	r3, [pc, #232]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a39      	ldr	r2, [pc, #228]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80042b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042ba:	f7fd fbff 	bl	8001abc <HAL_GetTick>
 80042be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042c0:	e009      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c2:	f7fd fbfb 	bl	8001abc <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d902      	bls.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	74fb      	strb	r3, [r7, #19]
        break;
 80042d4:	e005      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042d6:	4b30      	ldr	r3, [pc, #192]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0ef      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80042e2:	7cfb      	ldrb	r3, [r7, #19]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d159      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042e8:	4b2a      	ldr	r3, [pc, #168]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d01e      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	429a      	cmp	r2, r3
 8004302:	d019      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004304:	4b23      	ldr	r3, [pc, #140]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800430e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004310:	4b20      	ldr	r3, [pc, #128]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004316:	4a1f      	ldr	r2, [pc, #124]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800431c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004320:	4b1c      	ldr	r3, [pc, #112]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004326:	4a1b      	ldr	r2, [pc, #108]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800432c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004330:	4a18      	ldr	r2, [pc, #96]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d016      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004342:	f7fd fbbb 	bl	8001abc <HAL_GetTick>
 8004346:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004348:	e00b      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800434a:	f7fd fbb7 	bl	8001abc <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	f241 3288 	movw	r2, #5000	; 0x1388
 8004358:	4293      	cmp	r3, r2
 800435a:	d902      	bls.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	74fb      	strb	r3, [r7, #19]
            break;
 8004360:	e006      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004362:	4b0c      	ldr	r3, [pc, #48]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0ec      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004370:	7cfb      	ldrb	r3, [r7, #19]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10b      	bne.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004376:	4b07      	ldr	r3, [pc, #28]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004384:	4903      	ldr	r1, [pc, #12]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800438c:	e008      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800438e:	7cfb      	ldrb	r3, [r7, #19]
 8004390:	74bb      	strb	r3, [r7, #18]
 8004392:	e005      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004394:	40021000 	.word	0x40021000
 8004398:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800439c:	7cfb      	ldrb	r3, [r7, #19]
 800439e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043a0:	7c7b      	ldrb	r3, [r7, #17]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d105      	bne.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043a6:	4ba7      	ldr	r3, [pc, #668]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043aa:	4aa6      	ldr	r2, [pc, #664]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00a      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043be:	4ba1      	ldr	r3, [pc, #644]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c4:	f023 0203 	bic.w	r2, r3, #3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	499d      	ldr	r1, [pc, #628]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00a      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043e0:	4b98      	ldr	r3, [pc, #608]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e6:	f023 020c 	bic.w	r2, r3, #12
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	4995      	ldr	r1, [pc, #596]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004402:	4b90      	ldr	r3, [pc, #576]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004408:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	498c      	ldr	r1, [pc, #560]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004412:	4313      	orrs	r3, r2
 8004414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00a      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004424:	4b87      	ldr	r3, [pc, #540]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	4984      	ldr	r1, [pc, #528]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0310 	and.w	r3, r3, #16
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004446:	4b7f      	ldr	r3, [pc, #508]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	497b      	ldr	r1, [pc, #492]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0320 	and.w	r3, r3, #32
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004468:	4b76      	ldr	r3, [pc, #472]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	4973      	ldr	r1, [pc, #460]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800448a:	4b6e      	ldr	r3, [pc, #440]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800448c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004490:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	496a      	ldr	r1, [pc, #424]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800449a:	4313      	orrs	r3, r2
 800449c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00a      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044ac:	4b65      	ldr	r3, [pc, #404]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	4962      	ldr	r1, [pc, #392]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044ce:	4b5d      	ldr	r3, [pc, #372]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	4959      	ldr	r1, [pc, #356]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044f0:	4b54      	ldr	r3, [pc, #336]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044f6:	f023 0203 	bic.w	r2, r3, #3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fe:	4951      	ldr	r1, [pc, #324]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004500:	4313      	orrs	r3, r2
 8004502:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004512:	4b4c      	ldr	r3, [pc, #304]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004518:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004520:	4948      	ldr	r1, [pc, #288]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004530:	2b00      	cmp	r3, #0
 8004532:	d015      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004534:	4b43      	ldr	r3, [pc, #268]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004542:	4940      	ldr	r1, [pc, #256]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004552:	d105      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004554:	4b3b      	ldr	r3, [pc, #236]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	4a3a      	ldr	r2, [pc, #232]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800455a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800455e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004568:	2b00      	cmp	r3, #0
 800456a:	d015      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800456c:	4b35      	ldr	r3, [pc, #212]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800456e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004572:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800457a:	4932      	ldr	r1, [pc, #200]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800457c:	4313      	orrs	r3, r2
 800457e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004586:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800458a:	d105      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800458c:	4b2d      	ldr	r3, [pc, #180]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	4a2c      	ldr	r2, [pc, #176]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004592:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004596:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d015      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80045a4:	4b27      	ldr	r3, [pc, #156]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b2:	4924      	ldr	r1, [pc, #144]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045c2:	d105      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045c4:	4b1f      	ldr	r3, [pc, #124]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	4a1e      	ldr	r2, [pc, #120]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045ce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d015      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045dc:	4b19      	ldr	r3, [pc, #100]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ea:	4916      	ldr	r1, [pc, #88]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045fa:	d105      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045fc:	4b11      	ldr	r3, [pc, #68]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	4a10      	ldr	r2, [pc, #64]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004602:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004606:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d019      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004614:	4b0b      	ldr	r3, [pc, #44]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	4908      	ldr	r1, [pc, #32]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004624:	4313      	orrs	r3, r2
 8004626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004632:	d109      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004634:	4b03      	ldr	r3, [pc, #12]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	4a02      	ldr	r2, [pc, #8]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800463a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800463e:	60d3      	str	r3, [r2, #12]
 8004640:	e002      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004642:	bf00      	nop
 8004644:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d015      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004654:	4b29      	ldr	r3, [pc, #164]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004662:	4926      	ldr	r1, [pc, #152]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004664:	4313      	orrs	r3, r2
 8004666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004672:	d105      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004674:	4b21      	ldr	r3, [pc, #132]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	4a20      	ldr	r2, [pc, #128]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800467a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800467e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d015      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800468c:	4b1b      	ldr	r3, [pc, #108]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800468e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004692:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800469a:	4918      	ldr	r1, [pc, #96]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800469c:	4313      	orrs	r3, r2
 800469e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046aa:	d105      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80046ac:	4b13      	ldr	r3, [pc, #76]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	4a12      	ldr	r2, [pc, #72]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d015      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80046c4:	4b0d      	ldr	r3, [pc, #52]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d2:	490a      	ldr	r1, [pc, #40]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046e2:	d105      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046e4:	4b05      	ldr	r3, [pc, #20]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	4a04      	ldr	r2, [pc, #16]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80046f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	40021000 	.word	0x40021000

08004700 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d066      	beq.n	80047e0 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d106      	bne.n	800472c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7fc fedc 	bl	80014e4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	22ca      	movs	r2, #202	; 0xca
 800473a:	625a      	str	r2, [r3, #36]	; 0x24
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2253      	movs	r2, #83	; 0x53
 8004742:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f99a 	bl	8004a7e <RTC_EnterInitMode>
 800474a:	4603      	mov	r3, r0
 800474c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800474e:	7bfb      	ldrb	r3, [r7, #15]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d13a      	bne.n	80047ca <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	6812      	ldr	r2, [r2, #0]
 800475e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8004762:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004766:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6999      	ldr	r1, [r3, #24]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	431a      	orrs	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68d9      	ldr	r1, [r3, #12]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	041a      	lsls	r2, r3, #16
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f9a6 	bl	8004aea <RTC_ExitInitMode>
 800479e:	4603      	mov	r3, r0
 80047a0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80047a2:	7bfb      	ldrb	r3, [r7, #15]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d110      	bne.n	80047ca <HAL_RTC_Init+0xca>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1a      	ldr	r2, [r3, #32]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	431a      	orrs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	619a      	str	r2, [r3, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	22ff      	movs	r2, #255	; 0xff
 80047d0:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d103      	bne.n	80047e0 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80047e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80047ea:	b590      	push	{r4, r7, lr}
 80047ec:	b087      	sub	sp, #28
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	60f8      	str	r0, [r7, #12]
 80047f2:	60b9      	str	r1, [r7, #8]
 80047f4:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d101      	bne.n	8004804 <HAL_RTC_SetTime+0x1a>
 8004800:	2302      	movs	r3, #2
 8004802:	e08b      	b.n	800491c <HAL_RTC_SetTime+0x132>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	22ca      	movs	r2, #202	; 0xca
 800481a:	625a      	str	r2, [r3, #36]	; 0x24
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2253      	movs	r2, #83	; 0x53
 8004822:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 f92a 	bl	8004a7e <RTC_EnterInitMode>
 800482a:	4603      	mov	r3, r0
 800482c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800482e:	7cfb      	ldrb	r3, [r7, #19]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d163      	bne.n	80048fc <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d126      	bne.n	8004888 <HAL_RTC_SetTime+0x9e>
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004844:	2b00      	cmp	r3, #0
 8004846:	d102      	bne.n	800484e <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	2200      	movs	r2, #0
 800484c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f000 f98c 	bl	8004b70 <RTC_ByteToBcd2>
 8004858:	4603      	mov	r3, r0
 800485a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	785b      	ldrb	r3, [r3, #1]
 8004860:	4618      	mov	r0, r3
 8004862:	f000 f985 	bl	8004b70 <RTC_ByteToBcd2>
 8004866:	4603      	mov	r3, r0
 8004868:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800486a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	789b      	ldrb	r3, [r3, #2]
 8004870:	4618      	mov	r0, r3
 8004872:	f000 f97d 	bl	8004b70 <RTC_ByteToBcd2>
 8004876:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004878:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	78db      	ldrb	r3, [r3, #3]
 8004880:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004882:	4313      	orrs	r3, r2
 8004884:	617b      	str	r3, [r7, #20]
 8004886:	e018      	b.n	80048ba <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004892:	2b00      	cmp	r3, #0
 8004894:	d102      	bne.n	800489c <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	2200      	movs	r2, #0
 800489a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	785b      	ldrb	r3, [r3, #1]
 80048a6:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80048a8:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80048ae:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	78db      	ldrb	r3, [r3, #3]
 80048b4:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80048b6:	4313      	orrs	r3, r2
 80048b8:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(hrtc->Instance->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80048c4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80048c8:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BKP);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	699a      	ldr	r2, [r3, #24]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048d8:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    SET_BIT(hrtc->Instance->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	6999      	ldr	r1, [r3, #24]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	68da      	ldr	r2, [r3, #12]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	431a      	orrs	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 f8f9 	bl	8004aea <RTC_ExitInitMode>
 80048f8:	4603      	mov	r3, r0
 80048fa:	74fb      	strb	r3, [r7, #19]
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	22ff      	movs	r2, #255	; 0xff
 8004902:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004904:	7cfb      	ldrb	r3, [r7, #19]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d103      	bne.n	8004912 <HAL_RTC_SetTime+0x128>
  {
     hrtc->State = HAL_RTC_STATE_READY;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
    __HAL_UNLOCK(hrtc);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800491a:	7cfb      	ldrb	r3, [r7, #19]
}
 800491c:	4618      	mov	r0, r3
 800491e:	371c      	adds	r7, #28
 8004920:	46bd      	mov	sp, r7
 8004922:	bd90      	pop	{r4, r7, pc}

08004924 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004924:	b590      	push	{r4, r7, lr}
 8004926:	b087      	sub	sp, #28
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004936:	2b01      	cmp	r3, #1
 8004938:	d101      	bne.n	800493e <HAL_RTC_SetDate+0x1a>
 800493a:	2302      	movs	r3, #2
 800493c:	e075      	b.n	8004a2a <HAL_RTC_SetDate+0x106>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2202      	movs	r2, #2
 800494a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10e      	bne.n	8004972 <HAL_RTC_SetDate+0x4e>
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	785b      	ldrb	r3, [r3, #1]
 8004958:	f003 0310 	and.w	r3, r3, #16
 800495c:	2b00      	cmp	r3, #0
 800495e:	d008      	beq.n	8004972 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	785b      	ldrb	r3, [r3, #1]
 8004964:	f023 0310 	bic.w	r3, r3, #16
 8004968:	b2db      	uxtb	r3, r3
 800496a:	330a      	adds	r3, #10
 800496c:	b2da      	uxtb	r2, r3
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d11c      	bne.n	80049b2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	78db      	ldrb	r3, [r3, #3]
 800497c:	4618      	mov	r0, r3
 800497e:	f000 f8f7 	bl	8004b70 <RTC_ByteToBcd2>
 8004982:	4603      	mov	r3, r0
 8004984:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	785b      	ldrb	r3, [r3, #1]
 800498a:	4618      	mov	r0, r3
 800498c:	f000 f8f0 	bl	8004b70 <RTC_ByteToBcd2>
 8004990:	4603      	mov	r3, r0
 8004992:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004994:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	789b      	ldrb	r3, [r3, #2]
 800499a:	4618      	mov	r0, r3
 800499c:	f000 f8e8 	bl	8004b70 <RTC_ByteToBcd2>
 80049a0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80049a2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80049ac:	4313      	orrs	r3, r2
 80049ae:	617b      	str	r3, [r7, #20]
 80049b0:	e00e      	b.n	80049d0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	78db      	ldrb	r3, [r3, #3]
 80049b6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	785b      	ldrb	r3, [r3, #1]
 80049bc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80049be:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80049c4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80049cc:	4313      	orrs	r3, r2
 80049ce:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	22ca      	movs	r2, #202	; 0xca
 80049d6:	625a      	str	r2, [r3, #36]	; 0x24
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2253      	movs	r2, #83	; 0x53
 80049de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 f84c 	bl	8004a7e <RTC_EnterInitMode>
 80049e6:	4603      	mov	r3, r0
 80049e8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80049ea:	7cfb      	ldrb	r3, [r7, #19]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10c      	bne.n	8004a0a <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    WRITE_REG(hrtc->Instance->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80049fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80049fe:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 f872 	bl	8004aea <RTC_ExitInitMode>
 8004a06:	4603      	mov	r3, r0
 8004a08:	74fb      	strb	r3, [r7, #19]
  }
	
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	22ff      	movs	r2, #255	; 0xff
 8004a10:	625a      	str	r2, [r3, #36]	; 0x24
 
  if (status == HAL_OK)
 8004a12:	7cfb      	ldrb	r3, [r7, #19]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d103      	bne.n	8004a20 <HAL_RTC_SetDate+0xfc>
  {

    hrtc->State = HAL_RTC_STATE_READY ;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004a28:	7cfb      	ldrb	r3, [r7, #19]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	371c      	adds	r7, #28
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd90      	pop	{r4, r7, pc}

08004a32 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b084      	sub	sp, #16
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68da      	ldr	r2, [r3, #12]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 0220 	bic.w	r2, r2, #32
 8004a48:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004a4a:	f7fd f837 	bl	8001abc <HAL_GetTick>
 8004a4e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8004a50:	e009      	b.n	8004a66 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a52:	f7fd f833 	bl	8001abc <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a60:	d901      	bls.n	8004a66 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e007      	b.n	8004a76 <HAL_RTC_WaitForSynchro+0x44>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f003 0320 	and.w	r3, r3, #32
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d0ee      	beq.n	8004a52 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b084      	sub	sp, #16
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d123      	bne.n	8004ae0 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68da      	ldr	r2, [r3, #12]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004aa6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004aa8:	f7fd f808 	bl	8001abc <HAL_GetTick>
 8004aac:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004aae:	e00d      	b.n	8004acc <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004ab0:	f7fd f804 	bl	8001abc <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004abe:	d905      	bls.n	8004acc <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2203      	movs	r2, #3
 8004ac8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d102      	bne.n	8004ae0 <RTC_EnterInitMode+0x62>
 8004ada:	7bfb      	ldrb	r3, [r7, #15]
 8004adc:	2b03      	cmp	r3, #3
 8004ade:	d1e7      	bne.n	8004ab0 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b084      	sub	sp, #16
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004af2:	2300      	movs	r3, #0
 8004af4:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68da      	ldr	r2, [r3, #12]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b04:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	f003 0320 	and.w	r3, r3, #32
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10c      	bne.n	8004b2e <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f7ff ff8c 	bl	8004a32 <HAL_RTC_WaitForSynchro>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d022      	beq.n	8004b66 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2203      	movs	r2, #3
 8004b24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	73fb      	strb	r3, [r7, #15]
 8004b2c:	e01b      	b.n	8004b66 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	699a      	ldr	r2, [r3, #24]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0220 	bic.w	r2, r2, #32
 8004b3c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7ff ff77 	bl	8004a32 <HAL_RTC_WaitForSynchro>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d005      	beq.n	8004b56 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2203      	movs	r2, #3
 8004b4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	699a      	ldr	r2, [r3, #24]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f042 0220 	orr.w	r2, r2, #32
 8004b64:	619a      	str	r2, [r3, #24]
  }

  return status;
 8004b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	4603      	mov	r3, r0
 8004b78:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8004b7e:	79fb      	ldrb	r3, [r7, #7]
 8004b80:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8004b82:	e005      	b.n	8004b90 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	3301      	adds	r3, #1
 8004b88:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8004b8a:	7afb      	ldrb	r3, [r7, #11]
 8004b8c:	3b0a      	subs	r3, #10
 8004b8e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8004b90:	7afb      	ldrb	r3, [r7, #11]
 8004b92:	2b09      	cmp	r3, #9
 8004b94:	d8f6      	bhi.n	8004b84 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	7afb      	ldrb	r3, [r7, #11]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	b2db      	uxtb	r3, r3
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e09d      	b.n	8004cfe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d108      	bne.n	8004bdc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bd2:	d009      	beq.n	8004be8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	61da      	str	r2, [r3, #28]
 8004bda:	e005      	b.n	8004be8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d106      	bne.n	8004c08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7fc fcaa 	bl	800155c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c1e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c28:	d902      	bls.n	8004c30 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60fb      	str	r3, [r7, #12]
 8004c2e:	e002      	b.n	8004c36 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c34:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c3e:	d007      	beq.n	8004c50 <HAL_SPI_Init+0xa0>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c48:	d002      	beq.n	8004c50 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c60:	431a      	orrs	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	431a      	orrs	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	69db      	ldr	r3, [r3, #28]
 8004c84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c92:	ea42 0103 	orr.w	r1, r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	0c1b      	lsrs	r3, r3, #16
 8004cac:	f003 0204 	and.w	r2, r3, #4
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	f003 0310 	and.w	r3, r3, #16
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cbe:	f003 0308 	and.w	r3, r3, #8
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004ccc:	ea42 0103 	orr.w	r1, r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	69da      	ldr	r2, [r3, #28]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b088      	sub	sp, #32
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	60f8      	str	r0, [r7, #12]
 8004d0e:	60b9      	str	r1, [r7, #8]
 8004d10:	603b      	str	r3, [r7, #0]
 8004d12:	4613      	mov	r3, r2
 8004d14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d16:	2300      	movs	r3, #0
 8004d18:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d101      	bne.n	8004d28 <HAL_SPI_Transmit+0x22>
 8004d24:	2302      	movs	r3, #2
 8004d26:	e158      	b.n	8004fda <HAL_SPI_Transmit+0x2d4>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d30:	f7fc fec4 	bl	8001abc <HAL_GetTick>
 8004d34:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d36:	88fb      	ldrh	r3, [r7, #6]
 8004d38:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d002      	beq.n	8004d4c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d46:	2302      	movs	r3, #2
 8004d48:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d4a:	e13d      	b.n	8004fc8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <HAL_SPI_Transmit+0x52>
 8004d52:	88fb      	ldrh	r3, [r7, #6]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d102      	bne.n	8004d5e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d5c:	e134      	b.n	8004fc8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2203      	movs	r2, #3
 8004d62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	88fa      	ldrh	r2, [r7, #6]
 8004d76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	88fa      	ldrh	r2, [r7, #6]
 8004d7c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004da8:	d10f      	bne.n	8004dca <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004db8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dc8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd4:	2b40      	cmp	r3, #64	; 0x40
 8004dd6:	d007      	beq.n	8004de8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004de6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004df0:	d94b      	bls.n	8004e8a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d002      	beq.n	8004e00 <HAL_SPI_Transmit+0xfa>
 8004dfa:	8afb      	ldrh	r3, [r7, #22]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d13e      	bne.n	8004e7e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e04:	881a      	ldrh	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e10:	1c9a      	adds	r2, r3, #2
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e24:	e02b      	b.n	8004e7e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d112      	bne.n	8004e5a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e38:	881a      	ldrh	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e44:	1c9a      	adds	r2, r3, #2
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	3b01      	subs	r3, #1
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e58:	e011      	b.n	8004e7e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e5a:	f7fc fe2f 	bl	8001abc <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d803      	bhi.n	8004e72 <HAL_SPI_Transmit+0x16c>
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e70:	d102      	bne.n	8004e78 <HAL_SPI_Transmit+0x172>
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d102      	bne.n	8004e7e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e7c:	e0a4      	b.n	8004fc8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1ce      	bne.n	8004e26 <HAL_SPI_Transmit+0x120>
 8004e88:	e07c      	b.n	8004f84 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d002      	beq.n	8004e98 <HAL_SPI_Transmit+0x192>
 8004e92:	8afb      	ldrh	r3, [r7, #22]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d170      	bne.n	8004f7a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d912      	bls.n	8004ec8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea6:	881a      	ldrh	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb2:	1c9a      	adds	r2, r3, #2
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	3b02      	subs	r3, #2
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ec6:	e058      	b.n	8004f7a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	330c      	adds	r3, #12
 8004ed2:	7812      	ldrb	r2, [r2, #0]
 8004ed4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eda:	1c5a      	adds	r2, r3, #1
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004eee:	e044      	b.n	8004f7a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d12b      	bne.n	8004f56 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d912      	bls.n	8004f2e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0c:	881a      	ldrh	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f18:	1c9a      	adds	r2, r3, #2
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	3b02      	subs	r3, #2
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f2c:	e025      	b.n	8004f7a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	330c      	adds	r3, #12
 8004f38:	7812      	ldrb	r2, [r2, #0]
 8004f3a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f40:	1c5a      	adds	r2, r3, #1
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f54:	e011      	b.n	8004f7a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f56:	f7fc fdb1 	bl	8001abc <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d803      	bhi.n	8004f6e <HAL_SPI_Transmit+0x268>
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6c:	d102      	bne.n	8004f74 <HAL_SPI_Transmit+0x26e>
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d102      	bne.n	8004f7a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f78:	e026      	b.n	8004fc8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1b5      	bne.n	8004ef0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	6839      	ldr	r1, [r7, #0]
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 fce3 	bl	8005954 <SPI_EndRxTxTransaction>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d002      	beq.n	8004f9a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2220      	movs	r2, #32
 8004f98:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10a      	bne.n	8004fb8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	613b      	str	r3, [r7, #16]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	613b      	str	r3, [r7, #16]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	613b      	str	r3, [r7, #16]
 8004fb6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d002      	beq.n	8004fc6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	77fb      	strb	r3, [r7, #31]
 8004fc4:	e000      	b.n	8004fc8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004fc6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004fd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3720      	adds	r7, #32
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b088      	sub	sp, #32
 8004fe6:	af02      	add	r7, sp, #8
 8004fe8:	60f8      	str	r0, [r7, #12]
 8004fea:	60b9      	str	r1, [r7, #8]
 8004fec:	603b      	str	r3, [r7, #0]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ffe:	d112      	bne.n	8005026 <HAL_SPI_Receive+0x44>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10e      	bne.n	8005026 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2204      	movs	r2, #4
 800500c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005010:	88fa      	ldrh	r2, [r7, #6]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	4613      	mov	r3, r2
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	68b9      	ldr	r1, [r7, #8]
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 f910 	bl	8005242 <HAL_SPI_TransmitReceive>
 8005022:	4603      	mov	r3, r0
 8005024:	e109      	b.n	800523a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800502c:	2b01      	cmp	r3, #1
 800502e:	d101      	bne.n	8005034 <HAL_SPI_Receive+0x52>
 8005030:	2302      	movs	r3, #2
 8005032:	e102      	b.n	800523a <HAL_SPI_Receive+0x258>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800503c:	f7fc fd3e 	bl	8001abc <HAL_GetTick>
 8005040:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b01      	cmp	r3, #1
 800504c:	d002      	beq.n	8005054 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800504e:	2302      	movs	r3, #2
 8005050:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005052:	e0e9      	b.n	8005228 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <HAL_SPI_Receive+0x7e>
 800505a:	88fb      	ldrh	r3, [r7, #6]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d102      	bne.n	8005066 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005064:	e0e0      	b.n	8005228 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2204      	movs	r2, #4
 800506a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	88fa      	ldrh	r2, [r7, #6]
 800507e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	88fa      	ldrh	r2, [r7, #6]
 8005086:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050b0:	d908      	bls.n	80050c4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050c0:	605a      	str	r2, [r3, #4]
 80050c2:	e007      	b.n	80050d4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050d2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050dc:	d10f      	bne.n	80050fe <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80050fc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005108:	2b40      	cmp	r3, #64	; 0x40
 800510a:	d007      	beq.n	800511c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800511a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005124:	d867      	bhi.n	80051f6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005126:	e030      	b.n	800518a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b01      	cmp	r3, #1
 8005134:	d117      	bne.n	8005166 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f103 020c 	add.w	r2, r3, #12
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	7812      	ldrb	r2, [r2, #0]
 8005144:	b2d2      	uxtb	r2, r2
 8005146:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514c:	1c5a      	adds	r2, r3, #1
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005158:	b29b      	uxth	r3, r3
 800515a:	3b01      	subs	r3, #1
 800515c:	b29a      	uxth	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005164:	e011      	b.n	800518a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005166:	f7fc fca9 	bl	8001abc <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d803      	bhi.n	800517e <HAL_SPI_Receive+0x19c>
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517c:	d102      	bne.n	8005184 <HAL_SPI_Receive+0x1a2>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d102      	bne.n	800518a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005188:	e04e      	b.n	8005228 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005190:	b29b      	uxth	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1c8      	bne.n	8005128 <HAL_SPI_Receive+0x146>
 8005196:	e034      	b.n	8005202 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d115      	bne.n	80051d2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68da      	ldr	r2, [r3, #12]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b0:	b292      	uxth	r2, r2
 80051b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b8:	1c9a      	adds	r2, r3, #2
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	3b01      	subs	r3, #1
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80051d0:	e011      	b.n	80051f6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051d2:	f7fc fc73 	bl	8001abc <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d803      	bhi.n	80051ea <HAL_SPI_Receive+0x208>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e8:	d102      	bne.n	80051f0 <HAL_SPI_Receive+0x20e>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d102      	bne.n	80051f6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80051f4:	e018      	b.n	8005228 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1ca      	bne.n	8005198 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	6839      	ldr	r1, [r7, #0]
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f000 fb4c 	bl	80058a4 <SPI_EndRxTransaction>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d002      	beq.n	8005218 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2220      	movs	r2, #32
 8005216:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800521c:	2b00      	cmp	r3, #0
 800521e:	d002      	beq.n	8005226 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	75fb      	strb	r3, [r7, #23]
 8005224:	e000      	b.n	8005228 <HAL_SPI_Receive+0x246>
  }

error :
 8005226:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005238:	7dfb      	ldrb	r3, [r7, #23]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3718      	adds	r7, #24
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b08a      	sub	sp, #40	; 0x28
 8005246:	af00      	add	r7, sp, #0
 8005248:	60f8      	str	r0, [r7, #12]
 800524a:	60b9      	str	r1, [r7, #8]
 800524c:	607a      	str	r2, [r7, #4]
 800524e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005250:	2301      	movs	r3, #1
 8005252:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005254:	2300      	movs	r3, #0
 8005256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005260:	2b01      	cmp	r3, #1
 8005262:	d101      	bne.n	8005268 <HAL_SPI_TransmitReceive+0x26>
 8005264:	2302      	movs	r3, #2
 8005266:	e1fb      	b.n	8005660 <HAL_SPI_TransmitReceive+0x41e>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005270:	f7fc fc24 	bl	8001abc <HAL_GetTick>
 8005274:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800527c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005284:	887b      	ldrh	r3, [r7, #2]
 8005286:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005288:	887b      	ldrh	r3, [r7, #2]
 800528a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800528c:	7efb      	ldrb	r3, [r7, #27]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d00e      	beq.n	80052b0 <HAL_SPI_TransmitReceive+0x6e>
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005298:	d106      	bne.n	80052a8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d102      	bne.n	80052a8 <HAL_SPI_TransmitReceive+0x66>
 80052a2:	7efb      	ldrb	r3, [r7, #27]
 80052a4:	2b04      	cmp	r3, #4
 80052a6:	d003      	beq.n	80052b0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80052a8:	2302      	movs	r3, #2
 80052aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80052ae:	e1cd      	b.n	800564c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d005      	beq.n	80052c2 <HAL_SPI_TransmitReceive+0x80>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d002      	beq.n	80052c2 <HAL_SPI_TransmitReceive+0x80>
 80052bc:	887b      	ldrh	r3, [r7, #2]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d103      	bne.n	80052ca <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80052c8:	e1c0      	b.n	800564c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	d003      	beq.n	80052de <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2205      	movs	r2, #5
 80052da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	887a      	ldrh	r2, [r7, #2]
 80052ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	887a      	ldrh	r2, [r7, #2]
 80052f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	887a      	ldrh	r2, [r7, #2]
 8005304:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	887a      	ldrh	r2, [r7, #2]
 800530a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005320:	d802      	bhi.n	8005328 <HAL_SPI_TransmitReceive+0xe6>
 8005322:	8a3b      	ldrh	r3, [r7, #16]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d908      	bls.n	800533a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005336:	605a      	str	r2, [r3, #4]
 8005338:	e007      	b.n	800534a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005348:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005354:	2b40      	cmp	r3, #64	; 0x40
 8005356:	d007      	beq.n	8005368 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005366:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005370:	d97c      	bls.n	800546c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d002      	beq.n	8005380 <HAL_SPI_TransmitReceive+0x13e>
 800537a:	8a7b      	ldrh	r3, [r7, #18]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d169      	bne.n	8005454 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005384:	881a      	ldrh	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005390:	1c9a      	adds	r2, r3, #2
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800539a:	b29b      	uxth	r3, r3
 800539c:	3b01      	subs	r3, #1
 800539e:	b29a      	uxth	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053a4:	e056      	b.n	8005454 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d11b      	bne.n	80053ec <HAL_SPI_TransmitReceive+0x1aa>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d016      	beq.n	80053ec <HAL_SPI_TransmitReceive+0x1aa>
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d113      	bne.n	80053ec <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c8:	881a      	ldrh	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d4:	1c9a      	adds	r2, r3, #2
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053de:	b29b      	uxth	r3, r3
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053e8:	2300      	movs	r3, #0
 80053ea:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d11c      	bne.n	8005434 <HAL_SPI_TransmitReceive+0x1f2>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005400:	b29b      	uxth	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d016      	beq.n	8005434 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68da      	ldr	r2, [r3, #12]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005410:	b292      	uxth	r2, r2
 8005412:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005418:	1c9a      	adds	r2, r3, #2
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005424:	b29b      	uxth	r3, r3
 8005426:	3b01      	subs	r3, #1
 8005428:	b29a      	uxth	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005430:	2301      	movs	r3, #1
 8005432:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005434:	f7fc fb42 	bl	8001abc <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005440:	429a      	cmp	r2, r3
 8005442:	d807      	bhi.n	8005454 <HAL_SPI_TransmitReceive+0x212>
 8005444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544a:	d003      	beq.n	8005454 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005452:	e0fb      	b.n	800564c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005458:	b29b      	uxth	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1a3      	bne.n	80053a6 <HAL_SPI_TransmitReceive+0x164>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005464:	b29b      	uxth	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d19d      	bne.n	80053a6 <HAL_SPI_TransmitReceive+0x164>
 800546a:	e0df      	b.n	800562c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d003      	beq.n	800547c <HAL_SPI_TransmitReceive+0x23a>
 8005474:	8a7b      	ldrh	r3, [r7, #18]
 8005476:	2b01      	cmp	r3, #1
 8005478:	f040 80cb 	bne.w	8005612 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005480:	b29b      	uxth	r3, r3
 8005482:	2b01      	cmp	r3, #1
 8005484:	d912      	bls.n	80054ac <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548a:	881a      	ldrh	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005496:	1c9a      	adds	r2, r3, #2
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	3b02      	subs	r3, #2
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054aa:	e0b2      	b.n	8005612 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	330c      	adds	r3, #12
 80054b6:	7812      	ldrb	r2, [r2, #0]
 80054b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054be:	1c5a      	adds	r2, r3, #1
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	3b01      	subs	r3, #1
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054d2:	e09e      	b.n	8005612 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d134      	bne.n	800554c <HAL_SPI_TransmitReceive+0x30a>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d02f      	beq.n	800554c <HAL_SPI_TransmitReceive+0x30a>
 80054ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d12c      	bne.n	800554c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d912      	bls.n	8005522 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005500:	881a      	ldrh	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550c:	1c9a      	adds	r2, r3, #2
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005516:	b29b      	uxth	r3, r3
 8005518:	3b02      	subs	r3, #2
 800551a:	b29a      	uxth	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005520:	e012      	b.n	8005548 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	330c      	adds	r3, #12
 800552c:	7812      	ldrb	r2, [r2, #0]
 800552e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005534:	1c5a      	adds	r2, r3, #1
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800553e:	b29b      	uxth	r3, r3
 8005540:	3b01      	subs	r3, #1
 8005542:	b29a      	uxth	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005548:	2300      	movs	r3, #0
 800554a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b01      	cmp	r3, #1
 8005558:	d148      	bne.n	80055ec <HAL_SPI_TransmitReceive+0x3aa>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005560:	b29b      	uxth	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d042      	beq.n	80055ec <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800556c:	b29b      	uxth	r3, r3
 800556e:	2b01      	cmp	r3, #1
 8005570:	d923      	bls.n	80055ba <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68da      	ldr	r2, [r3, #12]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557c:	b292      	uxth	r2, r2
 800557e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005584:	1c9a      	adds	r2, r3, #2
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005590:	b29b      	uxth	r3, r3
 8005592:	3b02      	subs	r3, #2
 8005594:	b29a      	uxth	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d81f      	bhi.n	80055e8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055b6:	605a      	str	r2, [r3, #4]
 80055b8:	e016      	b.n	80055e8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f103 020c 	add.w	r2, r3, #12
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c6:	7812      	ldrb	r2, [r2, #0]
 80055c8:	b2d2      	uxtb	r2, r2
 80055ca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d0:	1c5a      	adds	r2, r3, #1
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055dc:	b29b      	uxth	r3, r3
 80055de:	3b01      	subs	r3, #1
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055e8:	2301      	movs	r3, #1
 80055ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80055ec:	f7fc fa66 	bl	8001abc <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d803      	bhi.n	8005604 <HAL_SPI_TransmitReceive+0x3c2>
 80055fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005602:	d102      	bne.n	800560a <HAL_SPI_TransmitReceive+0x3c8>
 8005604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005606:	2b00      	cmp	r3, #0
 8005608:	d103      	bne.n	8005612 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005610:	e01c      	b.n	800564c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005616:	b29b      	uxth	r3, r3
 8005618:	2b00      	cmp	r3, #0
 800561a:	f47f af5b 	bne.w	80054d4 <HAL_SPI_TransmitReceive+0x292>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005624:	b29b      	uxth	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	f47f af54 	bne.w	80054d4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800562c:	69fa      	ldr	r2, [r7, #28]
 800562e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f000 f98f 	bl	8005954 <SPI_EndRxTxTransaction>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d006      	beq.n	800564a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2220      	movs	r2, #32
 8005646:	661a      	str	r2, [r3, #96]	; 0x60
 8005648:	e000      	b.n	800564c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800564a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800565c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005660:	4618      	mov	r0, r3
 8005662:	3728      	adds	r7, #40	; 0x28
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b088      	sub	sp, #32
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	603b      	str	r3, [r7, #0]
 8005674:	4613      	mov	r3, r2
 8005676:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005678:	f7fc fa20 	bl	8001abc <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005680:	1a9b      	subs	r3, r3, r2
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	4413      	add	r3, r2
 8005686:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005688:	f7fc fa18 	bl	8001abc <HAL_GetTick>
 800568c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800568e:	4b39      	ldr	r3, [pc, #228]	; (8005774 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	015b      	lsls	r3, r3, #5
 8005694:	0d1b      	lsrs	r3, r3, #20
 8005696:	69fa      	ldr	r2, [r7, #28]
 8005698:	fb02 f303 	mul.w	r3, r2, r3
 800569c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800569e:	e054      	b.n	800574a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a6:	d050      	beq.n	800574a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056a8:	f7fc fa08 	bl	8001abc <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	69fa      	ldr	r2, [r7, #28]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d902      	bls.n	80056be <SPI_WaitFlagStateUntilTimeout+0x56>
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d13d      	bne.n	800573a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056d6:	d111      	bne.n	80056fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056e0:	d004      	beq.n	80056ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ea:	d107      	bne.n	80056fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005704:	d10f      	bne.n	8005726 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005714:	601a      	str	r2, [r3, #0]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005724:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e017      	b.n	800576a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005740:	2300      	movs	r3, #0
 8005742:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	3b01      	subs	r3, #1
 8005748:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	4013      	ands	r3, r2
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	429a      	cmp	r2, r3
 8005758:	bf0c      	ite	eq
 800575a:	2301      	moveq	r3, #1
 800575c:	2300      	movne	r3, #0
 800575e:	b2db      	uxtb	r3, r3
 8005760:	461a      	mov	r2, r3
 8005762:	79fb      	ldrb	r3, [r7, #7]
 8005764:	429a      	cmp	r2, r3
 8005766:	d19b      	bne.n	80056a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3720      	adds	r7, #32
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	20000000 	.word	0x20000000

08005778 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b08a      	sub	sp, #40	; 0x28
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
 8005784:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005786:	2300      	movs	r3, #0
 8005788:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800578a:	f7fc f997 	bl	8001abc <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005792:	1a9b      	subs	r3, r3, r2
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	4413      	add	r3, r2
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800579a:	f7fc f98f 	bl	8001abc <HAL_GetTick>
 800579e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	330c      	adds	r3, #12
 80057a6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80057a8:	4b3d      	ldr	r3, [pc, #244]	; (80058a0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	4613      	mov	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	00da      	lsls	r2, r3, #3
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	0d1b      	lsrs	r3, r3, #20
 80057b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ba:	fb02 f303 	mul.w	r3, r2, r3
 80057be:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80057c0:	e060      	b.n	8005884 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80057c8:	d107      	bne.n	80057da <SPI_WaitFifoStateUntilTimeout+0x62>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d104      	bne.n	80057da <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80057d8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e0:	d050      	beq.n	8005884 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057e2:	f7fc f96b 	bl	8001abc <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	6a3b      	ldr	r3, [r7, #32]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d902      	bls.n	80057f8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d13d      	bne.n	8005874 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005806:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005810:	d111      	bne.n	8005836 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800581a:	d004      	beq.n	8005826 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005824:	d107      	bne.n	8005836 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005834:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800583e:	d10f      	bne.n	8005860 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800585e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e010      	b.n	8005896 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800587a:	2300      	movs	r3, #0
 800587c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	3b01      	subs	r3, #1
 8005882:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689a      	ldr	r2, [r3, #8]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	4013      	ands	r3, r2
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	429a      	cmp	r2, r3
 8005892:	d196      	bne.n	80057c2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3728      	adds	r7, #40	; 0x28
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	20000000 	.word	0x20000000

080058a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b086      	sub	sp, #24
 80058a8:	af02      	add	r7, sp, #8
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058b8:	d111      	bne.n	80058de <SPI_EndRxTransaction+0x3a>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058c2:	d004      	beq.n	80058ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058cc:	d107      	bne.n	80058de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058dc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	2200      	movs	r2, #0
 80058e6:	2180      	movs	r1, #128	; 0x80
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f7ff febd 	bl	8005668 <SPI_WaitFlagStateUntilTimeout>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d007      	beq.n	8005904 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058f8:	f043 0220 	orr.w	r2, r3, #32
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e023      	b.n	800594c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800590c:	d11d      	bne.n	800594a <SPI_EndRxTransaction+0xa6>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005916:	d004      	beq.n	8005922 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005920:	d113      	bne.n	800594a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2200      	movs	r2, #0
 800592a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f7ff ff22 	bl	8005778 <SPI_WaitFifoStateUntilTimeout>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d007      	beq.n	800594a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800593e:	f043 0220 	orr.w	r2, r3, #32
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e000      	b.n	800594c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af02      	add	r7, sp, #8
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	2200      	movs	r2, #0
 8005968:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f7ff ff03 	bl	8005778 <SPI_WaitFifoStateUntilTimeout>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d007      	beq.n	8005988 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800597c:	f043 0220 	orr.w	r2, r3, #32
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e027      	b.n	80059d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	9300      	str	r3, [sp, #0]
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2200      	movs	r2, #0
 8005990:	2180      	movs	r1, #128	; 0x80
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f7ff fe68 	bl	8005668 <SPI_WaitFlagStateUntilTimeout>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d007      	beq.n	80059ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a2:	f043 0220 	orr.w	r2, r3, #32
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e014      	b.n	80059d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f7ff fedc 	bl	8005778 <SPI_WaitFifoStateUntilTimeout>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d007      	beq.n	80059d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ca:	f043 0220 	orr.w	r2, r3, #32
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e000      	b.n	80059d8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e049      	b.n	8005a86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d106      	bne.n	8005a0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7fb fe20 	bl	800164c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	3304      	adds	r3, #4
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	4610      	mov	r0, r2
 8005a20:	f000 fb6c 	bl	80060fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
	...

08005a90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d001      	beq.n	8005aa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e054      	b.n	8005b52 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68da      	ldr	r2, [r3, #12]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f042 0201 	orr.w	r2, r2, #1
 8005abe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a26      	ldr	r2, [pc, #152]	; (8005b60 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d022      	beq.n	8005b10 <HAL_TIM_Base_Start_IT+0x80>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad2:	d01d      	beq.n	8005b10 <HAL_TIM_Base_Start_IT+0x80>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a22      	ldr	r2, [pc, #136]	; (8005b64 <HAL_TIM_Base_Start_IT+0xd4>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d018      	beq.n	8005b10 <HAL_TIM_Base_Start_IT+0x80>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a21      	ldr	r2, [pc, #132]	; (8005b68 <HAL_TIM_Base_Start_IT+0xd8>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d013      	beq.n	8005b10 <HAL_TIM_Base_Start_IT+0x80>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a1f      	ldr	r2, [pc, #124]	; (8005b6c <HAL_TIM_Base_Start_IT+0xdc>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d00e      	beq.n	8005b10 <HAL_TIM_Base_Start_IT+0x80>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a1e      	ldr	r2, [pc, #120]	; (8005b70 <HAL_TIM_Base_Start_IT+0xe0>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d009      	beq.n	8005b10 <HAL_TIM_Base_Start_IT+0x80>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a1c      	ldr	r2, [pc, #112]	; (8005b74 <HAL_TIM_Base_Start_IT+0xe4>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d004      	beq.n	8005b10 <HAL_TIM_Base_Start_IT+0x80>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a1b      	ldr	r2, [pc, #108]	; (8005b78 <HAL_TIM_Base_Start_IT+0xe8>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d115      	bne.n	8005b3c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689a      	ldr	r2, [r3, #8]
 8005b16:	4b19      	ldr	r3, [pc, #100]	; (8005b7c <HAL_TIM_Base_Start_IT+0xec>)
 8005b18:	4013      	ands	r3, r2
 8005b1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2b06      	cmp	r3, #6
 8005b20:	d015      	beq.n	8005b4e <HAL_TIM_Base_Start_IT+0xbe>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b28:	d011      	beq.n	8005b4e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f042 0201 	orr.w	r2, r2, #1
 8005b38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b3a:	e008      	b.n	8005b4e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0201 	orr.w	r2, r2, #1
 8005b4a:	601a      	str	r2, [r3, #0]
 8005b4c:	e000      	b.n	8005b50 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	40012c00 	.word	0x40012c00
 8005b64:	40000400 	.word	0x40000400
 8005b68:	40000800 	.word	0x40000800
 8005b6c:	40000c00 	.word	0x40000c00
 8005b70:	40013400 	.word	0x40013400
 8005b74:	40014000 	.word	0x40014000
 8005b78:	40015000 	.word	0x40015000
 8005b7c:	00010007 	.word	0x00010007

08005b80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d122      	bne.n	8005bdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d11b      	bne.n	8005bdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f06f 0202 	mvn.w	r2, #2
 8005bac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	f003 0303 	and.w	r3, r3, #3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fa7c 	bl	80060c0 <HAL_TIM_IC_CaptureCallback>
 8005bc8:	e005      	b.n	8005bd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 fa6e 	bl	80060ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 fa7f 	bl	80060d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	f003 0304 	and.w	r3, r3, #4
 8005be6:	2b04      	cmp	r3, #4
 8005be8:	d122      	bne.n	8005c30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f003 0304 	and.w	r3, r3, #4
 8005bf4:	2b04      	cmp	r3, #4
 8005bf6:	d11b      	bne.n	8005c30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f06f 0204 	mvn.w	r2, #4
 8005c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2202      	movs	r2, #2
 8005c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 fa52 	bl	80060c0 <HAL_TIM_IC_CaptureCallback>
 8005c1c:	e005      	b.n	8005c2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 fa44 	bl	80060ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 fa55 	bl	80060d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	f003 0308 	and.w	r3, r3, #8
 8005c3a:	2b08      	cmp	r3, #8
 8005c3c:	d122      	bne.n	8005c84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	f003 0308 	and.w	r3, r3, #8
 8005c48:	2b08      	cmp	r3, #8
 8005c4a:	d11b      	bne.n	8005c84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f06f 0208 	mvn.w	r2, #8
 8005c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2204      	movs	r2, #4
 8005c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	f003 0303 	and.w	r3, r3, #3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d003      	beq.n	8005c72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 fa28 	bl	80060c0 <HAL_TIM_IC_CaptureCallback>
 8005c70:	e005      	b.n	8005c7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 fa1a 	bl	80060ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 fa2b 	bl	80060d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	f003 0310 	and.w	r3, r3, #16
 8005c8e:	2b10      	cmp	r3, #16
 8005c90:	d122      	bne.n	8005cd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	f003 0310 	and.w	r3, r3, #16
 8005c9c:	2b10      	cmp	r3, #16
 8005c9e:	d11b      	bne.n	8005cd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f06f 0210 	mvn.w	r2, #16
 8005ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2208      	movs	r2, #8
 8005cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f9fe 	bl	80060c0 <HAL_TIM_IC_CaptureCallback>
 8005cc4:	e005      	b.n	8005cd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f9f0 	bl	80060ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 fa01 	bl	80060d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d10e      	bne.n	8005d04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	f003 0301 	and.w	r3, r3, #1
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d107      	bne.n	8005d04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f06f 0201 	mvn.w	r2, #1
 8005cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7fb fa12 	bl	8001128 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d0e:	2b80      	cmp	r3, #128	; 0x80
 8005d10:	d10e      	bne.n	8005d30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d1c:	2b80      	cmp	r3, #128	; 0x80
 8005d1e:	d107      	bne.n	8005d30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 fbca 	bl	80064c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d3e:	d10e      	bne.n	8005d5e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d4a:	2b80      	cmp	r3, #128	; 0x80
 8005d4c:	d107      	bne.n	8005d5e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 fbbd 	bl	80064d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d68:	2b40      	cmp	r3, #64	; 0x40
 8005d6a:	d10e      	bne.n	8005d8a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d76:	2b40      	cmp	r3, #64	; 0x40
 8005d78:	d107      	bne.n	8005d8a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 f9af 	bl	80060e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	f003 0320 	and.w	r3, r3, #32
 8005d94:	2b20      	cmp	r3, #32
 8005d96:	d10e      	bne.n	8005db6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	f003 0320 	and.w	r3, r3, #32
 8005da2:	2b20      	cmp	r3, #32
 8005da4:	d107      	bne.n	8005db6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f06f 0220 	mvn.w	r2, #32
 8005dae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 fb7d 	bl	80064b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dc4:	d10f      	bne.n	8005de6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dd4:	d107      	bne.n	8005de6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005dde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 fb83 	bl	80064ec <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005df0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005df4:	d10f      	bne.n	8005e16 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e04:	d107      	bne.n	8005e16 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 fb75 	bl	8006500 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e24:	d10f      	bne.n	8005e46 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e34:	d107      	bne.n	8005e46 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 fb67 	bl	8006514 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e54:	d10f      	bne.n	8005e76 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e64:	d107      	bne.n	8005e76 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005e6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 fb59 	bl	8006528 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e76:	bf00      	nop
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
	...

08005e80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d101      	bne.n	8005e9c <HAL_TIM_ConfigClockSource+0x1c>
 8005e98:	2302      	movs	r3, #2
 8005e9a:	e0f6      	b.n	800608a <HAL_TIM_ConfigClockSource+0x20a>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005eba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ebe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ec6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a6f      	ldr	r2, [pc, #444]	; (8006094 <HAL_TIM_ConfigClockSource+0x214>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	f000 80c1 	beq.w	800605e <HAL_TIM_ConfigClockSource+0x1de>
 8005edc:	4a6d      	ldr	r2, [pc, #436]	; (8006094 <HAL_TIM_ConfigClockSource+0x214>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	f200 80c6 	bhi.w	8006070 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ee4:	4a6c      	ldr	r2, [pc, #432]	; (8006098 <HAL_TIM_ConfigClockSource+0x218>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	f000 80b9 	beq.w	800605e <HAL_TIM_ConfigClockSource+0x1de>
 8005eec:	4a6a      	ldr	r2, [pc, #424]	; (8006098 <HAL_TIM_ConfigClockSource+0x218>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	f200 80be 	bhi.w	8006070 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ef4:	4a69      	ldr	r2, [pc, #420]	; (800609c <HAL_TIM_ConfigClockSource+0x21c>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	f000 80b1 	beq.w	800605e <HAL_TIM_ConfigClockSource+0x1de>
 8005efc:	4a67      	ldr	r2, [pc, #412]	; (800609c <HAL_TIM_ConfigClockSource+0x21c>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	f200 80b6 	bhi.w	8006070 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f04:	4a66      	ldr	r2, [pc, #408]	; (80060a0 <HAL_TIM_ConfigClockSource+0x220>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	f000 80a9 	beq.w	800605e <HAL_TIM_ConfigClockSource+0x1de>
 8005f0c:	4a64      	ldr	r2, [pc, #400]	; (80060a0 <HAL_TIM_ConfigClockSource+0x220>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	f200 80ae 	bhi.w	8006070 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f14:	4a63      	ldr	r2, [pc, #396]	; (80060a4 <HAL_TIM_ConfigClockSource+0x224>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	f000 80a1 	beq.w	800605e <HAL_TIM_ConfigClockSource+0x1de>
 8005f1c:	4a61      	ldr	r2, [pc, #388]	; (80060a4 <HAL_TIM_ConfigClockSource+0x224>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	f200 80a6 	bhi.w	8006070 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f24:	4a60      	ldr	r2, [pc, #384]	; (80060a8 <HAL_TIM_ConfigClockSource+0x228>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	f000 8099 	beq.w	800605e <HAL_TIM_ConfigClockSource+0x1de>
 8005f2c:	4a5e      	ldr	r2, [pc, #376]	; (80060a8 <HAL_TIM_ConfigClockSource+0x228>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	f200 809e 	bhi.w	8006070 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f34:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005f38:	f000 8091 	beq.w	800605e <HAL_TIM_ConfigClockSource+0x1de>
 8005f3c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005f40:	f200 8096 	bhi.w	8006070 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f48:	f000 8089 	beq.w	800605e <HAL_TIM_ConfigClockSource+0x1de>
 8005f4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f50:	f200 808e 	bhi.w	8006070 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f58:	d03e      	beq.n	8005fd8 <HAL_TIM_ConfigClockSource+0x158>
 8005f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f5e:	f200 8087 	bhi.w	8006070 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f66:	f000 8086 	beq.w	8006076 <HAL_TIM_ConfigClockSource+0x1f6>
 8005f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f6e:	d87f      	bhi.n	8006070 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f70:	2b70      	cmp	r3, #112	; 0x70
 8005f72:	d01a      	beq.n	8005faa <HAL_TIM_ConfigClockSource+0x12a>
 8005f74:	2b70      	cmp	r3, #112	; 0x70
 8005f76:	d87b      	bhi.n	8006070 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f78:	2b60      	cmp	r3, #96	; 0x60
 8005f7a:	d050      	beq.n	800601e <HAL_TIM_ConfigClockSource+0x19e>
 8005f7c:	2b60      	cmp	r3, #96	; 0x60
 8005f7e:	d877      	bhi.n	8006070 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f80:	2b50      	cmp	r3, #80	; 0x50
 8005f82:	d03c      	beq.n	8005ffe <HAL_TIM_ConfigClockSource+0x17e>
 8005f84:	2b50      	cmp	r3, #80	; 0x50
 8005f86:	d873      	bhi.n	8006070 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f88:	2b40      	cmp	r3, #64	; 0x40
 8005f8a:	d058      	beq.n	800603e <HAL_TIM_ConfigClockSource+0x1be>
 8005f8c:	2b40      	cmp	r3, #64	; 0x40
 8005f8e:	d86f      	bhi.n	8006070 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f90:	2b30      	cmp	r3, #48	; 0x30
 8005f92:	d064      	beq.n	800605e <HAL_TIM_ConfigClockSource+0x1de>
 8005f94:	2b30      	cmp	r3, #48	; 0x30
 8005f96:	d86b      	bhi.n	8006070 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f98:	2b20      	cmp	r3, #32
 8005f9a:	d060      	beq.n	800605e <HAL_TIM_ConfigClockSource+0x1de>
 8005f9c:	2b20      	cmp	r3, #32
 8005f9e:	d867      	bhi.n	8006070 <HAL_TIM_ConfigClockSource+0x1f0>
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d05c      	beq.n	800605e <HAL_TIM_ConfigClockSource+0x1de>
 8005fa4:	2b10      	cmp	r3, #16
 8005fa6:	d05a      	beq.n	800605e <HAL_TIM_ConfigClockSource+0x1de>
 8005fa8:	e062      	b.n	8006070 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6818      	ldr	r0, [r3, #0]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	6899      	ldr	r1, [r3, #8]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f000 f9c3 	bl	8006344 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	609a      	str	r2, [r3, #8]
      break;
 8005fd6:	e04f      	b.n	8006078 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6818      	ldr	r0, [r3, #0]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	6899      	ldr	r1, [r3, #8]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f000 f9ac 	bl	8006344 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	689a      	ldr	r2, [r3, #8]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ffa:	609a      	str	r2, [r3, #8]
      break;
 8005ffc:	e03c      	b.n	8006078 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6818      	ldr	r0, [r3, #0]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	6859      	ldr	r1, [r3, #4]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	461a      	mov	r2, r3
 800600c:	f000 f91e 	bl	800624c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2150      	movs	r1, #80	; 0x50
 8006016:	4618      	mov	r0, r3
 8006018:	f000 f977 	bl	800630a <TIM_ITRx_SetConfig>
      break;
 800601c:	e02c      	b.n	8006078 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6818      	ldr	r0, [r3, #0]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	6859      	ldr	r1, [r3, #4]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	461a      	mov	r2, r3
 800602c:	f000 f93d 	bl	80062aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2160      	movs	r1, #96	; 0x60
 8006036:	4618      	mov	r0, r3
 8006038:	f000 f967 	bl	800630a <TIM_ITRx_SetConfig>
      break;
 800603c:	e01c      	b.n	8006078 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6818      	ldr	r0, [r3, #0]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	6859      	ldr	r1, [r3, #4]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	461a      	mov	r2, r3
 800604c:	f000 f8fe 	bl	800624c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2140      	movs	r1, #64	; 0x40
 8006056:	4618      	mov	r0, r3
 8006058:	f000 f957 	bl	800630a <TIM_ITRx_SetConfig>
      break;
 800605c:	e00c      	b.n	8006078 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4619      	mov	r1, r3
 8006068:	4610      	mov	r0, r2
 800606a:	f000 f94e 	bl	800630a <TIM_ITRx_SetConfig>
      break;
 800606e:	e003      	b.n	8006078 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	73fb      	strb	r3, [r7, #15]
      break;
 8006074:	e000      	b.n	8006078 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006076:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006088:	7bfb      	ldrb	r3, [r7, #15]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	00100070 	.word	0x00100070
 8006098:	00100060 	.word	0x00100060
 800609c:	00100050 	.word	0x00100050
 80060a0:	00100040 	.word	0x00100040
 80060a4:	00100030 	.word	0x00100030
 80060a8:	00100020 	.word	0x00100020

080060ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a46      	ldr	r2, [pc, #280]	; (8006228 <TIM_Base_SetConfig+0x12c>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d017      	beq.n	8006144 <TIM_Base_SetConfig+0x48>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800611a:	d013      	beq.n	8006144 <TIM_Base_SetConfig+0x48>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a43      	ldr	r2, [pc, #268]	; (800622c <TIM_Base_SetConfig+0x130>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d00f      	beq.n	8006144 <TIM_Base_SetConfig+0x48>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a42      	ldr	r2, [pc, #264]	; (8006230 <TIM_Base_SetConfig+0x134>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d00b      	beq.n	8006144 <TIM_Base_SetConfig+0x48>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a41      	ldr	r2, [pc, #260]	; (8006234 <TIM_Base_SetConfig+0x138>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d007      	beq.n	8006144 <TIM_Base_SetConfig+0x48>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a40      	ldr	r2, [pc, #256]	; (8006238 <TIM_Base_SetConfig+0x13c>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d003      	beq.n	8006144 <TIM_Base_SetConfig+0x48>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a3f      	ldr	r2, [pc, #252]	; (800623c <TIM_Base_SetConfig+0x140>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d108      	bne.n	8006156 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800614a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	4313      	orrs	r3, r2
 8006154:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a33      	ldr	r2, [pc, #204]	; (8006228 <TIM_Base_SetConfig+0x12c>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d023      	beq.n	80061a6 <TIM_Base_SetConfig+0xaa>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006164:	d01f      	beq.n	80061a6 <TIM_Base_SetConfig+0xaa>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a30      	ldr	r2, [pc, #192]	; (800622c <TIM_Base_SetConfig+0x130>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d01b      	beq.n	80061a6 <TIM_Base_SetConfig+0xaa>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a2f      	ldr	r2, [pc, #188]	; (8006230 <TIM_Base_SetConfig+0x134>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d017      	beq.n	80061a6 <TIM_Base_SetConfig+0xaa>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a2e      	ldr	r2, [pc, #184]	; (8006234 <TIM_Base_SetConfig+0x138>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d013      	beq.n	80061a6 <TIM_Base_SetConfig+0xaa>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a2d      	ldr	r2, [pc, #180]	; (8006238 <TIM_Base_SetConfig+0x13c>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d00f      	beq.n	80061a6 <TIM_Base_SetConfig+0xaa>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a2d      	ldr	r2, [pc, #180]	; (8006240 <TIM_Base_SetConfig+0x144>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d00b      	beq.n	80061a6 <TIM_Base_SetConfig+0xaa>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a2c      	ldr	r2, [pc, #176]	; (8006244 <TIM_Base_SetConfig+0x148>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d007      	beq.n	80061a6 <TIM_Base_SetConfig+0xaa>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a2b      	ldr	r2, [pc, #172]	; (8006248 <TIM_Base_SetConfig+0x14c>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d003      	beq.n	80061a6 <TIM_Base_SetConfig+0xaa>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a26      	ldr	r2, [pc, #152]	; (800623c <TIM_Base_SetConfig+0x140>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d108      	bne.n	80061b8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	689a      	ldr	r2, [r3, #8]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a12      	ldr	r2, [pc, #72]	; (8006228 <TIM_Base_SetConfig+0x12c>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d013      	beq.n	800620c <TIM_Base_SetConfig+0x110>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a14      	ldr	r2, [pc, #80]	; (8006238 <TIM_Base_SetConfig+0x13c>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d00f      	beq.n	800620c <TIM_Base_SetConfig+0x110>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a14      	ldr	r2, [pc, #80]	; (8006240 <TIM_Base_SetConfig+0x144>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d00b      	beq.n	800620c <TIM_Base_SetConfig+0x110>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a13      	ldr	r2, [pc, #76]	; (8006244 <TIM_Base_SetConfig+0x148>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d007      	beq.n	800620c <TIM_Base_SetConfig+0x110>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a12      	ldr	r2, [pc, #72]	; (8006248 <TIM_Base_SetConfig+0x14c>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d003      	beq.n	800620c <TIM_Base_SetConfig+0x110>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a0d      	ldr	r2, [pc, #52]	; (800623c <TIM_Base_SetConfig+0x140>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d103      	bne.n	8006214 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	691a      	ldr	r2, [r3, #16]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	615a      	str	r2, [r3, #20]
}
 800621a:	bf00      	nop
 800621c:	3714      	adds	r7, #20
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	40012c00 	.word	0x40012c00
 800622c:	40000400 	.word	0x40000400
 8006230:	40000800 	.word	0x40000800
 8006234:	40000c00 	.word	0x40000c00
 8006238:	40013400 	.word	0x40013400
 800623c:	40015000 	.word	0x40015000
 8006240:	40014000 	.word	0x40014000
 8006244:	40014400 	.word	0x40014400
 8006248:	40014800 	.word	0x40014800

0800624c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6a1b      	ldr	r3, [r3, #32]
 800625c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	f023 0201 	bic.w	r2, r3, #1
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	011b      	lsls	r3, r3, #4
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	4313      	orrs	r3, r2
 8006280:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f023 030a 	bic.w	r3, r3, #10
 8006288:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	4313      	orrs	r3, r2
 8006290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	621a      	str	r2, [r3, #32]
}
 800629e:	bf00      	nop
 80062a0:	371c      	adds	r7, #28
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b087      	sub	sp, #28
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	60f8      	str	r0, [r7, #12]
 80062b2:	60b9      	str	r1, [r7, #8]
 80062b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	f023 0210 	bic.w	r2, r3, #16
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	031b      	lsls	r3, r3, #12
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	4313      	orrs	r3, r2
 80062de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	011b      	lsls	r3, r3, #4
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	621a      	str	r2, [r3, #32]
}
 80062fe:	bf00      	nop
 8006300:	371c      	adds	r7, #28
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800630a:	b480      	push	{r7}
 800630c:	b085      	sub	sp, #20
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
 8006312:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006324:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006326:	683a      	ldr	r2, [r7, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	4313      	orrs	r3, r2
 800632c:	f043 0307 	orr.w	r3, r3, #7
 8006330:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	609a      	str	r2, [r3, #8]
}
 8006338:	bf00      	nop
 800633a:	3714      	adds	r7, #20
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006344:	b480      	push	{r7}
 8006346:	b087      	sub	sp, #28
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
 8006350:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800635e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	021a      	lsls	r2, r3, #8
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	431a      	orrs	r2, r3
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	4313      	orrs	r3, r2
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	4313      	orrs	r3, r2
 8006370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	609a      	str	r2, [r3, #8]
}
 8006378:	bf00      	nop
 800637a:	371c      	adds	r7, #28
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006394:	2b01      	cmp	r3, #1
 8006396:	d101      	bne.n	800639c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006398:	2302      	movs	r3, #2
 800639a:	e074      	b.n	8006486 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2202      	movs	r2, #2
 80063a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a34      	ldr	r2, [pc, #208]	; (8006494 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d009      	beq.n	80063da <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a33      	ldr	r2, [pc, #204]	; (8006498 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d004      	beq.n	80063da <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a31      	ldr	r2, [pc, #196]	; (800649c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d108      	bne.n	80063ec <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80063e0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80063f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	4313      	orrs	r3, r2
 8006400:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a21      	ldr	r2, [pc, #132]	; (8006494 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d022      	beq.n	800645a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800641c:	d01d      	beq.n	800645a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a1f      	ldr	r2, [pc, #124]	; (80064a0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d018      	beq.n	800645a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a1d      	ldr	r2, [pc, #116]	; (80064a4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d013      	beq.n	800645a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a1c      	ldr	r2, [pc, #112]	; (80064a8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d00e      	beq.n	800645a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a15      	ldr	r2, [pc, #84]	; (8006498 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d009      	beq.n	800645a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a18      	ldr	r2, [pc, #96]	; (80064ac <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d004      	beq.n	800645a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a11      	ldr	r2, [pc, #68]	; (800649c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d10c      	bne.n	8006474 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006460:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	4313      	orrs	r3, r2
 800646a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	40012c00 	.word	0x40012c00
 8006498:	40013400 	.word	0x40013400
 800649c:	40015000 	.word	0x40015000
 80064a0:	40000400 	.word	0x40000400
 80064a4:	40000800 	.word	0x40000800
 80064a8:	40000c00 	.word	0x40000c00
 80064ac:	40014000 	.word	0x40014000

080064b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064b8:	bf00      	nop
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e042      	b.n	80065d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006554:	2b00      	cmp	r3, #0
 8006556:	d106      	bne.n	8006566 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f7fa ff67 	bl	8001434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2224      	movs	r2, #36	; 0x24
 800656a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f022 0201 	bic.w	r2, r2, #1
 800657c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f8c2 	bl	8006708 <UART_SetConfig>
 8006584:	4603      	mov	r3, r0
 8006586:	2b01      	cmp	r3, #1
 8006588:	d101      	bne.n	800658e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e022      	b.n	80065d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006592:	2b00      	cmp	r3, #0
 8006594:	d002      	beq.n	800659c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 fbb2 	bl	8006d00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685a      	ldr	r2, [r3, #4]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689a      	ldr	r2, [r3, #8]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f042 0201 	orr.w	r2, r2, #1
 80065ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fc39 	bl	8006e44 <UART_CheckIdleState>
 80065d2:	4603      	mov	r3, r0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3708      	adds	r7, #8
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b08a      	sub	sp, #40	; 0x28
 80065e0:	af02      	add	r7, sp, #8
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	603b      	str	r3, [r7, #0]
 80065e8:	4613      	mov	r3, r2
 80065ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065f2:	2b20      	cmp	r3, #32
 80065f4:	f040 8083 	bne.w	80066fe <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d002      	beq.n	8006604 <HAL_UART_Transmit+0x28>
 80065fe:	88fb      	ldrh	r3, [r7, #6]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d101      	bne.n	8006608 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e07b      	b.n	8006700 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800660e:	2b01      	cmp	r3, #1
 8006610:	d101      	bne.n	8006616 <HAL_UART_Transmit+0x3a>
 8006612:	2302      	movs	r3, #2
 8006614:	e074      	b.n	8006700 <HAL_UART_Transmit+0x124>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2201      	movs	r2, #1
 800661a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2221      	movs	r2, #33	; 0x21
 800662a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800662e:	f7fb fa45 	bl	8001abc <HAL_GetTick>
 8006632:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	88fa      	ldrh	r2, [r7, #6]
 8006638:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	88fa      	ldrh	r2, [r7, #6]
 8006640:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800664c:	d108      	bne.n	8006660 <HAL_UART_Transmit+0x84>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d104      	bne.n	8006660 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006656:	2300      	movs	r3, #0
 8006658:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	61bb      	str	r3, [r7, #24]
 800665e:	e003      	b.n	8006668 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006664:	2300      	movs	r3, #0
 8006666:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006670:	e02c      	b.n	80066cc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	2200      	movs	r2, #0
 800667a:	2180      	movs	r1, #128	; 0x80
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f000 fc2c 	bl	8006eda <UART_WaitOnFlagUntilTimeout>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d001      	beq.n	800668c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e039      	b.n	8006700 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10b      	bne.n	80066aa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	881b      	ldrh	r3, [r3, #0]
 8006696:	461a      	mov	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	3302      	adds	r3, #2
 80066a6:	61bb      	str	r3, [r7, #24]
 80066a8:	e007      	b.n	80066ba <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	781a      	ldrb	r2, [r3, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	3301      	adds	r3, #1
 80066b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	3b01      	subs	r3, #1
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1cc      	bne.n	8006672 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	9300      	str	r3, [sp, #0]
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	2200      	movs	r2, #0
 80066e0:	2140      	movs	r1, #64	; 0x40
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f000 fbf9 	bl	8006eda <UART_WaitOnFlagUntilTimeout>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d001      	beq.n	80066f2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	e006      	b.n	8006700 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2220      	movs	r2, #32
 80066f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80066fa:	2300      	movs	r3, #0
 80066fc:	e000      	b.n	8006700 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80066fe:	2302      	movs	r3, #2
  }
}
 8006700:	4618      	mov	r0, r3
 8006702:	3720      	adds	r7, #32
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006708:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800670c:	b08c      	sub	sp, #48	; 0x30
 800670e:	af00      	add	r7, sp, #0
 8006710:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006712:	2300      	movs	r3, #0
 8006714:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	689a      	ldr	r2, [r3, #8]
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	431a      	orrs	r2, r3
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	431a      	orrs	r2, r3
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	69db      	ldr	r3, [r3, #28]
 800672c:	4313      	orrs	r3, r2
 800672e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	4baa      	ldr	r3, [pc, #680]	; (80069e0 <UART_SetConfig+0x2d8>)
 8006738:	4013      	ands	r3, r2
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	6812      	ldr	r2, [r2, #0]
 800673e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006740:	430b      	orrs	r3, r1
 8006742:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	68da      	ldr	r2, [r3, #12]
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	430a      	orrs	r2, r1
 8006758:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a9f      	ldr	r2, [pc, #636]	; (80069e4 <UART_SetConfig+0x2dc>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d004      	beq.n	8006774 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006770:	4313      	orrs	r3, r2
 8006772:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800677e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	6812      	ldr	r2, [r2, #0]
 8006786:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006788:	430b      	orrs	r3, r1
 800678a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006792:	f023 010f 	bic.w	r1, r3, #15
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	430a      	orrs	r2, r1
 80067a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a90      	ldr	r2, [pc, #576]	; (80069e8 <UART_SetConfig+0x2e0>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d125      	bne.n	80067f8 <UART_SetConfig+0xf0>
 80067ac:	4b8f      	ldr	r3, [pc, #572]	; (80069ec <UART_SetConfig+0x2e4>)
 80067ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b2:	f003 0303 	and.w	r3, r3, #3
 80067b6:	2b03      	cmp	r3, #3
 80067b8:	d81a      	bhi.n	80067f0 <UART_SetConfig+0xe8>
 80067ba:	a201      	add	r2, pc, #4	; (adr r2, 80067c0 <UART_SetConfig+0xb8>)
 80067bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c0:	080067d1 	.word	0x080067d1
 80067c4:	080067e1 	.word	0x080067e1
 80067c8:	080067d9 	.word	0x080067d9
 80067cc:	080067e9 	.word	0x080067e9
 80067d0:	2301      	movs	r3, #1
 80067d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067d6:	e116      	b.n	8006a06 <UART_SetConfig+0x2fe>
 80067d8:	2302      	movs	r3, #2
 80067da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067de:	e112      	b.n	8006a06 <UART_SetConfig+0x2fe>
 80067e0:	2304      	movs	r3, #4
 80067e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067e6:	e10e      	b.n	8006a06 <UART_SetConfig+0x2fe>
 80067e8:	2308      	movs	r3, #8
 80067ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067ee:	e10a      	b.n	8006a06 <UART_SetConfig+0x2fe>
 80067f0:	2310      	movs	r3, #16
 80067f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067f6:	e106      	b.n	8006a06 <UART_SetConfig+0x2fe>
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a7c      	ldr	r2, [pc, #496]	; (80069f0 <UART_SetConfig+0x2e8>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d138      	bne.n	8006874 <UART_SetConfig+0x16c>
 8006802:	4b7a      	ldr	r3, [pc, #488]	; (80069ec <UART_SetConfig+0x2e4>)
 8006804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006808:	f003 030c 	and.w	r3, r3, #12
 800680c:	2b0c      	cmp	r3, #12
 800680e:	d82d      	bhi.n	800686c <UART_SetConfig+0x164>
 8006810:	a201      	add	r2, pc, #4	; (adr r2, 8006818 <UART_SetConfig+0x110>)
 8006812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006816:	bf00      	nop
 8006818:	0800684d 	.word	0x0800684d
 800681c:	0800686d 	.word	0x0800686d
 8006820:	0800686d 	.word	0x0800686d
 8006824:	0800686d 	.word	0x0800686d
 8006828:	0800685d 	.word	0x0800685d
 800682c:	0800686d 	.word	0x0800686d
 8006830:	0800686d 	.word	0x0800686d
 8006834:	0800686d 	.word	0x0800686d
 8006838:	08006855 	.word	0x08006855
 800683c:	0800686d 	.word	0x0800686d
 8006840:	0800686d 	.word	0x0800686d
 8006844:	0800686d 	.word	0x0800686d
 8006848:	08006865 	.word	0x08006865
 800684c:	2300      	movs	r3, #0
 800684e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006852:	e0d8      	b.n	8006a06 <UART_SetConfig+0x2fe>
 8006854:	2302      	movs	r3, #2
 8006856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800685a:	e0d4      	b.n	8006a06 <UART_SetConfig+0x2fe>
 800685c:	2304      	movs	r3, #4
 800685e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006862:	e0d0      	b.n	8006a06 <UART_SetConfig+0x2fe>
 8006864:	2308      	movs	r3, #8
 8006866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800686a:	e0cc      	b.n	8006a06 <UART_SetConfig+0x2fe>
 800686c:	2310      	movs	r3, #16
 800686e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006872:	e0c8      	b.n	8006a06 <UART_SetConfig+0x2fe>
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a5e      	ldr	r2, [pc, #376]	; (80069f4 <UART_SetConfig+0x2ec>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d125      	bne.n	80068ca <UART_SetConfig+0x1c2>
 800687e:	4b5b      	ldr	r3, [pc, #364]	; (80069ec <UART_SetConfig+0x2e4>)
 8006880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006884:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006888:	2b30      	cmp	r3, #48	; 0x30
 800688a:	d016      	beq.n	80068ba <UART_SetConfig+0x1b2>
 800688c:	2b30      	cmp	r3, #48	; 0x30
 800688e:	d818      	bhi.n	80068c2 <UART_SetConfig+0x1ba>
 8006890:	2b20      	cmp	r3, #32
 8006892:	d00a      	beq.n	80068aa <UART_SetConfig+0x1a2>
 8006894:	2b20      	cmp	r3, #32
 8006896:	d814      	bhi.n	80068c2 <UART_SetConfig+0x1ba>
 8006898:	2b00      	cmp	r3, #0
 800689a:	d002      	beq.n	80068a2 <UART_SetConfig+0x19a>
 800689c:	2b10      	cmp	r3, #16
 800689e:	d008      	beq.n	80068b2 <UART_SetConfig+0x1aa>
 80068a0:	e00f      	b.n	80068c2 <UART_SetConfig+0x1ba>
 80068a2:	2300      	movs	r3, #0
 80068a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068a8:	e0ad      	b.n	8006a06 <UART_SetConfig+0x2fe>
 80068aa:	2302      	movs	r3, #2
 80068ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068b0:	e0a9      	b.n	8006a06 <UART_SetConfig+0x2fe>
 80068b2:	2304      	movs	r3, #4
 80068b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068b8:	e0a5      	b.n	8006a06 <UART_SetConfig+0x2fe>
 80068ba:	2308      	movs	r3, #8
 80068bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068c0:	e0a1      	b.n	8006a06 <UART_SetConfig+0x2fe>
 80068c2:	2310      	movs	r3, #16
 80068c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068c8:	e09d      	b.n	8006a06 <UART_SetConfig+0x2fe>
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a4a      	ldr	r2, [pc, #296]	; (80069f8 <UART_SetConfig+0x2f0>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d125      	bne.n	8006920 <UART_SetConfig+0x218>
 80068d4:	4b45      	ldr	r3, [pc, #276]	; (80069ec <UART_SetConfig+0x2e4>)
 80068d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80068de:	2bc0      	cmp	r3, #192	; 0xc0
 80068e0:	d016      	beq.n	8006910 <UART_SetConfig+0x208>
 80068e2:	2bc0      	cmp	r3, #192	; 0xc0
 80068e4:	d818      	bhi.n	8006918 <UART_SetConfig+0x210>
 80068e6:	2b80      	cmp	r3, #128	; 0x80
 80068e8:	d00a      	beq.n	8006900 <UART_SetConfig+0x1f8>
 80068ea:	2b80      	cmp	r3, #128	; 0x80
 80068ec:	d814      	bhi.n	8006918 <UART_SetConfig+0x210>
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d002      	beq.n	80068f8 <UART_SetConfig+0x1f0>
 80068f2:	2b40      	cmp	r3, #64	; 0x40
 80068f4:	d008      	beq.n	8006908 <UART_SetConfig+0x200>
 80068f6:	e00f      	b.n	8006918 <UART_SetConfig+0x210>
 80068f8:	2300      	movs	r3, #0
 80068fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068fe:	e082      	b.n	8006a06 <UART_SetConfig+0x2fe>
 8006900:	2302      	movs	r3, #2
 8006902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006906:	e07e      	b.n	8006a06 <UART_SetConfig+0x2fe>
 8006908:	2304      	movs	r3, #4
 800690a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800690e:	e07a      	b.n	8006a06 <UART_SetConfig+0x2fe>
 8006910:	2308      	movs	r3, #8
 8006912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006916:	e076      	b.n	8006a06 <UART_SetConfig+0x2fe>
 8006918:	2310      	movs	r3, #16
 800691a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800691e:	e072      	b.n	8006a06 <UART_SetConfig+0x2fe>
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a35      	ldr	r2, [pc, #212]	; (80069fc <UART_SetConfig+0x2f4>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d12a      	bne.n	8006980 <UART_SetConfig+0x278>
 800692a:	4b30      	ldr	r3, [pc, #192]	; (80069ec <UART_SetConfig+0x2e4>)
 800692c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006930:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006934:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006938:	d01a      	beq.n	8006970 <UART_SetConfig+0x268>
 800693a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800693e:	d81b      	bhi.n	8006978 <UART_SetConfig+0x270>
 8006940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006944:	d00c      	beq.n	8006960 <UART_SetConfig+0x258>
 8006946:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800694a:	d815      	bhi.n	8006978 <UART_SetConfig+0x270>
 800694c:	2b00      	cmp	r3, #0
 800694e:	d003      	beq.n	8006958 <UART_SetConfig+0x250>
 8006950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006954:	d008      	beq.n	8006968 <UART_SetConfig+0x260>
 8006956:	e00f      	b.n	8006978 <UART_SetConfig+0x270>
 8006958:	2300      	movs	r3, #0
 800695a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800695e:	e052      	b.n	8006a06 <UART_SetConfig+0x2fe>
 8006960:	2302      	movs	r3, #2
 8006962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006966:	e04e      	b.n	8006a06 <UART_SetConfig+0x2fe>
 8006968:	2304      	movs	r3, #4
 800696a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800696e:	e04a      	b.n	8006a06 <UART_SetConfig+0x2fe>
 8006970:	2308      	movs	r3, #8
 8006972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006976:	e046      	b.n	8006a06 <UART_SetConfig+0x2fe>
 8006978:	2310      	movs	r3, #16
 800697a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800697e:	e042      	b.n	8006a06 <UART_SetConfig+0x2fe>
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a17      	ldr	r2, [pc, #92]	; (80069e4 <UART_SetConfig+0x2dc>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d13a      	bne.n	8006a00 <UART_SetConfig+0x2f8>
 800698a:	4b18      	ldr	r3, [pc, #96]	; (80069ec <UART_SetConfig+0x2e4>)
 800698c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006990:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006994:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006998:	d01a      	beq.n	80069d0 <UART_SetConfig+0x2c8>
 800699a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800699e:	d81b      	bhi.n	80069d8 <UART_SetConfig+0x2d0>
 80069a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069a4:	d00c      	beq.n	80069c0 <UART_SetConfig+0x2b8>
 80069a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069aa:	d815      	bhi.n	80069d8 <UART_SetConfig+0x2d0>
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d003      	beq.n	80069b8 <UART_SetConfig+0x2b0>
 80069b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069b4:	d008      	beq.n	80069c8 <UART_SetConfig+0x2c0>
 80069b6:	e00f      	b.n	80069d8 <UART_SetConfig+0x2d0>
 80069b8:	2300      	movs	r3, #0
 80069ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069be:	e022      	b.n	8006a06 <UART_SetConfig+0x2fe>
 80069c0:	2302      	movs	r3, #2
 80069c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069c6:	e01e      	b.n	8006a06 <UART_SetConfig+0x2fe>
 80069c8:	2304      	movs	r3, #4
 80069ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069ce:	e01a      	b.n	8006a06 <UART_SetConfig+0x2fe>
 80069d0:	2308      	movs	r3, #8
 80069d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069d6:	e016      	b.n	8006a06 <UART_SetConfig+0x2fe>
 80069d8:	2310      	movs	r3, #16
 80069da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069de:	e012      	b.n	8006a06 <UART_SetConfig+0x2fe>
 80069e0:	cfff69f3 	.word	0xcfff69f3
 80069e4:	40008000 	.word	0x40008000
 80069e8:	40013800 	.word	0x40013800
 80069ec:	40021000 	.word	0x40021000
 80069f0:	40004400 	.word	0x40004400
 80069f4:	40004800 	.word	0x40004800
 80069f8:	40004c00 	.word	0x40004c00
 80069fc:	40005000 	.word	0x40005000
 8006a00:	2310      	movs	r3, #16
 8006a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4aae      	ldr	r2, [pc, #696]	; (8006cc4 <UART_SetConfig+0x5bc>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	f040 8097 	bne.w	8006b40 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a16:	2b08      	cmp	r3, #8
 8006a18:	d823      	bhi.n	8006a62 <UART_SetConfig+0x35a>
 8006a1a:	a201      	add	r2, pc, #4	; (adr r2, 8006a20 <UART_SetConfig+0x318>)
 8006a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a20:	08006a45 	.word	0x08006a45
 8006a24:	08006a63 	.word	0x08006a63
 8006a28:	08006a4d 	.word	0x08006a4d
 8006a2c:	08006a63 	.word	0x08006a63
 8006a30:	08006a53 	.word	0x08006a53
 8006a34:	08006a63 	.word	0x08006a63
 8006a38:	08006a63 	.word	0x08006a63
 8006a3c:	08006a63 	.word	0x08006a63
 8006a40:	08006a5b 	.word	0x08006a5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a44:	f7fd fb6a 	bl	800411c <HAL_RCC_GetPCLK1Freq>
 8006a48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a4a:	e010      	b.n	8006a6e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a4c:	4b9e      	ldr	r3, [pc, #632]	; (8006cc8 <UART_SetConfig+0x5c0>)
 8006a4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a50:	e00d      	b.n	8006a6e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a52:	f7fd faf5 	bl	8004040 <HAL_RCC_GetSysClockFreq>
 8006a56:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a58:	e009      	b.n	8006a6e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a60:	e005      	b.n	8006a6e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006a62:	2300      	movs	r3, #0
 8006a64:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006a6c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 8130 	beq.w	8006cd6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7a:	4a94      	ldr	r2, [pc, #592]	; (8006ccc <UART_SetConfig+0x5c4>)
 8006a7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a80:	461a      	mov	r2, r3
 8006a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a84:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a88:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	685a      	ldr	r2, [r3, #4]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	005b      	lsls	r3, r3, #1
 8006a92:	4413      	add	r3, r2
 8006a94:	69ba      	ldr	r2, [r7, #24]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d305      	bcc.n	8006aa6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d903      	bls.n	8006aae <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006aac:	e113      	b.n	8006cd6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	60bb      	str	r3, [r7, #8]
 8006ab4:	60fa      	str	r2, [r7, #12]
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aba:	4a84      	ldr	r2, [pc, #528]	; (8006ccc <UART_SetConfig+0x5c4>)
 8006abc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	603b      	str	r3, [r7, #0]
 8006ac6:	607a      	str	r2, [r7, #4]
 8006ac8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006acc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ad0:	f7f9 fc0e 	bl	80002f0 <__aeabi_uldivmod>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	4610      	mov	r0, r2
 8006ada:	4619      	mov	r1, r3
 8006adc:	f04f 0200 	mov.w	r2, #0
 8006ae0:	f04f 0300 	mov.w	r3, #0
 8006ae4:	020b      	lsls	r3, r1, #8
 8006ae6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006aea:	0202      	lsls	r2, r0, #8
 8006aec:	6979      	ldr	r1, [r7, #20]
 8006aee:	6849      	ldr	r1, [r1, #4]
 8006af0:	0849      	lsrs	r1, r1, #1
 8006af2:	2000      	movs	r0, #0
 8006af4:	460c      	mov	r4, r1
 8006af6:	4605      	mov	r5, r0
 8006af8:	eb12 0804 	adds.w	r8, r2, r4
 8006afc:	eb43 0905 	adc.w	r9, r3, r5
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	469a      	mov	sl, r3
 8006b08:	4693      	mov	fp, r2
 8006b0a:	4652      	mov	r2, sl
 8006b0c:	465b      	mov	r3, fp
 8006b0e:	4640      	mov	r0, r8
 8006b10:	4649      	mov	r1, r9
 8006b12:	f7f9 fbed 	bl	80002f0 <__aeabi_uldivmod>
 8006b16:	4602      	mov	r2, r0
 8006b18:	460b      	mov	r3, r1
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b1e:	6a3b      	ldr	r3, [r7, #32]
 8006b20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b24:	d308      	bcc.n	8006b38 <UART_SetConfig+0x430>
 8006b26:	6a3b      	ldr	r3, [r7, #32]
 8006b28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b2c:	d204      	bcs.n	8006b38 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	6a3a      	ldr	r2, [r7, #32]
 8006b34:	60da      	str	r2, [r3, #12]
 8006b36:	e0ce      	b.n	8006cd6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006b3e:	e0ca      	b.n	8006cd6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	69db      	ldr	r3, [r3, #28]
 8006b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b48:	d166      	bne.n	8006c18 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006b4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006b4e:	2b08      	cmp	r3, #8
 8006b50:	d827      	bhi.n	8006ba2 <UART_SetConfig+0x49a>
 8006b52:	a201      	add	r2, pc, #4	; (adr r2, 8006b58 <UART_SetConfig+0x450>)
 8006b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b58:	08006b7d 	.word	0x08006b7d
 8006b5c:	08006b85 	.word	0x08006b85
 8006b60:	08006b8d 	.word	0x08006b8d
 8006b64:	08006ba3 	.word	0x08006ba3
 8006b68:	08006b93 	.word	0x08006b93
 8006b6c:	08006ba3 	.word	0x08006ba3
 8006b70:	08006ba3 	.word	0x08006ba3
 8006b74:	08006ba3 	.word	0x08006ba3
 8006b78:	08006b9b 	.word	0x08006b9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b7c:	f7fd face 	bl	800411c <HAL_RCC_GetPCLK1Freq>
 8006b80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b82:	e014      	b.n	8006bae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b84:	f7fd fae0 	bl	8004148 <HAL_RCC_GetPCLK2Freq>
 8006b88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b8a:	e010      	b.n	8006bae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b8c:	4b4e      	ldr	r3, [pc, #312]	; (8006cc8 <UART_SetConfig+0x5c0>)
 8006b8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b90:	e00d      	b.n	8006bae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b92:	f7fd fa55 	bl	8004040 <HAL_RCC_GetSysClockFreq>
 8006b96:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b98:	e009      	b.n	8006bae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ba0:	e005      	b.n	8006bae <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006bac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 8090 	beq.w	8006cd6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bba:	4a44      	ldr	r2, [pc, #272]	; (8006ccc <UART_SetConfig+0x5c4>)
 8006bbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bc8:	005a      	lsls	r2, r3, #1
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	085b      	lsrs	r3, r3, #1
 8006bd0:	441a      	add	r2, r3
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bda:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bdc:	6a3b      	ldr	r3, [r7, #32]
 8006bde:	2b0f      	cmp	r3, #15
 8006be0:	d916      	bls.n	8006c10 <UART_SetConfig+0x508>
 8006be2:	6a3b      	ldr	r3, [r7, #32]
 8006be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006be8:	d212      	bcs.n	8006c10 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bea:	6a3b      	ldr	r3, [r7, #32]
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	f023 030f 	bic.w	r3, r3, #15
 8006bf2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	085b      	lsrs	r3, r3, #1
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	f003 0307 	and.w	r3, r3, #7
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	8bfb      	ldrh	r3, [r7, #30]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	8bfa      	ldrh	r2, [r7, #30]
 8006c0c:	60da      	str	r2, [r3, #12]
 8006c0e:	e062      	b.n	8006cd6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006c16:	e05e      	b.n	8006cd6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006c1c:	2b08      	cmp	r3, #8
 8006c1e:	d828      	bhi.n	8006c72 <UART_SetConfig+0x56a>
 8006c20:	a201      	add	r2, pc, #4	; (adr r2, 8006c28 <UART_SetConfig+0x520>)
 8006c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c26:	bf00      	nop
 8006c28:	08006c4d 	.word	0x08006c4d
 8006c2c:	08006c55 	.word	0x08006c55
 8006c30:	08006c5d 	.word	0x08006c5d
 8006c34:	08006c73 	.word	0x08006c73
 8006c38:	08006c63 	.word	0x08006c63
 8006c3c:	08006c73 	.word	0x08006c73
 8006c40:	08006c73 	.word	0x08006c73
 8006c44:	08006c73 	.word	0x08006c73
 8006c48:	08006c6b 	.word	0x08006c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c4c:	f7fd fa66 	bl	800411c <HAL_RCC_GetPCLK1Freq>
 8006c50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c52:	e014      	b.n	8006c7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c54:	f7fd fa78 	bl	8004148 <HAL_RCC_GetPCLK2Freq>
 8006c58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c5a:	e010      	b.n	8006c7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c5c:	4b1a      	ldr	r3, [pc, #104]	; (8006cc8 <UART_SetConfig+0x5c0>)
 8006c5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c60:	e00d      	b.n	8006c7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c62:	f7fd f9ed 	bl	8004040 <HAL_RCC_GetSysClockFreq>
 8006c66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c68:	e009      	b.n	8006c7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c70:	e005      	b.n	8006c7e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006c72:	2300      	movs	r3, #0
 8006c74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006c7c:	bf00      	nop
    }

    if (pclk != 0U)
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d028      	beq.n	8006cd6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c88:	4a10      	ldr	r2, [pc, #64]	; (8006ccc <UART_SetConfig+0x5c4>)
 8006c8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c92:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	085b      	lsrs	r3, r3, #1
 8006c9c:	441a      	add	r2, r3
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ca6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ca8:	6a3b      	ldr	r3, [r7, #32]
 8006caa:	2b0f      	cmp	r3, #15
 8006cac:	d910      	bls.n	8006cd0 <UART_SetConfig+0x5c8>
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cb4:	d20c      	bcs.n	8006cd0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	60da      	str	r2, [r3, #12]
 8006cc0:	e009      	b.n	8006cd6 <UART_SetConfig+0x5ce>
 8006cc2:	bf00      	nop
 8006cc4:	40008000 	.word	0x40008000
 8006cc8:	00f42400 	.word	0x00f42400
 8006ccc:	08010670 	.word	0x08010670
      }
      else
      {
        ret = HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006cf2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3730      	adds	r7, #48	; 0x30
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006d00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d0c:	f003 0301 	and.w	r3, r3, #1
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00a      	beq.n	8006d2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2e:	f003 0302 	and.w	r3, r3, #2
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00a      	beq.n	8006d4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d50:	f003 0304 	and.w	r3, r3, #4
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00a      	beq.n	8006d6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d72:	f003 0308 	and.w	r3, r3, #8
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00a      	beq.n	8006d90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	430a      	orrs	r2, r1
 8006d8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d94:	f003 0310 	and.w	r3, r3, #16
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00a      	beq.n	8006db2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	430a      	orrs	r2, r1
 8006db0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db6:	f003 0320 	and.w	r3, r3, #32
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00a      	beq.n	8006dd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	430a      	orrs	r2, r1
 8006dd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d01a      	beq.n	8006e16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	430a      	orrs	r2, r1
 8006df4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dfe:	d10a      	bne.n	8006e16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00a      	beq.n	8006e38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	430a      	orrs	r2, r1
 8006e36:	605a      	str	r2, [r3, #4]
  }
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b086      	sub	sp, #24
 8006e48:	af02      	add	r7, sp, #8
 8006e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e54:	f7fa fe32 	bl	8001abc <HAL_GetTick>
 8006e58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0308 	and.w	r3, r3, #8
 8006e64:	2b08      	cmp	r3, #8
 8006e66:	d10e      	bne.n	8006e86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e6c:	9300      	str	r3, [sp, #0]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f82f 	bl	8006eda <UART_WaitOnFlagUntilTimeout>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e025      	b.n	8006ed2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0304 	and.w	r3, r3, #4
 8006e90:	2b04      	cmp	r3, #4
 8006e92:	d10e      	bne.n	8006eb2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e98:	9300      	str	r3, [sp, #0]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f819 	bl	8006eda <UART_WaitOnFlagUntilTimeout>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d001      	beq.n	8006eb2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e00f      	b.n	8006ed2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2220      	movs	r2, #32
 8006ebe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b09c      	sub	sp, #112	; 0x70
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	60f8      	str	r0, [r7, #12]
 8006ee2:	60b9      	str	r1, [r7, #8]
 8006ee4:	603b      	str	r3, [r7, #0]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eea:	e0a9      	b.n	8007040 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef2:	f000 80a5 	beq.w	8007040 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ef6:	f7fa fde1 	bl	8001abc <HAL_GetTick>
 8006efa:	4602      	mov	r2, r0
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d302      	bcc.n	8006f0c <UART_WaitOnFlagUntilTimeout+0x32>
 8006f06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d140      	bne.n	8006f8e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f14:	e853 3f00 	ldrex	r3, [r3]
 8006f18:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f20:	667b      	str	r3, [r7, #100]	; 0x64
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	461a      	mov	r2, r3
 8006f28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f2c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f32:	e841 2300 	strex	r3, r2, [r1]
 8006f36:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1e6      	bne.n	8006f0c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3308      	adds	r3, #8
 8006f44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f48:	e853 3f00 	ldrex	r3, [r3]
 8006f4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f50:	f023 0301 	bic.w	r3, r3, #1
 8006f54:	663b      	str	r3, [r7, #96]	; 0x60
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	3308      	adds	r3, #8
 8006f5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f5e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006f60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f66:	e841 2300 	strex	r3, r2, [r1]
 8006f6a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1e5      	bne.n	8006f3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2220      	movs	r2, #32
 8006f76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e069      	b.n	8007062 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0304 	and.w	r3, r3, #4
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d051      	beq.n	8007040 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	69db      	ldr	r3, [r3, #28]
 8006fa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006faa:	d149      	bne.n	8007040 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fb4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fbe:	e853 3f00 	ldrex	r3, [r3]
 8006fc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006fca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fd4:	637b      	str	r3, [r7, #52]	; 0x34
 8006fd6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006fda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fdc:	e841 2300 	strex	r3, r2, [r1]
 8006fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1e6      	bne.n	8006fb6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	3308      	adds	r3, #8
 8006fee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	e853 3f00 	ldrex	r3, [r3]
 8006ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	f023 0301 	bic.w	r3, r3, #1
 8006ffe:	66bb      	str	r3, [r7, #104]	; 0x68
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3308      	adds	r3, #8
 8007006:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007008:	623a      	str	r2, [r7, #32]
 800700a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700c:	69f9      	ldr	r1, [r7, #28]
 800700e:	6a3a      	ldr	r2, [r7, #32]
 8007010:	e841 2300 	strex	r3, r2, [r1]
 8007014:	61bb      	str	r3, [r7, #24]
   return(result);
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1e5      	bne.n	8006fe8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2220      	movs	r2, #32
 8007020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2220      	movs	r2, #32
 8007028:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2220      	movs	r2, #32
 8007030:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e010      	b.n	8007062 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	69da      	ldr	r2, [r3, #28]
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	4013      	ands	r3, r2
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	429a      	cmp	r2, r3
 800704e:	bf0c      	ite	eq
 8007050:	2301      	moveq	r3, #1
 8007052:	2300      	movne	r3, #0
 8007054:	b2db      	uxtb	r3, r3
 8007056:	461a      	mov	r2, r3
 8007058:	79fb      	ldrb	r3, [r7, #7]
 800705a:	429a      	cmp	r2, r3
 800705c:	f43f af46 	beq.w	8006eec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3770      	adds	r7, #112	; 0x70
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800706a:	b480      	push	{r7}
 800706c:	b085      	sub	sp, #20
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007078:	2b01      	cmp	r3, #1
 800707a:	d101      	bne.n	8007080 <HAL_UARTEx_DisableFifoMode+0x16>
 800707c:	2302      	movs	r3, #2
 800707e:	e027      	b.n	80070d0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2224      	movs	r2, #36	; 0x24
 800708c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f022 0201 	bic.w	r2, r2, #1
 80070a6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80070ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2220      	movs	r2, #32
 80070c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d101      	bne.n	80070f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80070f0:	2302      	movs	r3, #2
 80070f2:	e02d      	b.n	8007150 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2224      	movs	r2, #36	; 0x24
 8007100:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f022 0201 	bic.w	r2, r2, #1
 800711a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	683a      	ldr	r2, [r7, #0]
 800712c:	430a      	orrs	r2, r1
 800712e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 f84f 	bl	80071d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2220      	movs	r2, #32
 8007142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007168:	2b01      	cmp	r3, #1
 800716a:	d101      	bne.n	8007170 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800716c:	2302      	movs	r3, #2
 800716e:	e02d      	b.n	80071cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2224      	movs	r2, #36	; 0x24
 800717c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f022 0201 	bic.w	r2, r2, #1
 8007196:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	683a      	ldr	r2, [r7, #0]
 80071a8:	430a      	orrs	r2, r1
 80071aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f811 	bl	80071d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2220      	movs	r2, #32
 80071be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d108      	bne.n	80071f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80071f4:	e031      	b.n	800725a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80071f6:	2308      	movs	r3, #8
 80071f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80071fa:	2308      	movs	r3, #8
 80071fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	0e5b      	lsrs	r3, r3, #25
 8007206:	b2db      	uxtb	r3, r3
 8007208:	f003 0307 	and.w	r3, r3, #7
 800720c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	0f5b      	lsrs	r3, r3, #29
 8007216:	b2db      	uxtb	r3, r3
 8007218:	f003 0307 	and.w	r3, r3, #7
 800721c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800721e:	7bbb      	ldrb	r3, [r7, #14]
 8007220:	7b3a      	ldrb	r2, [r7, #12]
 8007222:	4911      	ldr	r1, [pc, #68]	; (8007268 <UARTEx_SetNbDataToProcess+0x94>)
 8007224:	5c8a      	ldrb	r2, [r1, r2]
 8007226:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800722a:	7b3a      	ldrb	r2, [r7, #12]
 800722c:	490f      	ldr	r1, [pc, #60]	; (800726c <UARTEx_SetNbDataToProcess+0x98>)
 800722e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007230:	fb93 f3f2 	sdiv	r3, r3, r2
 8007234:	b29a      	uxth	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800723c:	7bfb      	ldrb	r3, [r7, #15]
 800723e:	7b7a      	ldrb	r2, [r7, #13]
 8007240:	4909      	ldr	r1, [pc, #36]	; (8007268 <UARTEx_SetNbDataToProcess+0x94>)
 8007242:	5c8a      	ldrb	r2, [r1, r2]
 8007244:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007248:	7b7a      	ldrb	r2, [r7, #13]
 800724a:	4908      	ldr	r1, [pc, #32]	; (800726c <UARTEx_SetNbDataToProcess+0x98>)
 800724c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800724e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007252:	b29a      	uxth	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800725a:	bf00      	nop
 800725c:	3714      	adds	r7, #20
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	08010688 	.word	0x08010688
 800726c:	08010690 	.word	0x08010690

08007270 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8007278:	4b22      	ldr	r3, [pc, #136]	; (8007304 <WIZCHIP_READ+0x94>)
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800727e:	4b21      	ldr	r3, [pc, #132]	; (8007304 <WIZCHIP_READ+0x94>)
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8007284:	4b1f      	ldr	r3, [pc, #124]	; (8007304 <WIZCHIP_READ+0x94>)
 8007286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007288:	2b00      	cmp	r3, #0
 800728a:	d003      	beq.n	8007294 <WIZCHIP_READ+0x24>
 800728c:	4b1d      	ldr	r3, [pc, #116]	; (8007304 <WIZCHIP_READ+0x94>)
 800728e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007290:	2b00      	cmp	r3, #0
 8007292:	d114      	bne.n	80072be <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8007294:	4b1b      	ldr	r3, [pc, #108]	; (8007304 <WIZCHIP_READ+0x94>)
 8007296:	6a1b      	ldr	r3, [r3, #32]
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	0c12      	lsrs	r2, r2, #16
 800729c:	b2d2      	uxtb	r2, r2
 800729e:	4610      	mov	r0, r2
 80072a0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80072a2:	4b18      	ldr	r3, [pc, #96]	; (8007304 <WIZCHIP_READ+0x94>)
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	0a12      	lsrs	r2, r2, #8
 80072aa:	b2d2      	uxtb	r2, r2
 80072ac:	4610      	mov	r0, r2
 80072ae:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80072b0:	4b14      	ldr	r3, [pc, #80]	; (8007304 <WIZCHIP_READ+0x94>)
 80072b2:	6a1b      	ldr	r3, [r3, #32]
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	b2d2      	uxtb	r2, r2
 80072b8:	4610      	mov	r0, r2
 80072ba:	4798      	blx	r3
 80072bc:	e011      	b.n	80072e2 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	0c1b      	lsrs	r3, r3, #16
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	0a1b      	lsrs	r3, r3, #8
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80072d4:	4b0b      	ldr	r3, [pc, #44]	; (8007304 <WIZCHIP_READ+0x94>)
 80072d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d8:	f107 020c 	add.w	r2, r7, #12
 80072dc:	2103      	movs	r1, #3
 80072de:	4610      	mov	r0, r2
 80072e0:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80072e2:	4b08      	ldr	r3, [pc, #32]	; (8007304 <WIZCHIP_READ+0x94>)
 80072e4:	69db      	ldr	r3, [r3, #28]
 80072e6:	4798      	blx	r3
 80072e8:	4603      	mov	r3, r0
 80072ea:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80072ec:	4b05      	ldr	r3, [pc, #20]	; (8007304 <WIZCHIP_READ+0x94>)
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80072f2:	4b04      	ldr	r3, [pc, #16]	; (8007304 <WIZCHIP_READ+0x94>)
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	4798      	blx	r3
   return ret;
 80072f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	20000010 	.word	0x20000010

08007308 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	460b      	mov	r3, r1
 8007312:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8007314:	4b22      	ldr	r3, [pc, #136]	; (80073a0 <WIZCHIP_WRITE+0x98>)
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	4798      	blx	r3
   WIZCHIP.CS._select();
 800731a:	4b21      	ldr	r3, [pc, #132]	; (80073a0 <WIZCHIP_WRITE+0x98>)
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f043 0304 	orr.w	r3, r3, #4
 8007326:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8007328:	4b1d      	ldr	r3, [pc, #116]	; (80073a0 <WIZCHIP_WRITE+0x98>)
 800732a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732c:	2b00      	cmp	r3, #0
 800732e:	d119      	bne.n	8007364 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8007330:	4b1b      	ldr	r3, [pc, #108]	; (80073a0 <WIZCHIP_WRITE+0x98>)
 8007332:	6a1b      	ldr	r3, [r3, #32]
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	0c12      	lsrs	r2, r2, #16
 8007338:	b2d2      	uxtb	r2, r2
 800733a:	4610      	mov	r0, r2
 800733c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800733e:	4b18      	ldr	r3, [pc, #96]	; (80073a0 <WIZCHIP_WRITE+0x98>)
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	0a12      	lsrs	r2, r2, #8
 8007346:	b2d2      	uxtb	r2, r2
 8007348:	4610      	mov	r0, r2
 800734a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800734c:	4b14      	ldr	r3, [pc, #80]	; (80073a0 <WIZCHIP_WRITE+0x98>)
 800734e:	6a1b      	ldr	r3, [r3, #32]
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	b2d2      	uxtb	r2, r2
 8007354:	4610      	mov	r0, r2
 8007356:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8007358:	4b11      	ldr	r3, [pc, #68]	; (80073a0 <WIZCHIP_WRITE+0x98>)
 800735a:	6a1b      	ldr	r3, [r3, #32]
 800735c:	78fa      	ldrb	r2, [r7, #3]
 800735e:	4610      	mov	r0, r2
 8007360:	4798      	blx	r3
 8007362:	e013      	b.n	800738c <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	0c1b      	lsrs	r3, r3, #16
 8007368:	b2db      	uxtb	r3, r3
 800736a:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	0a1b      	lsrs	r3, r3, #8
 8007370:	b2db      	uxtb	r3, r3
 8007372:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	b2db      	uxtb	r3, r3
 8007378:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800737a:	78fb      	ldrb	r3, [r7, #3]
 800737c:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800737e:	4b08      	ldr	r3, [pc, #32]	; (80073a0 <WIZCHIP_WRITE+0x98>)
 8007380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007382:	f107 020c 	add.w	r2, r7, #12
 8007386:	2104      	movs	r1, #4
 8007388:	4610      	mov	r0, r2
 800738a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800738c:	4b04      	ldr	r3, [pc, #16]	; (80073a0 <WIZCHIP_WRITE+0x98>)
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8007392:	4b03      	ldr	r3, [pc, #12]	; (80073a0 <WIZCHIP_WRITE+0x98>)
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	4798      	blx	r3
}
 8007398:	bf00      	nop
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	20000010 	.word	0x20000010

080073a4 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80073a4:	b590      	push	{r4, r7, lr}
 80073a6:	b087      	sub	sp, #28
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	4613      	mov	r3, r2
 80073b0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80073b2:	4b2b      	ldr	r3, [pc, #172]	; (8007460 <WIZCHIP_READ_BUF+0xbc>)
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	4798      	blx	r3
   WIZCHIP.CS._select();
 80073b8:	4b29      	ldr	r3, [pc, #164]	; (8007460 <WIZCHIP_READ_BUF+0xbc>)
 80073ba:	695b      	ldr	r3, [r3, #20]
 80073bc:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80073be:	4b28      	ldr	r3, [pc, #160]	; (8007460 <WIZCHIP_READ_BUF+0xbc>)
 80073c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d003      	beq.n	80073ce <WIZCHIP_READ_BUF+0x2a>
 80073c6:	4b26      	ldr	r3, [pc, #152]	; (8007460 <WIZCHIP_READ_BUF+0xbc>)
 80073c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d126      	bne.n	800741c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80073ce:	4b24      	ldr	r3, [pc, #144]	; (8007460 <WIZCHIP_READ_BUF+0xbc>)
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	0c12      	lsrs	r2, r2, #16
 80073d6:	b2d2      	uxtb	r2, r2
 80073d8:	4610      	mov	r0, r2
 80073da:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80073dc:	4b20      	ldr	r3, [pc, #128]	; (8007460 <WIZCHIP_READ_BUF+0xbc>)
 80073de:	6a1b      	ldr	r3, [r3, #32]
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	0a12      	lsrs	r2, r2, #8
 80073e4:	b2d2      	uxtb	r2, r2
 80073e6:	4610      	mov	r0, r2
 80073e8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80073ea:	4b1d      	ldr	r3, [pc, #116]	; (8007460 <WIZCHIP_READ_BUF+0xbc>)
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	b2d2      	uxtb	r2, r2
 80073f2:	4610      	mov	r0, r2
 80073f4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80073f6:	2300      	movs	r3, #0
 80073f8:	82fb      	strh	r3, [r7, #22]
 80073fa:	e00a      	b.n	8007412 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80073fc:	4b18      	ldr	r3, [pc, #96]	; (8007460 <WIZCHIP_READ_BUF+0xbc>)
 80073fe:	69db      	ldr	r3, [r3, #28]
 8007400:	8afa      	ldrh	r2, [r7, #22]
 8007402:	68b9      	ldr	r1, [r7, #8]
 8007404:	188c      	adds	r4, r1, r2
 8007406:	4798      	blx	r3
 8007408:	4603      	mov	r3, r0
 800740a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 800740c:	8afb      	ldrh	r3, [r7, #22]
 800740e:	3301      	adds	r3, #1
 8007410:	82fb      	strh	r3, [r7, #22]
 8007412:	8afa      	ldrh	r2, [r7, #22]
 8007414:	88fb      	ldrh	r3, [r7, #6]
 8007416:	429a      	cmp	r2, r3
 8007418:	d3f0      	bcc.n	80073fc <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800741a:	e017      	b.n	800744c <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	0c1b      	lsrs	r3, r3, #16
 8007420:	b2db      	uxtb	r3, r3
 8007422:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	0a1b      	lsrs	r3, r3, #8
 8007428:	b2db      	uxtb	r3, r3
 800742a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	b2db      	uxtb	r3, r3
 8007430:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8007432:	4b0b      	ldr	r3, [pc, #44]	; (8007460 <WIZCHIP_READ_BUF+0xbc>)
 8007434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007436:	f107 0210 	add.w	r2, r7, #16
 800743a:	2103      	movs	r1, #3
 800743c:	4610      	mov	r0, r2
 800743e:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8007440:	4b07      	ldr	r3, [pc, #28]	; (8007460 <WIZCHIP_READ_BUF+0xbc>)
 8007442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007444:	88fa      	ldrh	r2, [r7, #6]
 8007446:	4611      	mov	r1, r2
 8007448:	68b8      	ldr	r0, [r7, #8]
 800744a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800744c:	4b04      	ldr	r3, [pc, #16]	; (8007460 <WIZCHIP_READ_BUF+0xbc>)
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8007452:	4b03      	ldr	r3, [pc, #12]	; (8007460 <WIZCHIP_READ_BUF+0xbc>)
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	4798      	blx	r3
}
 8007458:	bf00      	nop
 800745a:	371c      	adds	r7, #28
 800745c:	46bd      	mov	sp, r7
 800745e:	bd90      	pop	{r4, r7, pc}
 8007460:	20000010 	.word	0x20000010

08007464 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	4613      	mov	r3, r2
 8007470:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8007472:	4b2b      	ldr	r3, [pc, #172]	; (8007520 <WIZCHIP_WRITE_BUF+0xbc>)
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	4798      	blx	r3
   WIZCHIP.CS._select();
 8007478:	4b29      	ldr	r3, [pc, #164]	; (8007520 <WIZCHIP_WRITE_BUF+0xbc>)
 800747a:	695b      	ldr	r3, [r3, #20]
 800747c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f043 0304 	orr.w	r3, r3, #4
 8007484:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8007486:	4b26      	ldr	r3, [pc, #152]	; (8007520 <WIZCHIP_WRITE_BUF+0xbc>)
 8007488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800748a:	2b00      	cmp	r3, #0
 800748c:	d126      	bne.n	80074dc <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800748e:	4b24      	ldr	r3, [pc, #144]	; (8007520 <WIZCHIP_WRITE_BUF+0xbc>)
 8007490:	6a1b      	ldr	r3, [r3, #32]
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	0c12      	lsrs	r2, r2, #16
 8007496:	b2d2      	uxtb	r2, r2
 8007498:	4610      	mov	r0, r2
 800749a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800749c:	4b20      	ldr	r3, [pc, #128]	; (8007520 <WIZCHIP_WRITE_BUF+0xbc>)
 800749e:	6a1b      	ldr	r3, [r3, #32]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	0a12      	lsrs	r2, r2, #8
 80074a4:	b2d2      	uxtb	r2, r2
 80074a6:	4610      	mov	r0, r2
 80074a8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80074aa:	4b1d      	ldr	r3, [pc, #116]	; (8007520 <WIZCHIP_WRITE_BUF+0xbc>)
 80074ac:	6a1b      	ldr	r3, [r3, #32]
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	b2d2      	uxtb	r2, r2
 80074b2:	4610      	mov	r0, r2
 80074b4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80074b6:	2300      	movs	r3, #0
 80074b8:	82fb      	strh	r3, [r7, #22]
 80074ba:	e00a      	b.n	80074d2 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80074bc:	4b18      	ldr	r3, [pc, #96]	; (8007520 <WIZCHIP_WRITE_BUF+0xbc>)
 80074be:	6a1b      	ldr	r3, [r3, #32]
 80074c0:	8afa      	ldrh	r2, [r7, #22]
 80074c2:	68b9      	ldr	r1, [r7, #8]
 80074c4:	440a      	add	r2, r1
 80074c6:	7812      	ldrb	r2, [r2, #0]
 80074c8:	4610      	mov	r0, r2
 80074ca:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80074cc:	8afb      	ldrh	r3, [r7, #22]
 80074ce:	3301      	adds	r3, #1
 80074d0:	82fb      	strh	r3, [r7, #22]
 80074d2:	8afa      	ldrh	r2, [r7, #22]
 80074d4:	88fb      	ldrh	r3, [r7, #6]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d3f0      	bcc.n	80074bc <WIZCHIP_WRITE_BUF+0x58>
 80074da:	e017      	b.n	800750c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	0c1b      	lsrs	r3, r3, #16
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	0a1b      	lsrs	r3, r3, #8
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80074f2:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <WIZCHIP_WRITE_BUF+0xbc>)
 80074f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f6:	f107 0210 	add.w	r2, r7, #16
 80074fa:	2103      	movs	r1, #3
 80074fc:	4610      	mov	r0, r2
 80074fe:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8007500:	4b07      	ldr	r3, [pc, #28]	; (8007520 <WIZCHIP_WRITE_BUF+0xbc>)
 8007502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007504:	88fa      	ldrh	r2, [r7, #6]
 8007506:	4611      	mov	r1, r2
 8007508:	68b8      	ldr	r0, [r7, #8]
 800750a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800750c:	4b04      	ldr	r3, [pc, #16]	; (8007520 <WIZCHIP_WRITE_BUF+0xbc>)
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8007512:	4b03      	ldr	r3, [pc, #12]	; (8007520 <WIZCHIP_WRITE_BUF+0xbc>)
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	4798      	blx	r3
}
 8007518:	bf00      	nop
 800751a:	3718      	adds	r7, #24
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	20000010 	.word	0x20000010

08007524 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8007524:	b590      	push	{r4, r7, lr}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
 800752a:	4603      	mov	r3, r0
 800752c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800752e:	2300      	movs	r3, #0
 8007530:	81fb      	strh	r3, [r7, #14]
 8007532:	2300      	movs	r3, #0
 8007534:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8007536:	79fb      	ldrb	r3, [r7, #7]
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	3301      	adds	r3, #1
 800753c:	00db      	lsls	r3, r3, #3
 800753e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007542:	4618      	mov	r0, r3
 8007544:	f7ff fe94 	bl	8007270 <WIZCHIP_READ>
 8007548:	4603      	mov	r3, r0
 800754a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800754c:	89bb      	ldrh	r3, [r7, #12]
 800754e:	021b      	lsls	r3, r3, #8
 8007550:	b29c      	uxth	r4, r3
 8007552:	79fb      	ldrb	r3, [r7, #7]
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	3301      	adds	r3, #1
 8007558:	00db      	lsls	r3, r3, #3
 800755a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800755e:	4618      	mov	r0, r3
 8007560:	f7ff fe86 	bl	8007270 <WIZCHIP_READ>
 8007564:	4603      	mov	r3, r0
 8007566:	b29b      	uxth	r3, r3
 8007568:	4423      	add	r3, r4
 800756a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800756c:	89bb      	ldrh	r3, [r7, #12]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d01a      	beq.n	80075a8 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8007572:	79fb      	ldrb	r3, [r7, #7]
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	3301      	adds	r3, #1
 8007578:	00db      	lsls	r3, r3, #3
 800757a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800757e:	4618      	mov	r0, r3
 8007580:	f7ff fe76 	bl	8007270 <WIZCHIP_READ>
 8007584:	4603      	mov	r3, r0
 8007586:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8007588:	89fb      	ldrh	r3, [r7, #14]
 800758a:	021b      	lsls	r3, r3, #8
 800758c:	b29c      	uxth	r4, r3
 800758e:	79fb      	ldrb	r3, [r7, #7]
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	3301      	adds	r3, #1
 8007594:	00db      	lsls	r3, r3, #3
 8007596:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800759a:	4618      	mov	r0, r3
 800759c:	f7ff fe68 	bl	8007270 <WIZCHIP_READ>
 80075a0:	4603      	mov	r3, r0
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	4423      	add	r3, r4
 80075a6:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80075a8:	89fa      	ldrh	r2, [r7, #14]
 80075aa:	89bb      	ldrh	r3, [r7, #12]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d1c2      	bne.n	8007536 <getSn_TX_FSR+0x12>
   return val;
 80075b0:	89fb      	ldrh	r3, [r7, #14]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3714      	adds	r7, #20
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd90      	pop	{r4, r7, pc}

080075ba <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80075ba:	b590      	push	{r4, r7, lr}
 80075bc:	b085      	sub	sp, #20
 80075be:	af00      	add	r7, sp, #0
 80075c0:	4603      	mov	r3, r0
 80075c2:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80075c4:	2300      	movs	r3, #0
 80075c6:	81fb      	strh	r3, [r7, #14]
 80075c8:	2300      	movs	r3, #0
 80075ca:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80075cc:	79fb      	ldrb	r3, [r7, #7]
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	3301      	adds	r3, #1
 80075d2:	00db      	lsls	r3, r3, #3
 80075d4:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80075d8:	4618      	mov	r0, r3
 80075da:	f7ff fe49 	bl	8007270 <WIZCHIP_READ>
 80075de:	4603      	mov	r3, r0
 80075e0:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80075e2:	89bb      	ldrh	r3, [r7, #12]
 80075e4:	021b      	lsls	r3, r3, #8
 80075e6:	b29c      	uxth	r4, r3
 80075e8:	79fb      	ldrb	r3, [r7, #7]
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	3301      	adds	r3, #1
 80075ee:	00db      	lsls	r3, r3, #3
 80075f0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7ff fe3b 	bl	8007270 <WIZCHIP_READ>
 80075fa:	4603      	mov	r3, r0
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	4423      	add	r3, r4
 8007600:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8007602:	89bb      	ldrh	r3, [r7, #12]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d01a      	beq.n	800763e <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8007608:	79fb      	ldrb	r3, [r7, #7]
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	3301      	adds	r3, #1
 800760e:	00db      	lsls	r3, r3, #3
 8007610:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8007614:	4618      	mov	r0, r3
 8007616:	f7ff fe2b 	bl	8007270 <WIZCHIP_READ>
 800761a:	4603      	mov	r3, r0
 800761c:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800761e:	89fb      	ldrh	r3, [r7, #14]
 8007620:	021b      	lsls	r3, r3, #8
 8007622:	b29c      	uxth	r4, r3
 8007624:	79fb      	ldrb	r3, [r7, #7]
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	3301      	adds	r3, #1
 800762a:	00db      	lsls	r3, r3, #3
 800762c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8007630:	4618      	mov	r0, r3
 8007632:	f7ff fe1d 	bl	8007270 <WIZCHIP_READ>
 8007636:	4603      	mov	r3, r0
 8007638:	b29b      	uxth	r3, r3
 800763a:	4423      	add	r3, r4
 800763c:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800763e:	89fa      	ldrh	r2, [r7, #14]
 8007640:	89bb      	ldrh	r3, [r7, #12]
 8007642:	429a      	cmp	r2, r3
 8007644:	d1c2      	bne.n	80075cc <getSn_RX_RSR+0x12>
   return val;
 8007646:	89fb      	ldrh	r3, [r7, #14]
}
 8007648:	4618      	mov	r0, r3
 800764a:	3714      	adds	r7, #20
 800764c:	46bd      	mov	sp, r7
 800764e:	bd90      	pop	{r4, r7, pc}

08007650 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8007650:	b590      	push	{r4, r7, lr}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	4603      	mov	r3, r0
 8007658:	6039      	str	r1, [r7, #0]
 800765a:	71fb      	strb	r3, [r7, #7]
 800765c:	4613      	mov	r3, r2
 800765e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8007660:	2300      	movs	r3, #0
 8007662:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8007664:	2300      	movs	r3, #0
 8007666:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8007668:	88bb      	ldrh	r3, [r7, #4]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d048      	beq.n	8007700 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 800766e:	79fb      	ldrb	r3, [r7, #7]
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	3301      	adds	r3, #1
 8007674:	00db      	lsls	r3, r3, #3
 8007676:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800767a:	4618      	mov	r0, r3
 800767c:	f7ff fdf8 	bl	8007270 <WIZCHIP_READ>
 8007680:	4603      	mov	r3, r0
 8007682:	b29b      	uxth	r3, r3
 8007684:	021b      	lsls	r3, r3, #8
 8007686:	b29c      	uxth	r4, r3
 8007688:	79fb      	ldrb	r3, [r7, #7]
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	3301      	adds	r3, #1
 800768e:	00db      	lsls	r3, r3, #3
 8007690:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8007694:	4618      	mov	r0, r3
 8007696:	f7ff fdeb 	bl	8007270 <WIZCHIP_READ>
 800769a:	4603      	mov	r3, r0
 800769c:	b29b      	uxth	r3, r3
 800769e:	4423      	add	r3, r4
 80076a0:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80076a2:	89fb      	ldrh	r3, [r7, #14]
 80076a4:	021b      	lsls	r3, r3, #8
 80076a6:	79fa      	ldrb	r2, [r7, #7]
 80076a8:	0092      	lsls	r2, r2, #2
 80076aa:	3202      	adds	r2, #2
 80076ac:	00d2      	lsls	r2, r2, #3
 80076ae:	4413      	add	r3, r2
 80076b0:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80076b2:	88bb      	ldrh	r3, [r7, #4]
 80076b4:	461a      	mov	r2, r3
 80076b6:	6839      	ldr	r1, [r7, #0]
 80076b8:	68b8      	ldr	r0, [r7, #8]
 80076ba:	f7ff fed3 	bl	8007464 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80076be:	89fa      	ldrh	r2, [r7, #14]
 80076c0:	88bb      	ldrh	r3, [r7, #4]
 80076c2:	4413      	add	r3, r2
 80076c4:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80076c6:	79fb      	ldrb	r3, [r7, #7]
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	3301      	adds	r3, #1
 80076cc:	00db      	lsls	r3, r3, #3
 80076ce:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80076d2:	461a      	mov	r2, r3
 80076d4:	89fb      	ldrh	r3, [r7, #14]
 80076d6:	0a1b      	lsrs	r3, r3, #8
 80076d8:	b29b      	uxth	r3, r3
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	4619      	mov	r1, r3
 80076de:	4610      	mov	r0, r2
 80076e0:	f7ff fe12 	bl	8007308 <WIZCHIP_WRITE>
 80076e4:	79fb      	ldrb	r3, [r7, #7]
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	3301      	adds	r3, #1
 80076ea:	00db      	lsls	r3, r3, #3
 80076ec:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80076f0:	461a      	mov	r2, r3
 80076f2:	89fb      	ldrh	r3, [r7, #14]
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	4619      	mov	r1, r3
 80076f8:	4610      	mov	r0, r2
 80076fa:	f7ff fe05 	bl	8007308 <WIZCHIP_WRITE>
 80076fe:	e000      	b.n	8007702 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8007700:	bf00      	nop
}
 8007702:	3714      	adds	r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	bd90      	pop	{r4, r7, pc}

08007708 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8007708:	b590      	push	{r4, r7, lr}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	4603      	mov	r3, r0
 8007710:	6039      	str	r1, [r7, #0]
 8007712:	71fb      	strb	r3, [r7, #7]
 8007714:	4613      	mov	r3, r2
 8007716:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8007718:	2300      	movs	r3, #0
 800771a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800771c:	2300      	movs	r3, #0
 800771e:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8007720:	88bb      	ldrh	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d048      	beq.n	80077b8 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8007726:	79fb      	ldrb	r3, [r7, #7]
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	3301      	adds	r3, #1
 800772c:	00db      	lsls	r3, r3, #3
 800772e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8007732:	4618      	mov	r0, r3
 8007734:	f7ff fd9c 	bl	8007270 <WIZCHIP_READ>
 8007738:	4603      	mov	r3, r0
 800773a:	b29b      	uxth	r3, r3
 800773c:	021b      	lsls	r3, r3, #8
 800773e:	b29c      	uxth	r4, r3
 8007740:	79fb      	ldrb	r3, [r7, #7]
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	3301      	adds	r3, #1
 8007746:	00db      	lsls	r3, r3, #3
 8007748:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800774c:	4618      	mov	r0, r3
 800774e:	f7ff fd8f 	bl	8007270 <WIZCHIP_READ>
 8007752:	4603      	mov	r3, r0
 8007754:	b29b      	uxth	r3, r3
 8007756:	4423      	add	r3, r4
 8007758:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800775a:	89fb      	ldrh	r3, [r7, #14]
 800775c:	021b      	lsls	r3, r3, #8
 800775e:	79fa      	ldrb	r2, [r7, #7]
 8007760:	0092      	lsls	r2, r2, #2
 8007762:	3203      	adds	r2, #3
 8007764:	00d2      	lsls	r2, r2, #3
 8007766:	4413      	add	r3, r2
 8007768:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800776a:	88bb      	ldrh	r3, [r7, #4]
 800776c:	461a      	mov	r2, r3
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	68b8      	ldr	r0, [r7, #8]
 8007772:	f7ff fe17 	bl	80073a4 <WIZCHIP_READ_BUF>
   ptr += len;
 8007776:	89fa      	ldrh	r2, [r7, #14]
 8007778:	88bb      	ldrh	r3, [r7, #4]
 800777a:	4413      	add	r3, r2
 800777c:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800777e:	79fb      	ldrb	r3, [r7, #7]
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	3301      	adds	r3, #1
 8007784:	00db      	lsls	r3, r3, #3
 8007786:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800778a:	461a      	mov	r2, r3
 800778c:	89fb      	ldrh	r3, [r7, #14]
 800778e:	0a1b      	lsrs	r3, r3, #8
 8007790:	b29b      	uxth	r3, r3
 8007792:	b2db      	uxtb	r3, r3
 8007794:	4619      	mov	r1, r3
 8007796:	4610      	mov	r0, r2
 8007798:	f7ff fdb6 	bl	8007308 <WIZCHIP_WRITE>
 800779c:	79fb      	ldrb	r3, [r7, #7]
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	3301      	adds	r3, #1
 80077a2:	00db      	lsls	r3, r3, #3
 80077a4:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80077a8:	461a      	mov	r2, r3
 80077aa:	89fb      	ldrh	r3, [r7, #14]
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	4619      	mov	r1, r3
 80077b0:	4610      	mov	r0, r2
 80077b2:	f7ff fda9 	bl	8007308 <WIZCHIP_WRITE>
 80077b6:	e000      	b.n	80077ba <wiz_recv_data+0xb2>
   if(len == 0) return;
 80077b8:	bf00      	nop
}
 80077ba:	3714      	adds	r7, #20
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd90      	pop	{r4, r7, pc}

080077c0 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 80077c0:	b590      	push	{r4, r7, lr}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	4604      	mov	r4, r0
 80077c8:	4608      	mov	r0, r1
 80077ca:	4611      	mov	r1, r2
 80077cc:	461a      	mov	r2, r3
 80077ce:	4623      	mov	r3, r4
 80077d0:	71fb      	strb	r3, [r7, #7]
 80077d2:	4603      	mov	r3, r0
 80077d4:	71bb      	strb	r3, [r7, #6]
 80077d6:	460b      	mov	r3, r1
 80077d8:	80bb      	strh	r3, [r7, #4]
 80077da:	4613      	mov	r3, r2
 80077dc:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 80077de:	79fb      	ldrb	r3, [r7, #7]
 80077e0:	2b08      	cmp	r3, #8
 80077e2:	d902      	bls.n	80077ea <socket+0x2a>
 80077e4:	f04f 33ff 	mov.w	r3, #4294967295
 80077e8:	e0f2      	b.n	80079d0 <socket+0x210>
	switch(protocol)
 80077ea:	79bb      	ldrb	r3, [r7, #6]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d005      	beq.n	80077fc <socket+0x3c>
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	dd11      	ble.n	8007818 <socket+0x58>
 80077f4:	3b02      	subs	r3, #2
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d80e      	bhi.n	8007818 <socket+0x58>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 80077fa:	e010      	b.n	800781e <socket+0x5e>
            getSIPR((uint8_t*)&taddr);
 80077fc:	f107 030c 	add.w	r3, r7, #12
 8007800:	2204      	movs	r2, #4
 8007802:	4619      	mov	r1, r3
 8007804:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8007808:	f7ff fdcc 	bl	80073a4 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d105      	bne.n	800781e <socket+0x5e>
 8007812:	f06f 0302 	mvn.w	r3, #2
 8007816:	e0db      	b.n	80079d0 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8007818:	f06f 0304 	mvn.w	r3, #4
 800781c:	e0d8      	b.n	80079d0 <socket+0x210>
         break;
 800781e:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8007820:	78fb      	ldrb	r3, [r7, #3]
 8007822:	f003 0304 	and.w	r3, r3, #4
 8007826:	2b00      	cmp	r3, #0
 8007828:	d002      	beq.n	8007830 <socket+0x70>
 800782a:	f06f 0305 	mvn.w	r3, #5
 800782e:	e0cf      	b.n	80079d0 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8007830:	78fb      	ldrb	r3, [r7, #3]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d025      	beq.n	8007882 <socket+0xc2>
	{
   	switch(protocol)
 8007836:	79bb      	ldrb	r3, [r7, #6]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d002      	beq.n	8007842 <socket+0x82>
 800783c:	2b02      	cmp	r3, #2
 800783e:	d008      	beq.n	8007852 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8007840:	e024      	b.n	800788c <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8007842:	78fb      	ldrb	r3, [r7, #3]
 8007844:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8007848:	2b00      	cmp	r3, #0
 800784a:	d11c      	bne.n	8007886 <socket+0xc6>
 800784c:	f06f 0305 	mvn.w	r3, #5
 8007850:	e0be      	b.n	80079d0 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 8007852:	78fb      	ldrb	r3, [r7, #3]
 8007854:	f003 0320 	and.w	r3, r3, #32
 8007858:	2b00      	cmp	r3, #0
 800785a:	d006      	beq.n	800786a <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800785c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007860:	2b00      	cmp	r3, #0
 8007862:	db02      	blt.n	800786a <socket+0xaa>
 8007864:	f06f 0305 	mvn.w	r3, #5
 8007868:	e0b2      	b.n	80079d0 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 800786a:	78fb      	ldrb	r3, [r7, #3]
 800786c:	f003 0310 	and.w	r3, r3, #16
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00a      	beq.n	800788a <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8007874:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007878:	2b00      	cmp	r3, #0
 800787a:	db06      	blt.n	800788a <socket+0xca>
 800787c:	f06f 0305 	mvn.w	r3, #5
 8007880:	e0a6      	b.n	80079d0 <socket+0x210>
   	}
   }
 8007882:	bf00      	nop
 8007884:	e002      	b.n	800788c <socket+0xcc>
   	      break;
 8007886:	bf00      	nop
 8007888:	e000      	b.n	800788c <socket+0xcc>
   	      break;
 800788a:	bf00      	nop
	close(sn);
 800788c:	79fb      	ldrb	r3, [r7, #7]
 800788e:	4618      	mov	r0, r3
 8007890:	f000 f8ac 	bl	80079ec <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8007894:	79fb      	ldrb	r3, [r7, #7]
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	3301      	adds	r3, #1
 800789a:	00db      	lsls	r3, r3, #3
 800789c:	4618      	mov	r0, r3
 800789e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078a2:	f023 030f 	bic.w	r3, r3, #15
 80078a6:	b25a      	sxtb	r2, r3
 80078a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	b25b      	sxtb	r3, r3
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	4619      	mov	r1, r3
 80078b4:	f7ff fd28 	bl	8007308 <WIZCHIP_WRITE>
    #endif
	if(!port)
 80078b8:	88bb      	ldrh	r3, [r7, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d110      	bne.n	80078e0 <socket+0x120>
	{
	   port = sock_any_port++;
 80078be:	4b46      	ldr	r3, [pc, #280]	; (80079d8 <socket+0x218>)
 80078c0:	881b      	ldrh	r3, [r3, #0]
 80078c2:	1c5a      	adds	r2, r3, #1
 80078c4:	b291      	uxth	r1, r2
 80078c6:	4a44      	ldr	r2, [pc, #272]	; (80079d8 <socket+0x218>)
 80078c8:	8011      	strh	r1, [r2, #0]
 80078ca:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80078cc:	4b42      	ldr	r3, [pc, #264]	; (80079d8 <socket+0x218>)
 80078ce:	881b      	ldrh	r3, [r3, #0]
 80078d0:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d103      	bne.n	80078e0 <socket+0x120>
 80078d8:	4b3f      	ldr	r3, [pc, #252]	; (80079d8 <socket+0x218>)
 80078da:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80078de:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 80078e0:	79fb      	ldrb	r3, [r7, #7]
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	3301      	adds	r3, #1
 80078e6:	00db      	lsls	r3, r3, #3
 80078e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078ec:	461a      	mov	r2, r3
 80078ee:	88bb      	ldrh	r3, [r7, #4]
 80078f0:	0a1b      	lsrs	r3, r3, #8
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	4619      	mov	r1, r3
 80078f8:	4610      	mov	r0, r2
 80078fa:	f7ff fd05 	bl	8007308 <WIZCHIP_WRITE>
 80078fe:	79fb      	ldrb	r3, [r7, #7]
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	3301      	adds	r3, #1
 8007904:	00db      	lsls	r3, r3, #3
 8007906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800790a:	461a      	mov	r2, r3
 800790c:	88bb      	ldrh	r3, [r7, #4]
 800790e:	b2db      	uxtb	r3, r3
 8007910:	4619      	mov	r1, r3
 8007912:	4610      	mov	r0, r2
 8007914:	f7ff fcf8 	bl	8007308 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8007918:	79fb      	ldrb	r3, [r7, #7]
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	3301      	adds	r3, #1
 800791e:	00db      	lsls	r3, r3, #3
 8007920:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007924:	2101      	movs	r1, #1
 8007926:	4618      	mov	r0, r3
 8007928:	f7ff fcee 	bl	8007308 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800792c:	bf00      	nop
 800792e:	79fb      	ldrb	r3, [r7, #7]
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	3301      	adds	r3, #1
 8007934:	00db      	lsls	r3, r3, #3
 8007936:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800793a:	4618      	mov	r0, r3
 800793c:	f7ff fc98 	bl	8007270 <WIZCHIP_READ>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1f3      	bne.n	800792e <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8007946:	79fb      	ldrb	r3, [r7, #7]
 8007948:	2201      	movs	r2, #1
 800794a:	fa02 f303 	lsl.w	r3, r2, r3
 800794e:	b21b      	sxth	r3, r3
 8007950:	43db      	mvns	r3, r3
 8007952:	b21a      	sxth	r2, r3
 8007954:	4b21      	ldr	r3, [pc, #132]	; (80079dc <socket+0x21c>)
 8007956:	881b      	ldrh	r3, [r3, #0]
 8007958:	b21b      	sxth	r3, r3
 800795a:	4013      	ands	r3, r2
 800795c:	b21b      	sxth	r3, r3
 800795e:	b29a      	uxth	r2, r3
 8007960:	4b1e      	ldr	r3, [pc, #120]	; (80079dc <socket+0x21c>)
 8007962:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8007964:	78fb      	ldrb	r3, [r7, #3]
 8007966:	f003 0201 	and.w	r2, r3, #1
 800796a:	79fb      	ldrb	r3, [r7, #7]
 800796c:	fa02 f303 	lsl.w	r3, r2, r3
 8007970:	b21a      	sxth	r2, r3
 8007972:	4b1a      	ldr	r3, [pc, #104]	; (80079dc <socket+0x21c>)
 8007974:	881b      	ldrh	r3, [r3, #0]
 8007976:	b21b      	sxth	r3, r3
 8007978:	4313      	orrs	r3, r2
 800797a:	b21b      	sxth	r3, r3
 800797c:	b29a      	uxth	r2, r3
 800797e:	4b17      	ldr	r3, [pc, #92]	; (80079dc <socket+0x21c>)
 8007980:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8007982:	79fb      	ldrb	r3, [r7, #7]
 8007984:	2201      	movs	r2, #1
 8007986:	fa02 f303 	lsl.w	r3, r2, r3
 800798a:	b21b      	sxth	r3, r3
 800798c:	43db      	mvns	r3, r3
 800798e:	b21a      	sxth	r2, r3
 8007990:	4b13      	ldr	r3, [pc, #76]	; (80079e0 <socket+0x220>)
 8007992:	881b      	ldrh	r3, [r3, #0]
 8007994:	b21b      	sxth	r3, r3
 8007996:	4013      	ands	r3, r2
 8007998:	b21b      	sxth	r3, r3
 800799a:	b29a      	uxth	r2, r3
 800799c:	4b10      	ldr	r3, [pc, #64]	; (80079e0 <socket+0x220>)
 800799e:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80079a0:	79fb      	ldrb	r3, [r7, #7]
 80079a2:	4a10      	ldr	r2, [pc, #64]	; (80079e4 <socket+0x224>)
 80079a4:	2100      	movs	r1, #0
 80079a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 80079aa:	79fb      	ldrb	r3, [r7, #7]
 80079ac:	4a0e      	ldr	r2, [pc, #56]	; (80079e8 <socket+0x228>)
 80079ae:	2100      	movs	r1, #0
 80079b0:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 80079b2:	bf00      	nop
 80079b4:	79fb      	ldrb	r3, [r7, #7]
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	3301      	adds	r3, #1
 80079ba:	00db      	lsls	r3, r3, #3
 80079bc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7ff fc55 	bl	8007270 <WIZCHIP_READ>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d0f3      	beq.n	80079b4 <socket+0x1f4>
   return (int8_t)sn;
 80079cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 80079d0:	4618      	mov	r0, r3
 80079d2:	3714      	adds	r7, #20
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd90      	pop	{r4, r7, pc}
 80079d8:	2000000c 	.word	0x2000000c
 80079dc:	200009cc 	.word	0x200009cc
 80079e0:	200009ce 	.word	0x200009ce
 80079e4:	200009d0 	.word	0x200009d0
 80079e8:	200009e0 	.word	0x200009e0

080079ec <close>:

int8_t close(uint8_t sn)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	4603      	mov	r3, r0
 80079f4:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80079f6:	79fb      	ldrb	r3, [r7, #7]
 80079f8:	2b08      	cmp	r3, #8
 80079fa:	d902      	bls.n	8007a02 <close+0x16>
 80079fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007a00:	e055      	b.n	8007aae <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8007a02:	79fb      	ldrb	r3, [r7, #7]
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	3301      	adds	r3, #1
 8007a08:	00db      	lsls	r3, r3, #3
 8007a0a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007a0e:	2110      	movs	r1, #16
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7ff fc79 	bl	8007308 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8007a16:	bf00      	nop
 8007a18:	79fb      	ldrb	r3, [r7, #7]
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	00db      	lsls	r3, r3, #3
 8007a20:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7ff fc23 	bl	8007270 <WIZCHIP_READ>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d1f3      	bne.n	8007a18 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8007a30:	79fb      	ldrb	r3, [r7, #7]
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	3301      	adds	r3, #1
 8007a36:	00db      	lsls	r3, r3, #3
 8007a38:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007a3c:	211f      	movs	r1, #31
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7ff fc62 	bl	8007308 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8007a44:	79fb      	ldrb	r3, [r7, #7]
 8007a46:	2201      	movs	r2, #1
 8007a48:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4c:	b21b      	sxth	r3, r3
 8007a4e:	43db      	mvns	r3, r3
 8007a50:	b21a      	sxth	r2, r3
 8007a52:	4b19      	ldr	r3, [pc, #100]	; (8007ab8 <close+0xcc>)
 8007a54:	881b      	ldrh	r3, [r3, #0]
 8007a56:	b21b      	sxth	r3, r3
 8007a58:	4013      	ands	r3, r2
 8007a5a:	b21b      	sxth	r3, r3
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	4b16      	ldr	r3, [pc, #88]	; (8007ab8 <close+0xcc>)
 8007a60:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8007a62:	79fb      	ldrb	r3, [r7, #7]
 8007a64:	2201      	movs	r2, #1
 8007a66:	fa02 f303 	lsl.w	r3, r2, r3
 8007a6a:	b21b      	sxth	r3, r3
 8007a6c:	43db      	mvns	r3, r3
 8007a6e:	b21a      	sxth	r2, r3
 8007a70:	4b12      	ldr	r3, [pc, #72]	; (8007abc <close+0xd0>)
 8007a72:	881b      	ldrh	r3, [r3, #0]
 8007a74:	b21b      	sxth	r3, r3
 8007a76:	4013      	ands	r3, r2
 8007a78:	b21b      	sxth	r3, r3
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	4b0f      	ldr	r3, [pc, #60]	; (8007abc <close+0xd0>)
 8007a7e:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8007a80:	79fb      	ldrb	r3, [r7, #7]
 8007a82:	4a0f      	ldr	r2, [pc, #60]	; (8007ac0 <close+0xd4>)
 8007a84:	2100      	movs	r1, #0
 8007a86:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8007a8a:	79fb      	ldrb	r3, [r7, #7]
 8007a8c:	4a0d      	ldr	r2, [pc, #52]	; (8007ac4 <close+0xd8>)
 8007a8e:	2100      	movs	r1, #0
 8007a90:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8007a92:	bf00      	nop
 8007a94:	79fb      	ldrb	r3, [r7, #7]
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	3301      	adds	r3, #1
 8007a9a:	00db      	lsls	r3, r3, #3
 8007a9c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7ff fbe5 	bl	8007270 <WIZCHIP_READ>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1f3      	bne.n	8007a94 <close+0xa8>
	return SOCK_OK;
 8007aac:	2301      	movs	r3, #1
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	200009cc 	.word	0x200009cc
 8007abc:	200009ce 	.word	0x200009ce
 8007ac0:	200009d0 	.word	0x200009d0
 8007ac4:	200009e0 	.word	0x200009e0

08007ac8 <listen>:

int8_t listen(uint8_t sn)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	4603      	mov	r3, r0
 8007ad0:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8007ad2:	79fb      	ldrb	r3, [r7, #7]
 8007ad4:	2b08      	cmp	r3, #8
 8007ad6:	d902      	bls.n	8007ade <listen+0x16>
 8007ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8007adc:	e049      	b.n	8007b72 <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8007ade:	79fb      	ldrb	r3, [r7, #7]
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	00db      	lsls	r3, r3, #3
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7ff fbc2 	bl	8007270 <WIZCHIP_READ>
 8007aec:	4603      	mov	r3, r0
 8007aee:	f003 030f 	and.w	r3, r3, #15
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d002      	beq.n	8007afc <listen+0x34>
 8007af6:	f06f 0304 	mvn.w	r3, #4
 8007afa:	e03a      	b.n	8007b72 <listen+0xaa>
	CHECK_SOCKINIT();
 8007afc:	79fb      	ldrb	r3, [r7, #7]
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	3301      	adds	r3, #1
 8007b02:	00db      	lsls	r3, r3, #3
 8007b04:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7ff fbb1 	bl	8007270 <WIZCHIP_READ>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b13      	cmp	r3, #19
 8007b12:	d002      	beq.n	8007b1a <listen+0x52>
 8007b14:	f06f 0302 	mvn.w	r3, #2
 8007b18:	e02b      	b.n	8007b72 <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8007b1a:	79fb      	ldrb	r3, [r7, #7]
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	3301      	adds	r3, #1
 8007b20:	00db      	lsls	r3, r3, #3
 8007b22:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007b26:	2102      	movs	r1, #2
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7ff fbed 	bl	8007308 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8007b2e:	bf00      	nop
 8007b30:	79fb      	ldrb	r3, [r7, #7]
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	3301      	adds	r3, #1
 8007b36:	00db      	lsls	r3, r3, #3
 8007b38:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7ff fb97 	bl	8007270 <WIZCHIP_READ>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1f3      	bne.n	8007b30 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8007b48:	e006      	b.n	8007b58 <listen+0x90>
   {
         close(sn);
 8007b4a:	79fb      	ldrb	r3, [r7, #7]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7ff ff4d 	bl	80079ec <close>
         return SOCKERR_SOCKCLOSED;
 8007b52:	f06f 0303 	mvn.w	r3, #3
 8007b56:	e00c      	b.n	8007b72 <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8007b58:	79fb      	ldrb	r3, [r7, #7]
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	00db      	lsls	r3, r3, #3
 8007b60:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7ff fb83 	bl	8007270 <WIZCHIP_READ>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b14      	cmp	r3, #20
 8007b6e:	d1ec      	bne.n	8007b4a <listen+0x82>
   }
   return SOCK_OK;
 8007b70:	2301      	movs	r3, #1
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3708      	adds	r7, #8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
	...

08007b7c <connect>:


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	4603      	mov	r3, r0
 8007b84:	6039      	str	r1, [r7, #0]
 8007b86:	71fb      	strb	r3, [r7, #7]
 8007b88:	4613      	mov	r3, r2
 8007b8a:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8007b8c:	79fb      	ldrb	r3, [r7, #7]
 8007b8e:	2b08      	cmp	r3, #8
 8007b90:	d902      	bls.n	8007b98 <connect+0x1c>
 8007b92:	f04f 33ff 	mov.w	r3, #4294967295
 8007b96:	e0c6      	b.n	8007d26 <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8007b98:	79fb      	ldrb	r3, [r7, #7]
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	00db      	lsls	r3, r3, #3
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7ff fb65 	bl	8007270 <WIZCHIP_READ>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	f003 030f 	and.w	r3, r3, #15
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d002      	beq.n	8007bb6 <connect+0x3a>
 8007bb0:	f06f 0304 	mvn.w	r3, #4
 8007bb4:	e0b7      	b.n	8007d26 <connect+0x1aa>
   CHECK_SOCKINIT();
 8007bb6:	79fb      	ldrb	r3, [r7, #7]
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	3301      	adds	r3, #1
 8007bbc:	00db      	lsls	r3, r3, #3
 8007bbe:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7ff fb54 	bl	8007270 <WIZCHIP_READ>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b13      	cmp	r3, #19
 8007bcc:	d002      	beq.n	8007bd4 <connect+0x58>
 8007bce:	f06f 0302 	mvn.w	r3, #2
 8007bd2:	e0a8      	b.n	8007d26 <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	021b      	lsls	r3, r3, #8
 8007bde:	683a      	ldr	r2, [r7, #0]
 8007be0:	3201      	adds	r2, #1
 8007be2:	7812      	ldrb	r2, [r2, #0]
 8007be4:	4413      	add	r3, r2
 8007be6:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	021b      	lsls	r3, r3, #8
 8007bec:	683a      	ldr	r2, [r7, #0]
 8007bee:	3202      	adds	r2, #2
 8007bf0:	7812      	ldrb	r2, [r2, #0]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	021b      	lsls	r3, r3, #8
 8007bfa:	683a      	ldr	r2, [r7, #0]
 8007bfc:	3203      	adds	r2, #3
 8007bfe:	7812      	ldrb	r2, [r2, #0]
 8007c00:	4413      	add	r3, r2
 8007c02:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c0a:	d002      	beq.n	8007c12 <connect+0x96>
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d102      	bne.n	8007c18 <connect+0x9c>
 8007c12:	f06f 030b 	mvn.w	r3, #11
 8007c16:	e086      	b.n	8007d26 <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8007c18:	88bb      	ldrh	r3, [r7, #4]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d102      	bne.n	8007c24 <connect+0xa8>
 8007c1e:	f06f 030a 	mvn.w	r3, #10
 8007c22:	e080      	b.n	8007d26 <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8007c24:	79fb      	ldrb	r3, [r7, #7]
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	3301      	adds	r3, #1
 8007c2a:	00db      	lsls	r3, r3, #3
 8007c2c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8007c30:	2204      	movs	r2, #4
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	4618      	mov	r0, r3
 8007c36:	f7ff fc15 	bl	8007464 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8007c3a:	79fb      	ldrb	r3, [r7, #7]
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	3301      	adds	r3, #1
 8007c40:	00db      	lsls	r3, r3, #3
 8007c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c46:	461a      	mov	r2, r3
 8007c48:	88bb      	ldrh	r3, [r7, #4]
 8007c4a:	0a1b      	lsrs	r3, r3, #8
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	4619      	mov	r1, r3
 8007c52:	4610      	mov	r0, r2
 8007c54:	f7ff fb58 	bl	8007308 <WIZCHIP_WRITE>
 8007c58:	79fb      	ldrb	r3, [r7, #7]
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	00db      	lsls	r3, r3, #3
 8007c60:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8007c64:	461a      	mov	r2, r3
 8007c66:	88bb      	ldrh	r3, [r7, #4]
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	4610      	mov	r0, r2
 8007c6e:	f7ff fb4b 	bl	8007308 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8007c72:	79fb      	ldrb	r3, [r7, #7]
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	3301      	adds	r3, #1
 8007c78:	00db      	lsls	r3, r3, #3
 8007c7a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007c7e:	2104      	movs	r1, #4
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7ff fb41 	bl	8007308 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8007c86:	bf00      	nop
 8007c88:	79fb      	ldrb	r3, [r7, #7]
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	00db      	lsls	r3, r3, #3
 8007c90:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7ff faeb 	bl	8007270 <WIZCHIP_READ>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1f3      	bne.n	8007c88 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8007ca0:	4b23      	ldr	r3, [pc, #140]	; (8007d30 <connect+0x1b4>)
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	79fb      	ldrb	r3, [r7, #7]
 8007ca8:	fa42 f303 	asr.w	r3, r2, r3
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d02b      	beq.n	8007d0c <connect+0x190>
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	e036      	b.n	8007d26 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8007cb8:	79fb      	ldrb	r3, [r7, #7]
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	00db      	lsls	r3, r3, #3
 8007cc0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f7ff fad3 	bl	8007270 <WIZCHIP_READ>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	f003 0308 	and.w	r3, r3, #8
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00c      	beq.n	8007cee <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8007cd4:	79fb      	ldrb	r3, [r7, #7]
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	3301      	adds	r3, #1
 8007cda:	00db      	lsls	r3, r3, #3
 8007cdc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007ce0:	2108      	movs	r1, #8
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7ff fb10 	bl	8007308 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8007ce8:	f06f 030c 	mvn.w	r3, #12
 8007cec:	e01b      	b.n	8007d26 <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8007cee:	79fb      	ldrb	r3, [r7, #7]
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	00db      	lsls	r3, r3, #3
 8007cf6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7ff fab8 	bl	8007270 <WIZCHIP_READ>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d102      	bne.n	8007d0c <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 8007d06:	f06f 0303 	mvn.w	r3, #3
 8007d0a:	e00c      	b.n	8007d26 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8007d0c:	79fb      	ldrb	r3, [r7, #7]
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	3301      	adds	r3, #1
 8007d12:	00db      	lsls	r3, r3, #3
 8007d14:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7ff faa9 	bl	8007270 <WIZCHIP_READ>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b17      	cmp	r3, #23
 8007d22:	d1c9      	bne.n	8007cb8 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8007d24:	2301      	movs	r3, #1
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	200009cc 	.word	0x200009cc

08007d34 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8007d3e:	79fb      	ldrb	r3, [r7, #7]
 8007d40:	2b08      	cmp	r3, #8
 8007d42:	d902      	bls.n	8007d4a <disconnect+0x16>
 8007d44:	f04f 33ff 	mov.w	r3, #4294967295
 8007d48:	e062      	b.n	8007e10 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8007d4a:	79fb      	ldrb	r3, [r7, #7]
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	3301      	adds	r3, #1
 8007d50:	00db      	lsls	r3, r3, #3
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7ff fa8c 	bl	8007270 <WIZCHIP_READ>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	f003 030f 	and.w	r3, r3, #15
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d002      	beq.n	8007d68 <disconnect+0x34>
 8007d62:	f06f 0304 	mvn.w	r3, #4
 8007d66:	e053      	b.n	8007e10 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8007d68:	79fb      	ldrb	r3, [r7, #7]
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	00db      	lsls	r3, r3, #3
 8007d70:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007d74:	2108      	movs	r1, #8
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7ff fac6 	bl	8007308 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8007d7c:	bf00      	nop
 8007d7e:	79fb      	ldrb	r3, [r7, #7]
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	3301      	adds	r3, #1
 8007d84:	00db      	lsls	r3, r3, #3
 8007d86:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7ff fa70 	bl	8007270 <WIZCHIP_READ>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1f3      	bne.n	8007d7e <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8007d96:	79fb      	ldrb	r3, [r7, #7]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d9e:	b21b      	sxth	r3, r3
 8007da0:	43db      	mvns	r3, r3
 8007da2:	b21a      	sxth	r2, r3
 8007da4:	4b1c      	ldr	r3, [pc, #112]	; (8007e18 <disconnect+0xe4>)
 8007da6:	881b      	ldrh	r3, [r3, #0]
 8007da8:	b21b      	sxth	r3, r3
 8007daa:	4013      	ands	r3, r2
 8007dac:	b21b      	sxth	r3, r3
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	4b19      	ldr	r3, [pc, #100]	; (8007e18 <disconnect+0xe4>)
 8007db2:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8007db4:	4b19      	ldr	r3, [pc, #100]	; (8007e1c <disconnect+0xe8>)
 8007db6:	881b      	ldrh	r3, [r3, #0]
 8007db8:	461a      	mov	r2, r3
 8007dba:	79fb      	ldrb	r3, [r7, #7]
 8007dbc:	fa42 f303 	asr.w	r3, r2, r3
 8007dc0:	f003 0301 	and.w	r3, r3, #1
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d016      	beq.n	8007df6 <disconnect+0xc2>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	e021      	b.n	8007e10 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8007dcc:	79fb      	ldrb	r3, [r7, #7]
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	00db      	lsls	r3, r3, #3
 8007dd4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f7ff fa49 	bl	8007270 <WIZCHIP_READ>
 8007dde:	4603      	mov	r3, r0
 8007de0:	f003 0308 	and.w	r3, r3, #8
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d006      	beq.n	8007df6 <disconnect+0xc2>
	   {
	      close(sn);
 8007de8:	79fb      	ldrb	r3, [r7, #7]
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7ff fdfe 	bl	80079ec <close>
	      return SOCKERR_TIMEOUT;
 8007df0:	f06f 030c 	mvn.w	r3, #12
 8007df4:	e00c      	b.n	8007e10 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8007df6:	79fb      	ldrb	r3, [r7, #7]
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	00db      	lsls	r3, r3, #3
 8007dfe:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7ff fa34 	bl	8007270 <WIZCHIP_READ>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1de      	bne.n	8007dcc <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8007e0e:	2301      	movs	r3, #1
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3708      	adds	r7, #8
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	200009ce 	.word	0x200009ce
 8007e1c:	200009cc 	.word	0x200009cc

08007e20 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	4603      	mov	r3, r0
 8007e28:	6039      	str	r1, [r7, #0]
 8007e2a:	71fb      	strb	r3, [r7, #7]
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8007e30:	2300      	movs	r3, #0
 8007e32:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8007e34:	2300      	movs	r3, #0
 8007e36:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8007e38:	79fb      	ldrb	r3, [r7, #7]
 8007e3a:	2b08      	cmp	r3, #8
 8007e3c:	d902      	bls.n	8007e44 <send+0x24>
 8007e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e42:	e0de      	b.n	8008002 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8007e44:	79fb      	ldrb	r3, [r7, #7]
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	3301      	adds	r3, #1
 8007e4a:	00db      	lsls	r3, r3, #3
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7ff fa0f 	bl	8007270 <WIZCHIP_READ>
 8007e52:	4603      	mov	r3, r0
 8007e54:	f003 030f 	and.w	r3, r3, #15
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d002      	beq.n	8007e62 <send+0x42>
 8007e5c:	f06f 0304 	mvn.w	r3, #4
 8007e60:	e0cf      	b.n	8008002 <send+0x1e2>
   CHECK_SOCKDATA();
 8007e62:	88bb      	ldrh	r3, [r7, #4]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d102      	bne.n	8007e6e <send+0x4e>
 8007e68:	f06f 030d 	mvn.w	r3, #13
 8007e6c:	e0c9      	b.n	8008002 <send+0x1e2>
   tmp = getSn_SR(sn);
 8007e6e:	79fb      	ldrb	r3, [r7, #7]
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	3301      	adds	r3, #1
 8007e74:	00db      	lsls	r3, r3, #3
 8007e76:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7ff f9f8 	bl	8007270 <WIZCHIP_READ>
 8007e80:	4603      	mov	r3, r0
 8007e82:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8007e84:	7bfb      	ldrb	r3, [r7, #15]
 8007e86:	2b17      	cmp	r3, #23
 8007e88:	d005      	beq.n	8007e96 <send+0x76>
 8007e8a:	7bfb      	ldrb	r3, [r7, #15]
 8007e8c:	2b1c      	cmp	r3, #28
 8007e8e:	d002      	beq.n	8007e96 <send+0x76>
 8007e90:	f06f 0306 	mvn.w	r3, #6
 8007e94:	e0b5      	b.n	8008002 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8007e96:	4b5d      	ldr	r3, [pc, #372]	; (800800c <send+0x1ec>)
 8007e98:	881b      	ldrh	r3, [r3, #0]
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	79fb      	ldrb	r3, [r7, #7]
 8007e9e:	fa42 f303 	asr.w	r3, r2, r3
 8007ea2:	f003 0301 	and.w	r3, r3, #1
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d039      	beq.n	8007f1e <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8007eaa:	79fb      	ldrb	r3, [r7, #7]
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	3301      	adds	r3, #1
 8007eb0:	00db      	lsls	r3, r3, #3
 8007eb2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7ff f9da 	bl	8007270 <WIZCHIP_READ>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	f003 031f 	and.w	r3, r3, #31
 8007ec2:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
 8007ec6:	f003 0310 	and.w	r3, r3, #16
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d019      	beq.n	8007f02 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8007ece:	79fb      	ldrb	r3, [r7, #7]
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	00db      	lsls	r3, r3, #3
 8007ed6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007eda:	2110      	movs	r1, #16
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7ff fa13 	bl	8007308 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8007ee2:	79fb      	ldrb	r3, [r7, #7]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eea:	b21b      	sxth	r3, r3
 8007eec:	43db      	mvns	r3, r3
 8007eee:	b21a      	sxth	r2, r3
 8007ef0:	4b46      	ldr	r3, [pc, #280]	; (800800c <send+0x1ec>)
 8007ef2:	881b      	ldrh	r3, [r3, #0]
 8007ef4:	b21b      	sxth	r3, r3
 8007ef6:	4013      	ands	r3, r2
 8007ef8:	b21b      	sxth	r3, r3
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	4b43      	ldr	r3, [pc, #268]	; (800800c <send+0x1ec>)
 8007efe:	801a      	strh	r2, [r3, #0]
 8007f00:	e00d      	b.n	8007f1e <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
 8007f04:	f003 0308 	and.w	r3, r3, #8
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d006      	beq.n	8007f1a <send+0xfa>
      {
         close(sn);
 8007f0c:	79fb      	ldrb	r3, [r7, #7]
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7ff fd6c 	bl	80079ec <close>
         return SOCKERR_TIMEOUT;
 8007f14:	f06f 030c 	mvn.w	r3, #12
 8007f18:	e073      	b.n	8008002 <send+0x1e2>
      }
      else return SOCK_BUSY;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	e071      	b.n	8008002 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8007f1e:	79fb      	ldrb	r3, [r7, #7]
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	3301      	adds	r3, #1
 8007f24:	00db      	lsls	r3, r3, #3
 8007f26:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7ff f9a0 	bl	8007270 <WIZCHIP_READ>
 8007f30:	4603      	mov	r3, r0
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	029b      	lsls	r3, r3, #10
 8007f36:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8007f38:	88ba      	ldrh	r2, [r7, #4]
 8007f3a:	89bb      	ldrh	r3, [r7, #12]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d901      	bls.n	8007f44 <send+0x124>
 8007f40:	89bb      	ldrh	r3, [r7, #12]
 8007f42:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8007f44:	79fb      	ldrb	r3, [r7, #7]
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7ff faec 	bl	8007524 <getSn_TX_FSR>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8007f50:	79fb      	ldrb	r3, [r7, #7]
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	3301      	adds	r3, #1
 8007f56:	00db      	lsls	r3, r3, #3
 8007f58:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f7ff f987 	bl	8007270 <WIZCHIP_READ>
 8007f62:	4603      	mov	r3, r0
 8007f64:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8007f66:	7bfb      	ldrb	r3, [r7, #15]
 8007f68:	2b17      	cmp	r3, #23
 8007f6a:	d009      	beq.n	8007f80 <send+0x160>
 8007f6c:	7bfb      	ldrb	r3, [r7, #15]
 8007f6e:	2b1c      	cmp	r3, #28
 8007f70:	d006      	beq.n	8007f80 <send+0x160>
      {
         close(sn);
 8007f72:	79fb      	ldrb	r3, [r7, #7]
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7ff fd39 	bl	80079ec <close>
         return SOCKERR_SOCKSTATUS;
 8007f7a:	f06f 0306 	mvn.w	r3, #6
 8007f7e:	e040      	b.n	8008002 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8007f80:	4b23      	ldr	r3, [pc, #140]	; (8008010 <send+0x1f0>)
 8007f82:	881b      	ldrh	r3, [r3, #0]
 8007f84:	461a      	mov	r2, r3
 8007f86:	79fb      	ldrb	r3, [r7, #7]
 8007f88:	fa42 f303 	asr.w	r3, r2, r3
 8007f8c:	f003 0301 	and.w	r3, r3, #1
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d005      	beq.n	8007fa0 <send+0x180>
 8007f94:	88ba      	ldrh	r2, [r7, #4]
 8007f96:	89bb      	ldrh	r3, [r7, #12]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d901      	bls.n	8007fa0 <send+0x180>
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	e030      	b.n	8008002 <send+0x1e2>
      if(len <= freesize) break;
 8007fa0:	88ba      	ldrh	r2, [r7, #4]
 8007fa2:	89bb      	ldrh	r3, [r7, #12]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d900      	bls.n	8007faa <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8007fa8:	e7cc      	b.n	8007f44 <send+0x124>
      if(len <= freesize) break;
 8007faa:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8007fac:	88ba      	ldrh	r2, [r7, #4]
 8007fae:	79fb      	ldrb	r3, [r7, #7]
 8007fb0:	6839      	ldr	r1, [r7, #0]
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7ff fb4c 	bl	8007650 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8007fb8:	79fb      	ldrb	r3, [r7, #7]
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	00db      	lsls	r3, r3, #3
 8007fc0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007fc4:	2120      	movs	r1, #32
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7ff f99e 	bl	8007308 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8007fcc:	bf00      	nop
 8007fce:	79fb      	ldrb	r3, [r7, #7]
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	00db      	lsls	r3, r3, #3
 8007fd6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7ff f948 	bl	8007270 <WIZCHIP_READ>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d1f3      	bne.n	8007fce <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8007fe6:	79fb      	ldrb	r3, [r7, #7]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	fa02 f303 	lsl.w	r3, r2, r3
 8007fee:	b21a      	sxth	r2, r3
 8007ff0:	4b06      	ldr	r3, [pc, #24]	; (800800c <send+0x1ec>)
 8007ff2:	881b      	ldrh	r3, [r3, #0]
 8007ff4:	b21b      	sxth	r3, r3
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	b21b      	sxth	r3, r3
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	4b03      	ldr	r3, [pc, #12]	; (800800c <send+0x1ec>)
 8007ffe:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8008000:	88bb      	ldrh	r3, [r7, #4]
}
 8008002:	4618      	mov	r0, r3
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	200009ce 	.word	0x200009ce
 8008010:	200009cc 	.word	0x200009cc

08008014 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8008014:	b590      	push	{r4, r7, lr}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	4603      	mov	r3, r0
 800801c:	6039      	str	r1, [r7, #0]
 800801e:	71fb      	strb	r3, [r7, #7]
 8008020:	4613      	mov	r3, r2
 8008022:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8008024:	2300      	movs	r3, #0
 8008026:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8008028:	2300      	movs	r3, #0
 800802a:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 800802c:	79fb      	ldrb	r3, [r7, #7]
 800802e:	2b08      	cmp	r3, #8
 8008030:	d902      	bls.n	8008038 <recv+0x24>
 8008032:	f04f 33ff 	mov.w	r3, #4294967295
 8008036:	e09c      	b.n	8008172 <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8008038:	79fb      	ldrb	r3, [r7, #7]
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	3301      	adds	r3, #1
 800803e:	00db      	lsls	r3, r3, #3
 8008040:	4618      	mov	r0, r3
 8008042:	f7ff f915 	bl	8007270 <WIZCHIP_READ>
 8008046:	4603      	mov	r3, r0
 8008048:	f003 030f 	and.w	r3, r3, #15
 800804c:	2b01      	cmp	r3, #1
 800804e:	d002      	beq.n	8008056 <recv+0x42>
 8008050:	f06f 0304 	mvn.w	r3, #4
 8008054:	e08d      	b.n	8008172 <recv+0x15e>
   CHECK_SOCKDATA();
 8008056:	88bb      	ldrh	r3, [r7, #4]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d102      	bne.n	8008062 <recv+0x4e>
 800805c:	f06f 030d 	mvn.w	r3, #13
 8008060:	e087      	b.n	8008172 <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 8008062:	79fb      	ldrb	r3, [r7, #7]
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	3301      	adds	r3, #1
 8008068:	00db      	lsls	r3, r3, #3
 800806a:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800806e:	4618      	mov	r0, r3
 8008070:	f7ff f8fe 	bl	8007270 <WIZCHIP_READ>
 8008074:	4603      	mov	r3, r0
 8008076:	b29b      	uxth	r3, r3
 8008078:	029b      	lsls	r3, r3, #10
 800807a:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 800807c:	89ba      	ldrh	r2, [r7, #12]
 800807e:	88bb      	ldrh	r3, [r7, #4]
 8008080:	429a      	cmp	r2, r3
 8008082:	d201      	bcs.n	8008088 <recv+0x74>
 8008084:	89bb      	ldrh	r3, [r7, #12]
 8008086:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8008088:	79fb      	ldrb	r3, [r7, #7]
 800808a:	4618      	mov	r0, r3
 800808c:	f7ff fa95 	bl	80075ba <getSn_RX_RSR>
 8008090:	4603      	mov	r3, r0
 8008092:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8008094:	79fb      	ldrb	r3, [r7, #7]
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	3301      	adds	r3, #1
 800809a:	00db      	lsls	r3, r3, #3
 800809c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7ff f8e5 	bl	8007270 <WIZCHIP_READ>
 80080a6:	4603      	mov	r3, r0
 80080a8:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 80080aa:	7bfb      	ldrb	r3, [r7, #15]
 80080ac:	2b17      	cmp	r3, #23
 80080ae:	d026      	beq.n	80080fe <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
 80080b2:	2b1c      	cmp	r3, #28
 80080b4:	d11c      	bne.n	80080f0 <recv+0xdc>
            {
               if(recvsize != 0) break;
 80080b6:	89bb      	ldrh	r3, [r7, #12]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d133      	bne.n	8008124 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80080bc:	79fb      	ldrb	r3, [r7, #7]
 80080be:	4618      	mov	r0, r3
 80080c0:	f7ff fa30 	bl	8007524 <getSn_TX_FSR>
 80080c4:	4603      	mov	r3, r0
 80080c6:	461c      	mov	r4, r3
 80080c8:	79fb      	ldrb	r3, [r7, #7]
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	3301      	adds	r3, #1
 80080ce:	00db      	lsls	r3, r3, #3
 80080d0:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7ff f8cb 	bl	8007270 <WIZCHIP_READ>
 80080da:	4603      	mov	r3, r0
 80080dc:	029b      	lsls	r3, r3, #10
 80080de:	429c      	cmp	r4, r3
 80080e0:	d10d      	bne.n	80080fe <recv+0xea>
               {
                  close(sn);
 80080e2:	79fb      	ldrb	r3, [r7, #7]
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7ff fc81 	bl	80079ec <close>
                  return SOCKERR_SOCKSTATUS;
 80080ea:	f06f 0306 	mvn.w	r3, #6
 80080ee:	e040      	b.n	8008172 <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 80080f0:	79fb      	ldrb	r3, [r7, #7]
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7ff fc7a 	bl	80079ec <close>
               return SOCKERR_SOCKSTATUS;
 80080f8:	f06f 0306 	mvn.w	r3, #6
 80080fc:	e039      	b.n	8008172 <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80080fe:	4b1f      	ldr	r3, [pc, #124]	; (800817c <recv+0x168>)
 8008100:	881b      	ldrh	r3, [r3, #0]
 8008102:	461a      	mov	r2, r3
 8008104:	79fb      	ldrb	r3, [r7, #7]
 8008106:	fa42 f303 	asr.w	r3, r2, r3
 800810a:	f003 0301 	and.w	r3, r3, #1
 800810e:	2b00      	cmp	r3, #0
 8008110:	d004      	beq.n	800811c <recv+0x108>
 8008112:	89bb      	ldrh	r3, [r7, #12]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d101      	bne.n	800811c <recv+0x108>
 8008118:	2300      	movs	r3, #0
 800811a:	e02a      	b.n	8008172 <recv+0x15e>
         if(recvsize != 0) break;
 800811c:	89bb      	ldrh	r3, [r7, #12]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d102      	bne.n	8008128 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 8008122:	e7b1      	b.n	8008088 <recv+0x74>
               if(recvsize != 0) break;
 8008124:	bf00      	nop
 8008126:	e000      	b.n	800812a <recv+0x116>
         if(recvsize != 0) break;
 8008128:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 800812a:	89ba      	ldrh	r2, [r7, #12]
 800812c:	88bb      	ldrh	r3, [r7, #4]
 800812e:	429a      	cmp	r2, r3
 8008130:	d201      	bcs.n	8008136 <recv+0x122>
 8008132:	89bb      	ldrh	r3, [r7, #12]
 8008134:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8008136:	88ba      	ldrh	r2, [r7, #4]
 8008138:	79fb      	ldrb	r3, [r7, #7]
 800813a:	6839      	ldr	r1, [r7, #0]
 800813c:	4618      	mov	r0, r3
 800813e:	f7ff fae3 	bl	8007708 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8008142:	79fb      	ldrb	r3, [r7, #7]
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	3301      	adds	r3, #1
 8008148:	00db      	lsls	r3, r3, #3
 800814a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800814e:	2140      	movs	r1, #64	; 0x40
 8008150:	4618      	mov	r0, r3
 8008152:	f7ff f8d9 	bl	8007308 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8008156:	bf00      	nop
 8008158:	79fb      	ldrb	r3, [r7, #7]
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	3301      	adds	r3, #1
 800815e:	00db      	lsls	r3, r3, #3
 8008160:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008164:	4618      	mov	r0, r3
 8008166:	f7ff f883 	bl	8007270 <WIZCHIP_READ>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1f3      	bne.n	8008158 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8008170:	88bb      	ldrh	r3, [r7, #4]
}
 8008172:	4618      	mov	r0, r3
 8008174:	3714      	adds	r7, #20
 8008176:	46bd      	mov	sp, r7
 8008178:	bd90      	pop	{r4, r7, pc}
 800817a:	bf00      	nop
 800817c:	200009cc 	.word	0x200009cc

08008180 <getsockopt>:
   }   
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
 8008180:	b590      	push	{r4, r7, lr}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	4603      	mov	r3, r0
 8008188:	603a      	str	r2, [r7, #0]
 800818a:	71fb      	strb	r3, [r7, #7]
 800818c:	460b      	mov	r3, r1
 800818e:	71bb      	strb	r3, [r7, #6]
   CHECK_SOCKNUM();
 8008190:	79fb      	ldrb	r3, [r7, #7]
 8008192:	2b08      	cmp	r3, #8
 8008194:	d902      	bls.n	800819c <getsockopt+0x1c>
 8008196:	f04f 33ff 	mov.w	r3, #4294967295
 800819a:	e101      	b.n	80083a0 <getsockopt+0x220>
   switch(sotype)
 800819c:	79bb      	ldrb	r3, [r7, #6]
 800819e:	2b0c      	cmp	r3, #12
 80081a0:	f200 80fa 	bhi.w	8008398 <getsockopt+0x218>
 80081a4:	a201      	add	r2, pc, #4	; (adr r2, 80081ac <getsockopt+0x2c>)
 80081a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081aa:	bf00      	nop
 80081ac:	080081e1 	.word	0x080081e1
 80081b0:	080081fd 	.word	0x080081fd
 80081b4:	08008219 	.word	0x08008219
 80081b8:	08008235 	.word	0x08008235
 80081bc:	0800826f 	.word	0x0800826f
 80081c0:	08008287 	.word	0x08008287
 80081c4:	08008399 	.word	0x08008399
 80081c8:	080082c1 	.word	0x080082c1
 80081cc:	080082fb 	.word	0x080082fb
 80081d0:	0800830d 	.word	0x0800830d
 80081d4:	0800831f 	.word	0x0800831f
 80081d8:	0800833b 	.word	0x0800833b
 80081dc:	08008373 	.word	0x08008373
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
 80081e0:	79fb      	ldrb	r3, [r7, #7]
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	3301      	adds	r3, #1
 80081e6:	00db      	lsls	r3, r3, #3
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7ff f841 	bl	8007270 <WIZCHIP_READ>
 80081ee:	4603      	mov	r3, r0
 80081f0:	f023 030f 	bic.w	r3, r3, #15
 80081f4:	b2da      	uxtb	r2, r3
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	701a      	strb	r2, [r3, #0]
         break;
 80081fa:	e0d0      	b.n	800839e <getsockopt+0x21e>
      case SO_TTL:
         *(uint8_t*) arg = getSn_TTL(sn);
 80081fc:	79fb      	ldrb	r3, [r7, #7]
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	3301      	adds	r3, #1
 8008202:	00db      	lsls	r3, r3, #3
 8008204:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 8008208:	4618      	mov	r0, r3
 800820a:	f7ff f831 	bl	8007270 <WIZCHIP_READ>
 800820e:	4603      	mov	r3, r0
 8008210:	461a      	mov	r2, r3
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	701a      	strb	r2, [r3, #0]
         break;
 8008216:	e0c2      	b.n	800839e <getsockopt+0x21e>
      case SO_TOS:
         *(uint8_t*) arg = getSn_TOS(sn);
 8008218:	79fb      	ldrb	r3, [r7, #7]
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	3301      	adds	r3, #1
 800821e:	00db      	lsls	r3, r3, #3
 8008220:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 8008224:	4618      	mov	r0, r3
 8008226:	f7ff f823 	bl	8007270 <WIZCHIP_READ>
 800822a:	4603      	mov	r3, r0
 800822c:	461a      	mov	r2, r3
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	701a      	strb	r2, [r3, #0]
         break;
 8008232:	e0b4      	b.n	800839e <getsockopt+0x21e>
      case SO_MSS:   
         *(uint16_t*) arg = getSn_MSSR(sn);
 8008234:	79fb      	ldrb	r3, [r7, #7]
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	3301      	adds	r3, #1
 800823a:	00db      	lsls	r3, r3, #3
 800823c:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8008240:	4618      	mov	r0, r3
 8008242:	f7ff f815 	bl	8007270 <WIZCHIP_READ>
 8008246:	4603      	mov	r3, r0
 8008248:	b29b      	uxth	r3, r3
 800824a:	021b      	lsls	r3, r3, #8
 800824c:	b29c      	uxth	r4, r3
 800824e:	79fb      	ldrb	r3, [r7, #7]
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	3301      	adds	r3, #1
 8008254:	00db      	lsls	r3, r3, #3
 8008256:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800825a:	4618      	mov	r0, r3
 800825c:	f7ff f808 	bl	8007270 <WIZCHIP_READ>
 8008260:	4603      	mov	r3, r0
 8008262:	b29b      	uxth	r3, r3
 8008264:	4423      	add	r3, r4
 8008266:	b29a      	uxth	r2, r3
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	801a      	strh	r2, [r3, #0]
         break;
 800826c:	e097      	b.n	800839e <getsockopt+0x21e>
      case SO_DESTIP:
         getSn_DIPR(sn, (uint8_t*)arg);
 800826e:	79fb      	ldrb	r3, [r7, #7]
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	3301      	adds	r3, #1
 8008274:	00db      	lsls	r3, r3, #3
 8008276:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800827a:	2204      	movs	r2, #4
 800827c:	6839      	ldr	r1, [r7, #0]
 800827e:	4618      	mov	r0, r3
 8008280:	f7ff f890 	bl	80073a4 <WIZCHIP_READ_BUF>
         break;
 8008284:	e08b      	b.n	800839e <getsockopt+0x21e>
      case SO_DESTPORT:  
         *(uint16_t*) arg = getSn_DPORT(sn);
 8008286:	79fb      	ldrb	r3, [r7, #7]
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	3301      	adds	r3, #1
 800828c:	00db      	lsls	r3, r3, #3
 800828e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008292:	4618      	mov	r0, r3
 8008294:	f7fe ffec 	bl	8007270 <WIZCHIP_READ>
 8008298:	4603      	mov	r3, r0
 800829a:	b29b      	uxth	r3, r3
 800829c:	021b      	lsls	r3, r3, #8
 800829e:	b29c      	uxth	r4, r3
 80082a0:	79fb      	ldrb	r3, [r7, #7]
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	3301      	adds	r3, #1
 80082a6:	00db      	lsls	r3, r3, #3
 80082a8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7fe ffdf 	bl	8007270 <WIZCHIP_READ>
 80082b2:	4603      	mov	r3, r0
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	4423      	add	r3, r4
 80082b8:	b29a      	uxth	r2, r3
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	801a      	strh	r2, [r3, #0]
         break;
 80082be:	e06e      	b.n	800839e <getsockopt+0x21e>
   #if _WIZCHIP_ > 5200   
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
 80082c0:	79fb      	ldrb	r3, [r7, #7]
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	3301      	adds	r3, #1
 80082c6:	00db      	lsls	r3, r3, #3
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7fe ffd1 	bl	8007270 <WIZCHIP_READ>
 80082ce:	4603      	mov	r3, r0
 80082d0:	f003 030f 	and.w	r3, r3, #15
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d002      	beq.n	80082de <getsockopt+0x15e>
 80082d8:	f06f 0304 	mvn.w	r3, #4
 80082dc:	e060      	b.n	80083a0 <getsockopt+0x220>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 80082de:	79fb      	ldrb	r3, [r7, #7]
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	3301      	adds	r3, #1
 80082e4:	00db      	lsls	r3, r3, #3
 80082e6:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7fe ffc0 	bl	8007270 <WIZCHIP_READ>
 80082f0:	4603      	mov	r3, r0
 80082f2:	b29a      	uxth	r2, r3
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	801a      	strh	r2, [r3, #0]
         break;
 80082f8:	e051      	b.n	800839e <getsockopt+0x21e>
   #endif      
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 80082fa:	79fb      	ldrb	r3, [r7, #7]
 80082fc:	4618      	mov	r0, r3
 80082fe:	f7ff f911 	bl	8007524 <getSn_TX_FSR>
 8008302:	4603      	mov	r3, r0
 8008304:	461a      	mov	r2, r3
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	801a      	strh	r2, [r3, #0]
         break;
 800830a:	e048      	b.n	800839e <getsockopt+0x21e>
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
 800830c:	79fb      	ldrb	r3, [r7, #7]
 800830e:	4618      	mov	r0, r3
 8008310:	f7ff f953 	bl	80075ba <getSn_RX_RSR>
 8008314:	4603      	mov	r3, r0
 8008316:	461a      	mov	r2, r3
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	801a      	strh	r2, [r3, #0]
         break;
 800831c:	e03f      	b.n	800839e <getsockopt+0x21e>
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
 800831e:	79fb      	ldrb	r3, [r7, #7]
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	3301      	adds	r3, #1
 8008324:	00db      	lsls	r3, r3, #3
 8008326:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800832a:	4618      	mov	r0, r3
 800832c:	f7fe ffa0 	bl	8007270 <WIZCHIP_READ>
 8008330:	4603      	mov	r3, r0
 8008332:	461a      	mov	r2, r3
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	701a      	strb	r2, [r3, #0]
         break;
 8008338:	e031      	b.n	800839e <getsockopt+0x21e>
      case SO_REMAINSIZE:
         if(getSn_MR(sn) & Sn_MR_TCP)
 800833a:	79fb      	ldrb	r3, [r7, #7]
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	3301      	adds	r3, #1
 8008340:	00db      	lsls	r3, r3, #3
 8008342:	4618      	mov	r0, r3
 8008344:	f7fe ff94 	bl	8007270 <WIZCHIP_READ>
 8008348:	4603      	mov	r3, r0
 800834a:	f003 0301 	and.w	r3, r3, #1
 800834e:	2b00      	cmp	r3, #0
 8008350:	d008      	beq.n	8008364 <getsockopt+0x1e4>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 8008352:	79fb      	ldrb	r3, [r7, #7]
 8008354:	4618      	mov	r0, r3
 8008356:	f7ff f930 	bl	80075ba <getSn_RX_RSR>
 800835a:	4603      	mov	r3, r0
 800835c:	461a      	mov	r2, r3
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	801a      	strh	r2, [r3, #0]
         else
            *(uint16_t*)arg = sock_remained_size[sn];
         break;
 8008362:	e01c      	b.n	800839e <getsockopt+0x21e>
            *(uint16_t*)arg = sock_remained_size[sn];
 8008364:	79fb      	ldrb	r3, [r7, #7]
 8008366:	4a10      	ldr	r2, [pc, #64]	; (80083a8 <getsockopt+0x228>)
 8008368:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	801a      	strh	r2, [r3, #0]
         break;
 8008370:	e015      	b.n	800839e <getsockopt+0x21e>
      case SO_PACKINFO:
         //CHECK_SOCKMODE(Sn_MR_TCP);
#if _WIZCHIP_ != 5300
         if((getSn_MR(sn) == Sn_MR_TCP))
 8008372:	79fb      	ldrb	r3, [r7, #7]
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	3301      	adds	r3, #1
 8008378:	00db      	lsls	r3, r3, #3
 800837a:	4618      	mov	r0, r3
 800837c:	f7fe ff78 	bl	8007270 <WIZCHIP_READ>
 8008380:	4603      	mov	r3, r0
 8008382:	2b01      	cmp	r3, #1
 8008384:	d102      	bne.n	800838c <getsockopt+0x20c>
             return SOCKERR_SOCKMODE;
 8008386:	f06f 0304 	mvn.w	r3, #4
 800838a:	e009      	b.n	80083a0 <getsockopt+0x220>
#endif
         *(uint8_t*)arg = sock_pack_info[sn];
 800838c:	79fb      	ldrb	r3, [r7, #7]
 800838e:	4a07      	ldr	r2, [pc, #28]	; (80083ac <getsockopt+0x22c>)
 8008390:	5cd2      	ldrb	r2, [r2, r3]
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	701a      	strb	r2, [r3, #0]
         break;
 8008396:	e002      	b.n	800839e <getsockopt+0x21e>
      default:
         return SOCKERR_SOCKOPT;
 8008398:	f06f 0301 	mvn.w	r3, #1
 800839c:	e000      	b.n	80083a0 <getsockopt+0x220>
   }
   return SOCK_OK;
 800839e:	2301      	movs	r3, #1
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd90      	pop	{r4, r7, pc}
 80083a8:	200009d0 	.word	0x200009d0
 80083ac:	200009e0 	.word	0x200009e0

080083b0 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80083b0:	b480      	push	{r7}
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	bf00      	nop
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr

080083be <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80083be:	b480      	push	{r7}
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	bf00      	nop
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80083cc:	b480      	push	{r7}
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	bf00      	nop
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr

080083da <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 80083da:	b480      	push	{r7}
 80083dc:	af00      	add	r7, sp, #0
 80083de:	bf00      	nop
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	4618      	mov	r0, r3
 80083f8:	370c      	adds	r7, #12
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr

08008402 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8008402:	b480      	push	{r7}
 8008404:	b083      	sub	sp, #12
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
 800840a:	460b      	mov	r3, r1
 800840c:	70fb      	strb	r3, [r7, #3]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	78fa      	ldrb	r2, [r7, #3]
 8008412:	701a      	strb	r2, [r3, #0]
 8008414:	bf00      	nop
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8008420:	b480      	push	{r7}
 8008422:	af00      	add	r7, sp, #0
 8008424:	2300      	movs	r3, #0
 8008426:	4618      	mov	r0, r3
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	4603      	mov	r3, r0
 8008438:	71fb      	strb	r3, [r7, #7]
 800843a:	bf00      	nop
 800843c:	370c      	adds	r7, #12
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr
	...

08008448 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d002      	beq.n	800845e <reg_wizchip_cs_cbfunc+0x16>
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d106      	bne.n	800846c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800845e:	4b0a      	ldr	r3, [pc, #40]	; (8008488 <reg_wizchip_cs_cbfunc+0x40>)
 8008460:	4a0a      	ldr	r2, [pc, #40]	; (800848c <reg_wizchip_cs_cbfunc+0x44>)
 8008462:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8008464:	4b08      	ldr	r3, [pc, #32]	; (8008488 <reg_wizchip_cs_cbfunc+0x40>)
 8008466:	4a0a      	ldr	r2, [pc, #40]	; (8008490 <reg_wizchip_cs_cbfunc+0x48>)
 8008468:	619a      	str	r2, [r3, #24]
 800846a:	e006      	b.n	800847a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 800846c:	4a06      	ldr	r2, [pc, #24]	; (8008488 <reg_wizchip_cs_cbfunc+0x40>)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8008472:	4a05      	ldr	r2, [pc, #20]	; (8008488 <reg_wizchip_cs_cbfunc+0x40>)
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	6193      	str	r3, [r2, #24]
   }
}
 8008478:	bf00      	nop
 800847a:	bf00      	nop
 800847c:	370c      	adds	r7, #12
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop
 8008488:	20000010 	.word	0x20000010
 800848c:	080083cd 	.word	0x080083cd
 8008490:	080083db 	.word	0x080083db

08008494 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800849e:	bf00      	nop
 80084a0:	4b0f      	ldr	r3, [pc, #60]	; (80084e0 <reg_wizchip_spi_cbfunc+0x4c>)
 80084a2:	881b      	ldrh	r3, [r3, #0]
 80084a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d0f9      	beq.n	80084a0 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d002      	beq.n	80084b8 <reg_wizchip_spi_cbfunc+0x24>
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d106      	bne.n	80084c6 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80084b8:	4b09      	ldr	r3, [pc, #36]	; (80084e0 <reg_wizchip_spi_cbfunc+0x4c>)
 80084ba:	4a0a      	ldr	r2, [pc, #40]	; (80084e4 <reg_wizchip_spi_cbfunc+0x50>)
 80084bc:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80084be:	4b08      	ldr	r3, [pc, #32]	; (80084e0 <reg_wizchip_spi_cbfunc+0x4c>)
 80084c0:	4a09      	ldr	r2, [pc, #36]	; (80084e8 <reg_wizchip_spi_cbfunc+0x54>)
 80084c2:	621a      	str	r2, [r3, #32]
 80084c4:	e006      	b.n	80084d4 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80084c6:	4a06      	ldr	r2, [pc, #24]	; (80084e0 <reg_wizchip_spi_cbfunc+0x4c>)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80084cc:	4a04      	ldr	r2, [pc, #16]	; (80084e0 <reg_wizchip_spi_cbfunc+0x4c>)
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	6213      	str	r3, [r2, #32]
   }
}
 80084d2:	bf00      	nop
 80084d4:	bf00      	nop
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr
 80084e0:	20000010 	.word	0x20000010
 80084e4:	08008421 	.word	0x08008421
 80084e8:	08008431 	.word	0x08008431

080084ec <ctlnetwork>:
   return 0;
}


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	4603      	mov	r3, r0
 80084f4:	6039      	str	r1, [r7, #0]
 80084f6:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 80084f8:	79fb      	ldrb	r3, [r7, #7]
 80084fa:	2b05      	cmp	r3, #5
 80084fc:	d82c      	bhi.n	8008558 <ctlnetwork+0x6c>
 80084fe:	a201      	add	r2, pc, #4	; (adr r2, 8008504 <ctlnetwork+0x18>)
 8008500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008504:	0800851d 	.word	0x0800851d
 8008508:	08008525 	.word	0x08008525
 800850c:	0800852d 	.word	0x0800852d
 8008510:	0800853b 	.word	0x0800853b
 8008514:	08008549 	.word	0x08008549
 8008518:	08008551 	.word	0x08008551
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 800851c:	6838      	ldr	r0, [r7, #0]
 800851e:	f000 f8fb 	bl	8008718 <wizchip_setnetinfo>
         break;
 8008522:	e01c      	b.n	800855e <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8008524:	6838      	ldr	r0, [r7, #0]
 8008526:	f000 f937 	bl	8008798 <wizchip_getnetinfo>
         break;
 800852a:	e018      	b.n	800855e <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	4618      	mov	r0, r3
 8008532:	f000 f971 	bl	8008818 <wizchip_setnetmode>
 8008536:	4603      	mov	r3, r0
 8008538:	e012      	b.n	8008560 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 800853a:	f000 f98f 	bl	800885c <wizchip_getnetmode>
 800853e:	4603      	mov	r3, r0
 8008540:	461a      	mov	r2, r3
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	701a      	strb	r2, [r3, #0]
         break;
 8008546:	e00a      	b.n	800855e <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8008548:	6838      	ldr	r0, [r7, #0]
 800854a:	f000 f98f 	bl	800886c <wizchip_settimeout>
         break;
 800854e:	e006      	b.n	800855e <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8008550:	6838      	ldr	r0, [r7, #0]
 8008552:	f000 f9ac 	bl	80088ae <wizchip_gettimeout>
         break;
 8008556:	e002      	b.n	800855e <ctlnetwork+0x72>
      default:
         return -1;
 8008558:	f04f 33ff 	mov.w	r3, #4294967295
 800855c:	e000      	b.n	8008560 <ctlnetwork+0x74>
   }
   return 0;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3708      	adds	r7, #8
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b086      	sub	sp, #24
 800856c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800856e:	1d3b      	adds	r3, r7, #4
 8008570:	2206      	movs	r2, #6
 8008572:	4619      	mov	r1, r3
 8008574:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8008578:	f7fe ff14 	bl	80073a4 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800857c:	f107 0314 	add.w	r3, r7, #20
 8008580:	2204      	movs	r2, #4
 8008582:	4619      	mov	r1, r3
 8008584:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008588:	f7fe ff0c 	bl	80073a4 <WIZCHIP_READ_BUF>
 800858c:	f107 0310 	add.w	r3, r7, #16
 8008590:	2204      	movs	r2, #4
 8008592:	4619      	mov	r1, r3
 8008594:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8008598:	f7fe ff04 	bl	80073a4 <WIZCHIP_READ_BUF>
 800859c:	f107 030c 	add.w	r3, r7, #12
 80085a0:	2204      	movs	r2, #4
 80085a2:	4619      	mov	r1, r3
 80085a4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80085a8:	f7fe fefc 	bl	80073a4 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80085ac:	2180      	movs	r1, #128	; 0x80
 80085ae:	2000      	movs	r0, #0
 80085b0:	f7fe feaa 	bl	8007308 <WIZCHIP_WRITE>
   getMR(); // for delay
 80085b4:	2000      	movs	r0, #0
 80085b6:	f7fe fe5b 	bl	8007270 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80085ba:	1d3b      	adds	r3, r7, #4
 80085bc:	2206      	movs	r2, #6
 80085be:	4619      	mov	r1, r3
 80085c0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80085c4:	f7fe ff4e 	bl	8007464 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80085c8:	f107 0314 	add.w	r3, r7, #20
 80085cc:	2204      	movs	r2, #4
 80085ce:	4619      	mov	r1, r3
 80085d0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80085d4:	f7fe ff46 	bl	8007464 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80085d8:	f107 0310 	add.w	r3, r7, #16
 80085dc:	2204      	movs	r2, #4
 80085de:	4619      	mov	r1, r3
 80085e0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80085e4:	f7fe ff3e 	bl	8007464 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80085e8:	f107 030c 	add.w	r3, r7, #12
 80085ec:	2204      	movs	r2, #4
 80085ee:	4619      	mov	r1, r3
 80085f0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80085f4:	f7fe ff36 	bl	8007464 <WIZCHIP_WRITE_BUF>
}
 80085f8:	bf00      	nop
 80085fa:	3718      	adds	r7, #24
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800860a:	2300      	movs	r3, #0
 800860c:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800860e:	f7ff ffab 	bl	8008568 <wizchip_sw_reset>
   if(txsize)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d03b      	beq.n	8008690 <wizchip_init+0x90>
   {
      tmp = 0;
 8008618:	2300      	movs	r3, #0
 800861a:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800861c:	2300      	movs	r3, #0
 800861e:	73fb      	strb	r3, [r7, #15]
 8008620:	e015      	b.n	800864e <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8008622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	4413      	add	r3, r2
 800862a:	781a      	ldrb	r2, [r3, #0]
 800862c:	7bbb      	ldrb	r3, [r7, #14]
 800862e:	4413      	add	r3, r2
 8008630:	b2db      	uxtb	r3, r3
 8008632:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8008634:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008638:	2b10      	cmp	r3, #16
 800863a:	dd02      	ble.n	8008642 <wizchip_init+0x42>
 800863c:	f04f 33ff 	mov.w	r3, #4294967295
 8008640:	e066      	b.n	8008710 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8008642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008646:	b2db      	uxtb	r3, r3
 8008648:	3301      	adds	r3, #1
 800864a:	b2db      	uxtb	r3, r3
 800864c:	73fb      	strb	r3, [r7, #15]
 800864e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008652:	2b07      	cmp	r3, #7
 8008654:	dde5      	ble.n	8008622 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8008656:	2300      	movs	r3, #0
 8008658:	73fb      	strb	r3, [r7, #15]
 800865a:	e015      	b.n	8008688 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 800865c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	3301      	adds	r3, #1
 8008664:	00db      	lsls	r3, r3, #3
 8008666:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800866a:	4618      	mov	r0, r3
 800866c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	4413      	add	r3, r2
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	4619      	mov	r1, r3
 8008678:	f7fe fe46 	bl	8007308 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800867c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008680:	b2db      	uxtb	r3, r3
 8008682:	3301      	adds	r3, #1
 8008684:	b2db      	uxtb	r3, r3
 8008686:	73fb      	strb	r3, [r7, #15]
 8008688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800868c:	2b07      	cmp	r3, #7
 800868e:	dde5      	ble.n	800865c <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d03b      	beq.n	800870e <wizchip_init+0x10e>
   {
      tmp = 0;
 8008696:	2300      	movs	r3, #0
 8008698:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800869a:	2300      	movs	r3, #0
 800869c:	73fb      	strb	r3, [r7, #15]
 800869e:	e015      	b.n	80086cc <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80086a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086a4:	683a      	ldr	r2, [r7, #0]
 80086a6:	4413      	add	r3, r2
 80086a8:	781a      	ldrb	r2, [r3, #0]
 80086aa:	7bbb      	ldrb	r3, [r7, #14]
 80086ac:	4413      	add	r3, r2
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80086b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086b6:	2b10      	cmp	r3, #16
 80086b8:	dd02      	ble.n	80086c0 <wizchip_init+0xc0>
 80086ba:	f04f 33ff 	mov.w	r3, #4294967295
 80086be:	e027      	b.n	8008710 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80086c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	3301      	adds	r3, #1
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	73fb      	strb	r3, [r7, #15]
 80086cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086d0:	2b07      	cmp	r3, #7
 80086d2:	dde5      	ble.n	80086a0 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80086d4:	2300      	movs	r3, #0
 80086d6:	73fb      	strb	r3, [r7, #15]
 80086d8:	e015      	b.n	8008706 <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80086da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	3301      	adds	r3, #1
 80086e2:	00db      	lsls	r3, r3, #3
 80086e4:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80086e8:	4618      	mov	r0, r3
 80086ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086ee:	683a      	ldr	r2, [r7, #0]
 80086f0:	4413      	add	r3, r2
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	4619      	mov	r1, r3
 80086f6:	f7fe fe07 	bl	8007308 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80086fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	3301      	adds	r3, #1
 8008702:	b2db      	uxtb	r3, r3
 8008704:	73fb      	strb	r3, [r7, #15]
 8008706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800870a:	2b07      	cmp	r3, #7
 800870c:	dde5      	ble.n	80086da <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2206      	movs	r2, #6
 8008724:	4619      	mov	r1, r3
 8008726:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800872a:	f7fe fe9b 	bl	8007464 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	330e      	adds	r3, #14
 8008732:	2204      	movs	r2, #4
 8008734:	4619      	mov	r1, r3
 8008736:	f44f 7080 	mov.w	r0, #256	; 0x100
 800873a:	f7fe fe93 	bl	8007464 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	330a      	adds	r3, #10
 8008742:	2204      	movs	r2, #4
 8008744:	4619      	mov	r1, r3
 8008746:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800874a:	f7fe fe8b 	bl	8007464 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	3306      	adds	r3, #6
 8008752:	2204      	movs	r2, #4
 8008754:	4619      	mov	r1, r3
 8008756:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800875a:	f7fe fe83 	bl	8007464 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	7c9a      	ldrb	r2, [r3, #18]
 8008762:	4b0b      	ldr	r3, [pc, #44]	; (8008790 <wizchip_setnetinfo+0x78>)
 8008764:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	7cda      	ldrb	r2, [r3, #19]
 800876a:	4b09      	ldr	r3, [pc, #36]	; (8008790 <wizchip_setnetinfo+0x78>)
 800876c:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	7d1a      	ldrb	r2, [r3, #20]
 8008772:	4b07      	ldr	r3, [pc, #28]	; (8008790 <wizchip_setnetinfo+0x78>)
 8008774:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	7d5a      	ldrb	r2, [r3, #21]
 800877a:	4b05      	ldr	r3, [pc, #20]	; (8008790 <wizchip_setnetinfo+0x78>)
 800877c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	7d9a      	ldrb	r2, [r3, #22]
 8008782:	4b04      	ldr	r3, [pc, #16]	; (8008794 <wizchip_setnetinfo+0x7c>)
 8008784:	701a      	strb	r2, [r3, #0]
}
 8008786:	bf00      	nop
 8008788:	3708      	adds	r7, #8
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	200009e8 	.word	0x200009e8
 8008794:	200009ec 	.word	0x200009ec

08008798 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2206      	movs	r2, #6
 80087a4:	4619      	mov	r1, r3
 80087a6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80087aa:	f7fe fdfb 	bl	80073a4 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	330e      	adds	r3, #14
 80087b2:	2204      	movs	r2, #4
 80087b4:	4619      	mov	r1, r3
 80087b6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80087ba:	f7fe fdf3 	bl	80073a4 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	330a      	adds	r3, #10
 80087c2:	2204      	movs	r2, #4
 80087c4:	4619      	mov	r1, r3
 80087c6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80087ca:	f7fe fdeb 	bl	80073a4 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	3306      	adds	r3, #6
 80087d2:	2204      	movs	r2, #4
 80087d4:	4619      	mov	r1, r3
 80087d6:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80087da:	f7fe fde3 	bl	80073a4 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 80087de:	4b0c      	ldr	r3, [pc, #48]	; (8008810 <wizchip_getnetinfo+0x78>)
 80087e0:	781a      	ldrb	r2, [r3, #0]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80087e6:	4b0a      	ldr	r3, [pc, #40]	; (8008810 <wizchip_getnetinfo+0x78>)
 80087e8:	785a      	ldrb	r2, [r3, #1]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80087ee:	4b08      	ldr	r3, [pc, #32]	; (8008810 <wizchip_getnetinfo+0x78>)
 80087f0:	789a      	ldrb	r2, [r3, #2]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80087f6:	4b06      	ldr	r3, [pc, #24]	; (8008810 <wizchip_getnetinfo+0x78>)
 80087f8:	78da      	ldrb	r2, [r3, #3]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80087fe:	4b05      	ldr	r3, [pc, #20]	; (8008814 <wizchip_getnetinfo+0x7c>)
 8008800:	781a      	ldrb	r2, [r3, #0]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	759a      	strb	r2, [r3, #22]
}
 8008806:	bf00      	nop
 8008808:	3708      	adds	r7, #8
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	200009e8 	.word	0x200009e8
 8008814:	200009ec 	.word	0x200009ec

08008818 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	4603      	mov	r3, r0
 8008820:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8008822:	2300      	movs	r3, #0
 8008824:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8008826:	79fb      	ldrb	r3, [r7, #7]
 8008828:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800882c:	2b00      	cmp	r3, #0
 800882e:	d002      	beq.n	8008836 <wizchip_setnetmode+0x1e>
 8008830:	f04f 33ff 	mov.w	r3, #4294967295
 8008834:	e00e      	b.n	8008854 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8008836:	2000      	movs	r0, #0
 8008838:	f7fe fd1a 	bl	8007270 <WIZCHIP_READ>
 800883c:	4603      	mov	r3, r0
 800883e:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8008840:	7bfa      	ldrb	r2, [r7, #15]
 8008842:	79fb      	ldrb	r3, [r7, #7]
 8008844:	4313      	orrs	r3, r2
 8008846:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8008848:	7bfb      	ldrb	r3, [r7, #15]
 800884a:	4619      	mov	r1, r3
 800884c:	2000      	movs	r0, #0
 800884e:	f7fe fd5b 	bl	8007308 <WIZCHIP_WRITE>
   return 0;
 8008852:	2300      	movs	r3, #0
}
 8008854:	4618      	mov	r0, r3
 8008856:	3710      	adds	r7, #16
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8008860:	2000      	movs	r0, #0
 8008862:	f7fe fd05 	bl	8007270 <WIZCHIP_READ>
 8008866:	4603      	mov	r3, r0
}
 8008868:	4618      	mov	r0, r3
 800886a:	bd80      	pop	{r7, pc}

0800886c <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	4619      	mov	r1, r3
 800887a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800887e:	f7fe fd43 	bl	8007308 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	885b      	ldrh	r3, [r3, #2]
 8008886:	0a1b      	lsrs	r3, r3, #8
 8008888:	b29b      	uxth	r3, r3
 800888a:	b2db      	uxtb	r3, r3
 800888c:	4619      	mov	r1, r3
 800888e:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8008892:	f7fe fd39 	bl	8007308 <WIZCHIP_WRITE>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	885b      	ldrh	r3, [r3, #2]
 800889a:	b2db      	uxtb	r3, r3
 800889c:	4619      	mov	r1, r3
 800889e:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 80088a2:	f7fe fd31 	bl	8007308 <WIZCHIP_WRITE>
}
 80088a6:	bf00      	nop
 80088a8:	3708      	adds	r7, #8
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 80088ae:	b590      	push	{r4, r7, lr}
 80088b0:	b083      	sub	sp, #12
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 80088b6:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 80088ba:	f7fe fcd9 	bl	8007270 <WIZCHIP_READ>
 80088be:	4603      	mov	r3, r0
 80088c0:	461a      	mov	r2, r3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 80088c6:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 80088ca:	f7fe fcd1 	bl	8007270 <WIZCHIP_READ>
 80088ce:	4603      	mov	r3, r0
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	021b      	lsls	r3, r3, #8
 80088d4:	b29c      	uxth	r4, r3
 80088d6:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 80088da:	f7fe fcc9 	bl	8007270 <WIZCHIP_READ>
 80088de:	4603      	mov	r3, r0
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	4423      	add	r3, r4
 80088e4:	b29a      	uxth	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	805a      	strh	r2, [r3, #2]
}
 80088ea:	bf00      	nop
 80088ec:	370c      	adds	r7, #12
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd90      	pop	{r4, r7, pc}
	...

080088f4 <scan_files>:
FRESULT scan_files (char* path, char* dbuf, int* size); /* Start node to be scanned (***also used as work area***) */

// Funciones modificadas para el FTP:
/*La siguiente funcion escanea los archivos en la SD y devuelve el buffer completo*/
FRESULT scan_files (char* path, char* dbuf, int* size)/* Start node to be scanned (***also used as work area***) */
{
 80088f4:	b590      	push	{r4, r7, lr}
 80088f6:	b095      	sub	sp, #84	; 0x54
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	607a      	str	r2, [r7, #4]
    static FILINFO fno;
    //char temp[10];
    //strcpy(temp, "/");


    res = f_opendir(&dir, path); /* Open the directory */
 8008900:	f107 0314 	add.w	r3, r7, #20
 8008904:	68f9      	ldr	r1, [r7, #12]
 8008906:	4618      	mov	r0, r3
 8008908:	f005 f8c0 	bl	800da8c <f_opendir>
 800890c:	4603      	mov	r3, r0
 800890e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if(res != FR_OK)
 8008912:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008916:	2b00      	cmp	r3, #0
 8008918:	d001      	beq.n	800891e <scan_files+0x2a>
    	Error_Handler();
 800891a:	f7f8 fc1d 	bl	8001158 <Error_Handler>
    if (res == FR_OK) {
 800891e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008922:	2b00      	cmp	r3, #0
 8008924:	d14b      	bne.n	80089be <scan_files+0xca>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8008926:	f107 0314 	add.w	r3, r7, #20
 800892a:	4928      	ldr	r1, [pc, #160]	; (80089cc <scan_files+0xd8>)
 800892c:	4618      	mov	r0, r3
 800892e:	f005 f956 	bl	800dbde <f_readdir>
 8008932:	4603      	mov	r3, r0
 8008934:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8008938:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800893c:	2b00      	cmp	r3, #0
 800893e:	d139      	bne.n	80089b4 <scan_files+0xc0>
 8008940:	4b22      	ldr	r3, [pc, #136]	; (80089cc <scan_files+0xd8>)
 8008942:	7d9b      	ldrb	r3, [r3, #22]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d035      	beq.n	80089b4 <scan_files+0xc0>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory, si es un directorio */
 8008948:	4b20      	ldr	r3, [pc, #128]	; (80089cc <scan_files+0xd8>)
 800894a:	7a1b      	ldrb	r3, [r3, #8]
 800894c:	f003 0310 	and.w	r3, r3, #16
 8008950:	2b00      	cmp	r3, #0
 8008952:	d01e      	beq.n	8008992 <scan_files+0x9e>
                i = strlen(path);
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f7f7 fc6d 	bl	8000234 <strlen>
 800895a:	64b8      	str	r0, [r7, #72]	; 0x48
                sprintf(&path[i], "/%s", fno.fname);
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008960:	4413      	add	r3, r2
 8008962:	4a1b      	ldr	r2, [pc, #108]	; (80089d0 <scan_files+0xdc>)
 8008964:	491b      	ldr	r1, [pc, #108]	; (80089d4 <scan_files+0xe0>)
 8008966:	4618      	mov	r0, r3
 8008968:	f005 ff16 	bl	800e798 <siprintf>
                res = scan_files(path, dbuf, (int *)&size);                    /* Enter the directory */
 800896c:	1d3b      	adds	r3, r7, #4
 800896e:	461a      	mov	r2, r3
 8008970:	68b9      	ldr	r1, [r7, #8]
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	f7ff ffbe 	bl	80088f4 <scan_files>
 8008978:	4603      	mov	r3, r0
 800897a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if (res != FR_OK) break;
 800897e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008982:	2b00      	cmp	r3, #0
 8008984:	d115      	bne.n	80089b2 <scan_files+0xbe>
                path[i] = 0;
 8008986:	68fa      	ldr	r2, [r7, #12]
 8008988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800898a:	4413      	add	r3, r2
 800898c:	2200      	movs	r2, #0
 800898e:	701a      	strb	r2, [r3, #0]
 8008990:	e7c9      	b.n	8008926 <scan_files+0x32>
            } else {                                       /* It is a file. */
                //printf("%s/%s\n", path, fno.fname);
                i = strlen((char*)dbuf);
 8008992:	68b8      	ldr	r0, [r7, #8]
 8008994:	f7f7 fc4e 	bl	8000234 <strlen>
 8008998:	64b8      	str	r0, [r7, #72]	; 0x48
                *size = sprintf(&dbuf[i], "%s/%s\n", path, fno.fname);
 800899a:	68ba      	ldr	r2, [r7, #8]
 800899c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800899e:	18d0      	adds	r0, r2, r3
 80089a0:	687c      	ldr	r4, [r7, #4]
 80089a2:	4b0b      	ldr	r3, [pc, #44]	; (80089d0 <scan_files+0xdc>)
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	490c      	ldr	r1, [pc, #48]	; (80089d8 <scan_files+0xe4>)
 80089a8:	f005 fef6 	bl	800e798 <siprintf>
 80089ac:	4603      	mov	r3, r0
 80089ae:	6023      	str	r3, [r4, #0]
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80089b0:	e7b9      	b.n	8008926 <scan_files+0x32>
                if (res != FR_OK) break;
 80089b2:	bf00      	nop
            }
        }
        f_closedir(&dir);
 80089b4:	f107 0314 	add.w	r3, r7, #20
 80089b8:	4618      	mov	r0, r3
 80089ba:	f005 f8ea 	bl	800db92 <f_closedir>
    }

    return res;
 80089be:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3754      	adds	r7, #84	; 0x54
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd90      	pop	{r4, r7, pc}
 80089ca:	bf00      	nop
 80089cc:	20000d90 	.word	0x20000d90
 80089d0:	20000da6 	.word	0x20000da6
 80089d4:	0800fdbc 	.word	0x0800fdbc
 80089d8:	0800fdc0 	.word	0x0800fdc0

080089dc <get_filesize>:


/* La siguiente Funcion devuelve el tamaño en bytes de los archivos*/
int get_filesize(char* path, char* filename)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80089e8:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80089ec:	6018      	str	r0, [r3, #0]
 80089ee:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80089f2:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80089f6:	6019      	str	r1, [r3, #0]
	FIL file_s;
	FSIZE_t	o_size;

	if(f_open(&file_s, filename, FA_READ) != FR_OK)
 80089f8:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80089fc:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8008a00:	f107 000c 	add.w	r0, r7, #12
 8008a04:	2201      	movs	r2, #1
 8008a06:	6819      	ldr	r1, [r3, #0]
 8008a08:	f004 fb16 	bl	800d038 <f_open>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d001      	beq.n	8008a16 <get_filesize+0x3a>
	    		Error_Handler();
 8008a12:	f7f8 fba1 	bl	8001158 <Error_Handler>
	o_size = file_s.obj.objsize;
 8008a16:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8008a1a:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
	if(f_close(&file_s) != FR_OK)
 8008a24:	f107 030c 	add.w	r3, r7, #12
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f005 f805 	bl	800da38 <f_close>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d001      	beq.n	8008a38 <get_filesize+0x5c>
	    		Error_Handler();
 8008a34:	f7f8 fb90 	bl	8001158 <Error_Handler>
	return (int) o_size;
 8008a38:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c

}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
	...

08008a48 <ftpd_init>:
*/
	return i;
}

void ftpd_init(char* user, char* pass)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b08a      	sub	sp, #40	; 0x28
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
	uint8_t i;
	uint8_t status;
	wiz_NetInfo gWIZNETINFO;
	ctlnetwork(CN_GET_NETINFO, (void*) &gWIZNETINFO);
 8008a52:	f107 030c 	add.w	r3, r7, #12
 8008a56:	4619      	mov	r1, r3
 8008a58:	2001      	movs	r0, #1
 8008a5a:	f7ff fd47 	bl	80084ec <ctlnetwork>

	ftp.is_login = 0;	//ftp.state = FTPS_NOT_LOGIN;
 8008a5e:	4b34      	ldr	r3, [pc, #208]	; (8008b30 <ftpd_init+0xe8>)
 8008a60:	2200      	movs	r2, #0
 8008a62:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
	ftp.is_active = 1;	//ftp.dsock_mode = ACTIVE_MODE;
 8008a66:	4b32      	ldr	r3, [pc, #200]	; (8008b30 <ftpd_init+0xe8>)
 8008a68:	2201      	movs	r2, #1
 8008a6a:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	//ftp.current_cmd = NO_CMD;
	strcpy(ftp.user, user);
 8008a6e:	6879      	ldr	r1, [r7, #4]
 8008a70:	4830      	ldr	r0, [pc, #192]	; (8008b34 <ftpd_init+0xec>)
 8008a72:	f005 feb1 	bl	800e7d8 <strcpy>
	strcpy(ftp.pass, pass);
 8008a76:	6839      	ldr	r1, [r7, #0]
 8008a78:	482f      	ldr	r0, [pc, #188]	; (8008b38 <ftpd_init+0xf0>)
 8008a7a:	f005 fead 	bl	800e7d8 <strcpy>

	printf("Save_user0: %p\r\n", &ftp);
 8008a7e:	492c      	ldr	r1, [pc, #176]	; (8008b30 <ftpd_init+0xe8>)
 8008a80:	482e      	ldr	r0, [pc, #184]	; (8008b3c <ftpd_init+0xf4>)
 8008a82:	f005 fdd5 	bl	800e630 <iprintf>
	local_ip[0] = gWIZNETINFO.ip[0];
 8008a86:	7cba      	ldrb	r2, [r7, #18]
 8008a88:	4b2d      	ldr	r3, [pc, #180]	; (8008b40 <ftpd_init+0xf8>)
 8008a8a:	701a      	strb	r2, [r3, #0]
	local_ip[1] = gWIZNETINFO.ip[1];
 8008a8c:	7cfa      	ldrb	r2, [r7, #19]
 8008a8e:	4b2c      	ldr	r3, [pc, #176]	; (8008b40 <ftpd_init+0xf8>)
 8008a90:	705a      	strb	r2, [r3, #1]
	local_ip[2] = gWIZNETINFO.ip[2];
 8008a92:	7d3a      	ldrb	r2, [r7, #20]
 8008a94:	4b2a      	ldr	r3, [pc, #168]	; (8008b40 <ftpd_init+0xf8>)
 8008a96:	709a      	strb	r2, [r3, #2]
	local_ip[3] = gWIZNETINFO.ip[3];
 8008a98:	7d7a      	ldrb	r2, [r7, #21]
 8008a9a:	4b29      	ldr	r3, [pc, #164]	; (8008b40 <ftpd_init+0xf8>)
 8008a9c:	70da      	strb	r2, [r3, #3]
	local_port = 35000;
 8008a9e:	4b29      	ldr	r3, [pc, #164]	; (8008b44 <ftpd_init+0xfc>)
 8008aa0:	f648 02b8 	movw	r2, #35000	; 0x88b8
 8008aa4:	801a      	strh	r2, [r3, #0]
	strcpy(ftp.workingdir, "/");
 8008aa6:	4b28      	ldr	r3, [pc, #160]	; (8008b48 <ftpd_init+0x100>)
 8008aa8:	222f      	movs	r2, #47	; 0x2f
 8008aaa:	801a      	strh	r2, [r3, #0]
	
	for(i = 0; i < SOCK_MAX_NUM; i++)
 8008aac:	2300      	movs	r3, #0
 8008aae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008ab2:	e018      	b.n	8008ae6 <ftpd_init+0x9e>
	{
		getsockopt(i, SO_STATUS, &status);
 8008ab4:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8008ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008abc:	210a      	movs	r1, #10
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7ff fb5e 	bl	8008180 <getsockopt>
		if(status == SOCK_CLOSED)
 8008ac4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d107      	bne.n	8008adc <ftpd_init+0x94>
		{
			ftp.ctrl_sock = i++;
 8008acc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ad0:	1c5a      	adds	r2, r3, #1
 8008ad2:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8008ad6:	4a16      	ldr	r2, [pc, #88]	; (8008b30 <ftpd_init+0xe8>)
 8008ad8:	7013      	strb	r3, [r2, #0]
			break;
 8008ada:	e008      	b.n	8008aee <ftpd_init+0xa6>
	for(i = 0; i < SOCK_MAX_NUM; i++)
 8008adc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008ae6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008aea:	2b03      	cmp	r3, #3
 8008aec:	d9e2      	bls.n	8008ab4 <ftpd_init+0x6c>
		}
	}
	for(; i < SOCK_MAX_NUM; i++)
 8008aee:	e015      	b.n	8008b1c <ftpd_init+0xd4>
	{
		getsockopt(i, SO_STATUS, &status);
 8008af0:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8008af4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008af8:	210a      	movs	r1, #10
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7ff fb40 	bl	8008180 <getsockopt>
		if(status == SOCK_CLOSED)
 8008b00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d104      	bne.n	8008b12 <ftpd_init+0xca>
		{
			ftp.data_sock = i;
 8008b08:	4a09      	ldr	r2, [pc, #36]	; (8008b30 <ftpd_init+0xe8>)
 8008b0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b0e:	7053      	strb	r3, [r2, #1]
			break;;
 8008b10:	e009      	b.n	8008b26 <ftpd_init+0xde>
	for(; i < SOCK_MAX_NUM; i++)
 8008b12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b16:	3301      	adds	r3, #1
 8008b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b20:	2b03      	cmp	r3, #3
 8008b22:	d9e5      	bls.n	8008af0 <ftpd_init+0xa8>
		}
	}


}
 8008b24:	bf00      	nop
 8008b26:	bf00      	nop
 8008b28:	3728      	adds	r7, #40	; 0x28
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	20000a00 	.word	0x20000a00
 8008b34:	20000a02 	.word	0x20000a02
 8008b38:	20000a16 	.word	0x20000a16
 8008b3c:	0800fdc8 	.word	0x0800fdc8
 8008b40:	200009f8 	.word	0x200009f8
 8008b44:	200009fc 	.word	0x200009fc
 8008b48:	20000a8e 	.word	0x20000a8e

08008b4c <ftpd_run>:

uint8_t ftpd_run(uint8_t * dbuf)
{
 8008b4c:	b5b0      	push	{r4, r5, r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
	uint16_t size = 0;
 8008b54:	2300      	movs	r3, #0
 8008b56:	81fb      	strh	r3, [r7, #14]
	long ret = 0;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	60bb      	str	r3, [r7, #8]
	//FILINFO fno;
#endif

	//memset(dbuf, 0, sizeof(_MAX_SS ));
	
    switch(getSn_SR(ftp.ctrl_sock))
 8008b5c:	4ba3      	ldr	r3, [pc, #652]	; (8008dec <ftpd_run+0x2a0>)
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	3301      	adds	r3, #1
 8008b64:	00db      	lsls	r3, r3, #3
 8008b66:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7fe fb80 	bl	8007270 <WIZCHIP_READ>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b1c      	cmp	r3, #28
 8008b74:	f200 812f 	bhi.w	8008dd6 <ftpd_run+0x28a>
 8008b78:	a201      	add	r2, pc, #4	; (adr r2, 8008b80 <ftpd_run+0x34>)
 8008b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b7e:	bf00      	nop
 8008b80:	08008d49 	.word	0x08008d49
 8008b84:	08008dd7 	.word	0x08008dd7
 8008b88:	08008dd7 	.word	0x08008dd7
 8008b8c:	08008dd7 	.word	0x08008dd7
 8008b90:	08008dd7 	.word	0x08008dd7
 8008b94:	08008dd7 	.word	0x08008dd7
 8008b98:	08008dd7 	.word	0x08008dd7
 8008b9c:	08008dd7 	.word	0x08008dd7
 8008ba0:	08008dd7 	.word	0x08008dd7
 8008ba4:	08008dd7 	.word	0x08008dd7
 8008ba8:	08008dd7 	.word	0x08008dd7
 8008bac:	08008dd7 	.word	0x08008dd7
 8008bb0:	08008dd7 	.word	0x08008dd7
 8008bb4:	08008dd7 	.word	0x08008dd7
 8008bb8:	08008dd7 	.word	0x08008dd7
 8008bbc:	08008dd7 	.word	0x08008dd7
 8008bc0:	08008dd7 	.word	0x08008dd7
 8008bc4:	08008dd7 	.word	0x08008dd7
 8008bc8:	08008dd7 	.word	0x08008dd7
 8008bcc:	08008d91 	.word	0x08008d91
 8008bd0:	08008dd7 	.word	0x08008dd7
 8008bd4:	08008dd7 	.word	0x08008dd7
 8008bd8:	08008dd7 	.word	0x08008dd7
 8008bdc:	08008bf5 	.word	0x08008bf5
 8008be0:	08008dd7 	.word	0x08008dd7
 8008be4:	08008dd7 	.word	0x08008dd7
 8008be8:	08008dd7 	.word	0x08008dd7
 8008bec:	08008dd7 	.word	0x08008dd7
 8008bf0:	08008d15 	.word	0x08008d15
    {
    	case SOCK_ESTABLISHED :
    		if(!connect_state_control)
 8008bf4:	4b7e      	ldr	r3, [pc, #504]	; (8008df0 <ftpd_run+0x2a4>)
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d132      	bne.n	8008c62 <ftpd_run+0x116>
    		{
#if defined(_FTP_DEBUG_)
    			printf("%d:FTP Connected\r\n", ftp.ctrl_sock);
 8008bfc:	4b7b      	ldr	r3, [pc, #492]	; (8008dec <ftpd_run+0x2a0>)
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	4619      	mov	r1, r3
 8008c02:	487c      	ldr	r0, [pc, #496]	; (8008df4 <ftpd_run+0x2a8>)
 8008c04:	f005 fd14 	bl	800e630 <iprintf>
#endif
    			//fsprintf(ftp.ctrl_sock, banner, HOSTNAME, VERSION);
    			strcpy(ftp.workingdir, "/");
 8008c08:	4b7b      	ldr	r3, [pc, #492]	; (8008df8 <ftpd_run+0x2ac>)
 8008c0a:	222f      	movs	r2, #47	; 0x2f
 8008c0c:	801a      	strh	r2, [r3, #0]
    			sprintf((char *)dbuf, "220 %s FTP version %s ready.\r\n", HOSTNAME, VERSION);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	4b7a      	ldr	r3, [pc, #488]	; (8008dfc <ftpd_run+0x2b0>)
 8008c12:	4a7b      	ldr	r2, [pc, #492]	; (8008e00 <ftpd_run+0x2b4>)
 8008c14:	497b      	ldr	r1, [pc, #492]	; (8008e04 <ftpd_run+0x2b8>)
 8008c16:	f005 fdbf 	bl	800e798 <siprintf>
    			ret = send(ftp.ctrl_sock, (uint8_t *)dbuf, strlen((const char *)dbuf));
 8008c1a:	4b74      	ldr	r3, [pc, #464]	; (8008dec <ftpd_run+0x2a0>)
 8008c1c:	781c      	ldrb	r4, [r3, #0]
 8008c1e:	687d      	ldr	r5, [r7, #4]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7f7 fb06 	bl	8000234 <strlen>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	4629      	mov	r1, r5
 8008c30:	4620      	mov	r0, r4
 8008c32:	f7ff f8f5 	bl	8007e20 <send>
 8008c36:	60b8      	str	r0, [r7, #8]
    			if(ret < 0)
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	da0e      	bge.n	8008c5c <ftpd_run+0x110>
    			{
#if defined(_FTP_DEBUG_)
    				printf("%d:send() error:%ld\r\n",ftp.ctrl_sock,ret);
 8008c3e:	4b6b      	ldr	r3, [pc, #428]	; (8008dec <ftpd_run+0x2a0>)
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	68ba      	ldr	r2, [r7, #8]
 8008c44:	4619      	mov	r1, r3
 8008c46:	4870      	ldr	r0, [pc, #448]	; (8008e08 <ftpd_run+0x2bc>)
 8008c48:	f005 fcf2 	bl	800e630 <iprintf>
#endif
    				close(ftp.ctrl_sock);
 8008c4c:	4b67      	ldr	r3, [pc, #412]	; (8008dec <ftpd_run+0x2a0>)
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7fe fecb 	bl	80079ec <close>
    				return ret;
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	e0c2      	b.n	8008de2 <ftpd_run+0x296>
    			}
    			connect_state_control = 1;
 8008c5c:	4b64      	ldr	r3, [pc, #400]	; (8008df0 <ftpd_run+0x2a4>)
 8008c5e:	2201      	movs	r2, #1
 8008c60:	701a      	strb	r2, [r3, #0]
	
#if defined(_FTP_DEBUG_)
    		//printf("ftp socket %d\r\n", ftp.ctrl_sock);
#endif
			 
    		if((size = getSn_RX_RSR(ftp.ctrl_sock)) > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
 8008c62:	4b62      	ldr	r3, [pc, #392]	; (8008dec <ftpd_run+0x2a0>)
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7fe fca7 	bl	80075ba <getSn_RX_RSR>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	81fb      	strh	r3, [r7, #14]
 8008c70:	89fb      	ldrh	r3, [r7, #14]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	f000 80b1 	beq.w	8008dda <ftpd_run+0x28e>
    		{
#if defined(_FTP_DEBUG_)
    			printf("size: %d\r\n", size);
 8008c78:	89fb      	ldrh	r3, [r7, #14]
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	4863      	ldr	r0, [pc, #396]	; (8008e0c <ftpd_run+0x2c0>)
 8008c7e:	f005 fcd7 	bl	800e630 <iprintf>
    			printf("Save_user1: %p\r\n", &dbuf);
 8008c82:	1d3b      	adds	r3, r7, #4
 8008c84:	4619      	mov	r1, r3
 8008c86:	4862      	ldr	r0, [pc, #392]	; (8008e10 <ftpd_run+0x2c4>)
 8008c88:	f005 fcd2 	bl	800e630 <iprintf>
#endif

    			memset(dbuf, 0, _MAX_SS );
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c92:	2100      	movs	r1, #0
 8008c94:	4618      	mov	r0, r3
 8008c96:	f005 fbe3 	bl	800e460 <memset>

    			//memset(dbuf, 0, 16);                      //------------------------------------------------------------>>  Workaround temporal

    			if(size > _MAX_SS ) size = _MAX_SS  - 1;
 8008c9a:	89fb      	ldrh	r3, [r7, #14]
 8008c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ca0:	d902      	bls.n	8008ca8 <ftpd_run+0x15c>
 8008ca2:	f240 13ff 	movw	r3, #511	; 0x1ff
 8008ca6:	81fb      	strh	r3, [r7, #14]

    			ret = recv(ftp.ctrl_sock,dbuf,size);
 8008ca8:	4b50      	ldr	r3, [pc, #320]	; (8008dec <ftpd_run+0x2a0>)
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	6879      	ldr	r1, [r7, #4]
 8008cae:	89fa      	ldrh	r2, [r7, #14]
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7ff f9af 	bl	8008014 <recv>
 8008cb6:	60b8      	str	r0, [r7, #8]
    			dbuf[ret] = '\0';
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	4413      	add	r3, r2
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	701a      	strb	r2, [r3, #0]
    			if(ret != size)
 8008cc2:	89fb      	ldrh	r3, [r7, #14]
 8008cc4:	68ba      	ldr	r2, [r7, #8]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d016      	beq.n	8008cf8 <ftpd_run+0x1ac>
    			{
    				if(ret==SOCK_BUSY) return 0;
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d101      	bne.n	8008cd4 <ftpd_run+0x188>
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	e086      	b.n	8008de2 <ftpd_run+0x296>
    				if(ret < 0)
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	da0e      	bge.n	8008cf8 <ftpd_run+0x1ac>
    				{
#if defined(_FTP_DEBUG_)
    					printf("%d:recv() error:%ld\r\n",ftp.ctrl_sock,ret);
 8008cda:	4b44      	ldr	r3, [pc, #272]	; (8008dec <ftpd_run+0x2a0>)
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	68ba      	ldr	r2, [r7, #8]
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	484c      	ldr	r0, [pc, #304]	; (8008e14 <ftpd_run+0x2c8>)
 8008ce4:	f005 fca4 	bl	800e630 <iprintf>
#endif
    					close(ftp.ctrl_sock);
 8008ce8:	4b40      	ldr	r3, [pc, #256]	; (8008dec <ftpd_run+0x2a0>)
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7fe fe7d 	bl	80079ec <close>
    					return ret;
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	e074      	b.n	8008de2 <ftpd_run+0x296>
    				}
    			}
#if defined(_FTP_DEBUG_)
    			printf("Rcvd Command: %s", dbuf);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	4846      	ldr	r0, [pc, #280]	; (8008e18 <ftpd_run+0x2cc>)
 8008cfe:	f005 fc97 	bl	800e630 <iprintf>
    			printf("Save_user2: %s\r\n", ftp.user);
 8008d02:	4946      	ldr	r1, [pc, #280]	; (8008e1c <ftpd_run+0x2d0>)
 8008d04:	4846      	ldr	r0, [pc, #280]	; (8008e20 <ftpd_run+0x2d4>)
 8008d06:	f005 fc93 	bl	800e630 <iprintf>
#endif
    			proc_ftpd((char *)dbuf);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f000 f897 	bl	8008e40 <proc_ftpd>
    		}
    		break;
 8008d12:	e062      	b.n	8008dda <ftpd_run+0x28e>

    	case SOCK_CLOSE_WAIT :
#if defined(_FTP_DEBUG_)
    		printf("%d:CloseWait\r\n",ftp.ctrl_sock);
 8008d14:	4b35      	ldr	r3, [pc, #212]	; (8008dec <ftpd_run+0x2a0>)
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	4619      	mov	r1, r3
 8008d1a:	4842      	ldr	r0, [pc, #264]	; (8008e24 <ftpd_run+0x2d8>)
 8008d1c:	f005 fc88 	bl	800e630 <iprintf>
#endif
    		if((ret=disconnect(ftp.ctrl_sock)) != SOCK_OK) return ret;
 8008d20:	4b32      	ldr	r3, [pc, #200]	; (8008dec <ftpd_run+0x2a0>)
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	4618      	mov	r0, r3
 8008d26:	f7ff f805 	bl	8007d34 <disconnect>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	60bb      	str	r3, [r7, #8]
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d002      	beq.n	8008d3a <ftpd_run+0x1ee>
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	e053      	b.n	8008de2 <ftpd_run+0x296>
#if defined(_FTP_DEBUG_)
    		printf("%d:Closed\r\n",ftp.ctrl_sock);
 8008d3a:	4b2c      	ldr	r3, [pc, #176]	; (8008dec <ftpd_run+0x2a0>)
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	4619      	mov	r1, r3
 8008d40:	4839      	ldr	r0, [pc, #228]	; (8008e28 <ftpd_run+0x2dc>)
 8008d42:	f005 fc75 	bl	800e630 <iprintf>
#endif
    		break;
 8008d46:	e04b      	b.n	8008de0 <ftpd_run+0x294>

    	case SOCK_CLOSED :
#if defined(_FTP_DEBUG_)
    		printf("%d:FTPStart\r\n",ftp.ctrl_sock);
 8008d48:	4b28      	ldr	r3, [pc, #160]	; (8008dec <ftpd_run+0x2a0>)
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	4837      	ldr	r0, [pc, #220]	; (8008e2c <ftpd_run+0x2e0>)
 8008d50:	f005 fc6e 	bl	800e630 <iprintf>
#endif
    		if((ret=socket(ftp.ctrl_sock, Sn_MR_TCP, IPPORT_FTP, 0x0)) != ftp.ctrl_sock)
 8008d54:	4b25      	ldr	r3, [pc, #148]	; (8008dec <ftpd_run+0x2a0>)
 8008d56:	7818      	ldrb	r0, [r3, #0]
 8008d58:	2300      	movs	r3, #0
 8008d5a:	2215      	movs	r2, #21
 8008d5c:	2101      	movs	r1, #1
 8008d5e:	f7fe fd2f 	bl	80077c0 <socket>
 8008d62:	4603      	mov	r3, r0
 8008d64:	60bb      	str	r3, [r7, #8]
 8008d66:	4b21      	ldr	r3, [pc, #132]	; (8008dec <ftpd_run+0x2a0>)
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d035      	beq.n	8008dde <ftpd_run+0x292>
    		{
#if defined(_FTP_DEBUG_)
    			printf("%d:socket() error:%ld\r\n", ftp.ctrl_sock, ret);
 8008d72:	4b1e      	ldr	r3, [pc, #120]	; (8008dec <ftpd_run+0x2a0>)
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	68ba      	ldr	r2, [r7, #8]
 8008d78:	4619      	mov	r1, r3
 8008d7a:	482d      	ldr	r0, [pc, #180]	; (8008e30 <ftpd_run+0x2e4>)
 8008d7c:	f005 fc58 	bl	800e630 <iprintf>
#endif
    			close(ftp.ctrl_sock);
 8008d80:	4b1a      	ldr	r3, [pc, #104]	; (8008dec <ftpd_run+0x2a0>)
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	4618      	mov	r0, r3
 8008d86:	f7fe fe31 	bl	80079ec <close>
    			return ret;
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	e028      	b.n	8008de2 <ftpd_run+0x296>
    		}
    		break;

    	case SOCK_INIT :
#if defined(_FTP_DEBUG_)
    		printf("%d:Opened\r\n",ftp.ctrl_sock);
 8008d90:	4b16      	ldr	r3, [pc, #88]	; (8008dec <ftpd_run+0x2a0>)
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	4619      	mov	r1, r3
 8008d96:	4827      	ldr	r0, [pc, #156]	; (8008e34 <ftpd_run+0x2e8>)
 8008d98:	f005 fc4a 	bl	800e630 <iprintf>
#endif
    		//strcpy(ftp.workingdir, "/");
    		if( (ret = listen(ftp.ctrl_sock)) != SOCK_OK)
 8008d9c:	4b13      	ldr	r3, [pc, #76]	; (8008dec <ftpd_run+0x2a0>)
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7fe fe91 	bl	8007ac8 <listen>
 8008da6:	4603      	mov	r3, r0
 8008da8:	60bb      	str	r3, [r7, #8]
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d008      	beq.n	8008dc2 <ftpd_run+0x276>
    		{
#if defined(_FTP_DEBUG_)
    			printf("%d:Listen error\r\n",ftp.ctrl_sock);
 8008db0:	4b0e      	ldr	r3, [pc, #56]	; (8008dec <ftpd_run+0x2a0>)
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	4619      	mov	r1, r3
 8008db6:	4820      	ldr	r0, [pc, #128]	; (8008e38 <ftpd_run+0x2ec>)
 8008db8:	f005 fc3a 	bl	800e630 <iprintf>
#endif
    			return ret;
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	e00f      	b.n	8008de2 <ftpd_run+0x296>
    		}
			connect_state_control = 0;
 8008dc2:	4b0b      	ldr	r3, [pc, #44]	; (8008df0 <ftpd_run+0x2a4>)
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	701a      	strb	r2, [r3, #0]

#if defined(_FTP_DEBUG_)
			printf("%d:Listen ok\r\n",ftp.ctrl_sock);
 8008dc8:	4b08      	ldr	r3, [pc, #32]	; (8008dec <ftpd_run+0x2a0>)
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	4619      	mov	r1, r3
 8008dce:	481b      	ldr	r0, [pc, #108]	; (8008e3c <ftpd_run+0x2f0>)
 8008dd0:	f005 fc2e 	bl	800e630 <iprintf>
#endif
			break;
 8008dd4:	e004      	b.n	8008de0 <ftpd_run+0x294>

    	default :
    		break;
 8008dd6:	bf00      	nop
 8008dd8:	e002      	b.n	8008de0 <ftpd_run+0x294>
    		break;
 8008dda:	bf00      	nop
 8008ddc:	e000      	b.n	8008de0 <ftpd_run+0x294>
    		break;
 8008dde:	bf00      	nop
    }
    return 0;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bdb0      	pop	{r4, r5, r7, pc}
 8008dea:	bf00      	nop
 8008dec:	20000a00 	.word	0x20000a00
 8008df0:	200009fe 	.word	0x200009fe
 8008df4:	0800fddc 	.word	0x0800fddc
 8008df8:	20000a8e 	.word	0x20000a8e
 8008dfc:	0800fdf0 	.word	0x0800fdf0
 8008e00:	0800fdf4 	.word	0x0800fdf4
 8008e04:	0800fdfc 	.word	0x0800fdfc
 8008e08:	0800fe1c 	.word	0x0800fe1c
 8008e0c:	0800fe34 	.word	0x0800fe34
 8008e10:	0800fe40 	.word	0x0800fe40
 8008e14:	0800fe54 	.word	0x0800fe54
 8008e18:	0800fe6c 	.word	0x0800fe6c
 8008e1c:	20000a02 	.word	0x20000a02
 8008e20:	0800fe80 	.word	0x0800fe80
 8008e24:	0800fe94 	.word	0x0800fe94
 8008e28:	0800fea4 	.word	0x0800fea4
 8008e2c:	0800feb0 	.word	0x0800feb0
 8008e30:	0800fec0 	.word	0x0800fec0
 8008e34:	0800fed8 	.word	0x0800fed8
 8008e38:	0800fee4 	.word	0x0800fee4
 8008e3c:	0800fef8 	.word	0x0800fef8

08008e40 <proc_ftpd>:

int proc_ftpd(char * buf)
{
 8008e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e42:	b0bf      	sub	sp, #252	; 0xfc
 8008e44:	af04      	add	r7, sp, #16
 8008e46:	6078      	str	r0, [r7, #4]
	char **cmdp, *cp, *arg, *tmpstr;
	char sendbuf[200];
	int slen;

	printf("\r\nSave_user3: %s\r\n", ftp.user);
 8008e48:	49c4      	ldr	r1, [pc, #784]	; (800915c <proc_ftpd+0x31c>)
 8008e4a:	48c5      	ldr	r0, [pc, #788]	; (8009160 <proc_ftpd+0x320>)
 8008e4c:	f005 fbf0 	bl	800e630 <iprintf>

	/* Translate first word to lower case */
	for (cp = buf; *cp != ' ' && *cp != '\0'; cp++)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008e56:	e01d      	b.n	8008e94 <proc_ftpd+0x54>
		*cp = tolower(*cp);
 8008e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8008e62:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8008e66:	3301      	adds	r3, #1
 8008e68:	4abe      	ldr	r2, [pc, #760]	; (8009164 <proc_ftpd+0x324>)
 8008e6a:	4413      	add	r3, r2
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	f003 0303 	and.w	r3, r3, #3
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d103      	bne.n	8008e7e <proc_ftpd+0x3e>
 8008e76:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8008e7a:	3320      	adds	r3, #32
 8008e7c:	e001      	b.n	8008e82 <proc_ftpd+0x42>
 8008e7e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8008e82:	b2da      	uxtb	r2, r3
 8008e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e88:	701a      	strb	r2, [r3, #0]
	for (cp = buf; *cp != ' ' && *cp != '\0'; cp++)
 8008e8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e8e:	3301      	adds	r3, #1
 8008e90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	2b20      	cmp	r3, #32
 8008e9c:	d004      	beq.n	8008ea8 <proc_ftpd+0x68>
 8008e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d1d7      	bne.n	8008e58 <proc_ftpd+0x18>

	/* Find command in table; if not present, return syntax error */
	for (cmdp = commands; *cmdp != NULL; cmdp++)
 8008ea8:	4baf      	ldr	r3, [pc, #700]	; (8009168 <proc_ftpd+0x328>)
 8008eaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008eae:	e016      	b.n	8008ede <proc_ftpd+0x9e>
		if (strncmp(*cmdp, buf, strlen(*cmdp)) == 0)
 8008eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eb4:	681c      	ldr	r4, [r3, #0]
 8008eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7f7 f9b9 	bl	8000234 <strlen>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	6879      	ldr	r1, [r7, #4]
 8008ec8:	4620      	mov	r0, r4
 8008eca:	f005 fc8d 	bl	800e7e8 <strncmp>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00a      	beq.n	8008eea <proc_ftpd+0xaa>
	for (cmdp = commands; *cmdp != NULL; cmdp++)
 8008ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ed8:	3304      	adds	r3, #4
 8008eda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1e3      	bne.n	8008eb0 <proc_ftpd+0x70>
 8008ee8:	e000      	b.n	8008eec <proc_ftpd+0xac>
			break;
 8008eea:	bf00      	nop

	if (*cmdp == NULL)
 8008eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d115      	bne.n	8008f22 <proc_ftpd+0xe2>
	{
		//fsprintf(ftp.ctrl_sock, badcmd, buf);
		slen = sprintf(sendbuf, "500 Unknown command '%s'\r\n", buf);
 8008ef6:	f107 0308 	add.w	r3, r7, #8
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	499b      	ldr	r1, [pc, #620]	; (800916c <proc_ftpd+0x32c>)
 8008efe:	4618      	mov	r0, r3
 8008f00:	f005 fc4a 	bl	800e798 <siprintf>
 8008f04:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
		send(ftp.ctrl_sock, (uint8_t *)sendbuf, slen);
 8008f08:	4b99      	ldr	r3, [pc, #612]	; (8009170 <proc_ftpd+0x330>)
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8008f10:	b292      	uxth	r2, r2
 8008f12:	f107 0108 	add.w	r1, r7, #8
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7fe ff82 	bl	8007e20 <send>
		return 0;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	f000 bc1a 	b.w	8009756 <proc_ftpd+0x916>
	}
	/* Allow only USER, PASS and QUIT before logging in */
	if (ftp.is_login == 0)
 8008f22:	4b93      	ldr	r3, [pc, #588]	; (8009170 <proc_ftpd+0x330>)
 8008f24:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d12b      	bne.n	8008f84 <proc_ftpd+0x144>
	{
		switch(cmdp - commands)
 8008f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f30:	4a8d      	ldr	r2, [pc, #564]	; (8009168 <proc_ftpd+0x328>)
 8008f32:	1a9b      	subs	r3, r3, r2
 8008f34:	109b      	asrs	r3, r3, #2
 8008f36:	2b08      	cmp	r3, #8
 8008f38:	bf8c      	ite	hi
 8008f3a:	2201      	movhi	r2, #1
 8008f3c:	2200      	movls	r2, #0
 8008f3e:	b2d2      	uxtb	r2, r2
 8008f40:	2a00      	cmp	r2, #0
 8008f42:	d10b      	bne.n	8008f5c <proc_ftpd+0x11c>
 8008f44:	2201      	movs	r2, #1
 8008f46:	409a      	lsls	r2, r3
 8008f48:	f240 1305 	movw	r3, #261	; 0x105
 8008f4c:	4013      	ands	r3, r2
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	bf14      	ite	ne
 8008f52:	2301      	movne	r3, #1
 8008f54:	2300      	moveq	r3, #0
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d115      	bne.n	8008f88 <proc_ftpd+0x148>
			case PASS_CMD:
			case QUIT_CMD:
				break;
			default:
				//fsprintf(ftp.ctrl_sock, notlog);
				slen = sprintf(sendbuf, "530 Please log in with USER and PASS\r\n");
 8008f5c:	f107 0308 	add.w	r3, r7, #8
 8008f60:	4984      	ldr	r1, [pc, #528]	; (8009174 <proc_ftpd+0x334>)
 8008f62:	4618      	mov	r0, r3
 8008f64:	f005 fc18 	bl	800e798 <siprintf>
 8008f68:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
				send(ftp.ctrl_sock, (uint8_t *)sendbuf, slen);
 8008f6c:	4b80      	ldr	r3, [pc, #512]	; (8009170 <proc_ftpd+0x330>)
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8008f74:	b292      	uxth	r2, r2
 8008f76:	f107 0108 	add.w	r1, r7, #8
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7fe ff50 	bl	8007e20 <send>
				return 0;
 8008f80:	2300      	movs	r3, #0
 8008f82:	e3e8      	b.n	8009756 <proc_ftpd+0x916>
		}
	}
 8008f84:	bf00      	nop
 8008f86:	e000      	b.n	8008f8a <proc_ftpd+0x14a>
				break;
 8008f88:	bf00      	nop
	
	arg = &buf[strlen(*cmdp)];
 8008f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7f7 f94f 	bl	8000234 <strlen>
 8008f96:	4602      	mov	r2, r0
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	while(*arg == ' ') arg++;
 8008fa0:	e004      	b.n	8008fac <proc_ftpd+0x16c>
 8008fa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008fac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	2b20      	cmp	r3, #32
 8008fb4:	d0f5      	beq.n	8008fa2 <proc_ftpd+0x162>
	slen = strlen(arg);
 8008fb6:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8008fba:	f7f7 f93b 	bl	8000234 <strlen>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	arg[slen - 1] = 0x00;
 8008fc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008fce:	4413      	add	r3, r2
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	701a      	strb	r2, [r3, #0]
	arg[slen - 2] = 0x00;
 8008fd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008fd8:	3b02      	subs	r3, #2
 8008fda:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008fde:	4413      	add	r3, r2
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	701a      	strb	r2, [r3, #0]

	/* Execute specific command */
	switch (cmdp - commands)
 8008fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fe8:	4a5f      	ldr	r2, [pc, #380]	; (8009168 <proc_ftpd+0x328>)
 8008fea:	1a9b      	subs	r3, r3, r2
 8008fec:	109b      	asrs	r3, r3, #2
 8008fee:	2b1c      	cmp	r3, #28
 8008ff0:	f200 839b 	bhi.w	800972a <proc_ftpd+0x8ea>
 8008ff4:	a201      	add	r2, pc, #4	; (adr r2, 8008ffc <proc_ftpd+0x1bc>)
 8008ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ffa:	bf00      	nop
 8008ffc:	08009071 	.word	0x08009071
 8009000:	08009705 	.word	0x08009705
 8009004:	080090df 	.word	0x080090df
 8009008:	080091a1 	.word	0x080091a1
 800900c:	080093e3 	.word	0x080093e3
 8009010:	0800959d 	.word	0x0800959d
 8009014:	080096b7 	.word	0x080096b7
 8009018:	0800972b 	.word	0x0800972b
 800901c:	0800930f 	.word	0x0800930f
 8009020:	08009345 	.word	0x08009345
 8009024:	08009355 	.word	0x08009355
 8009028:	08009365 	.word	0x08009365
 800902c:	080093f3 	.word	0x080093f3
 8009030:	08009421 	.word	0x08009421
 8009034:	08009421 	.word	0x08009421
 8009038:	08009669 	.word	0x08009669
 800903c:	08009669 	.word	0x08009669
 8009040:	08009705 	.word	0x08009705
 8009044:	08009705 	.word	0x08009705
 8009048:	08009705 	.word	0x08009705
 800904c:	08009705 	.word	0x08009705
 8009050:	080093fb 	.word	0x080093fb
 8009054:	08009705 	.word	0x08009705
 8009058:	08009705 	.word	0x08009705
 800905c:	080092e9 	.word	0x080092e9
 8009060:	08009449 	.word	0x08009449
 8009064:	080094b9 	.word	0x080094b9
 8009068:	080093d3 	.word	0x080093d3
 800906c:	08009355 	.word	0x08009355
	{
		case USER_CMD :
#if defined(_FTP_DEBUG_)
			printf("USER_CMD : %s\r\n", arg);
 8009070:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8009074:	4840      	ldr	r0, [pc, #256]	; (8009178 <proc_ftpd+0x338>)
 8009076:	f005 fadb 	bl	800e630 <iprintf>
			printf("Save_user3 %s\r\n", ftp.user);
 800907a:	4938      	ldr	r1, [pc, #224]	; (800915c <proc_ftpd+0x31c>)
 800907c:	483f      	ldr	r0, [pc, #252]	; (800917c <proc_ftpd+0x33c>)
 800907e:	f005 fad7 	bl	800e630 <iprintf>
#endif

			if(strcmp(arg,ftp.user)==0)
 8009082:	4936      	ldr	r1, [pc, #216]	; (800915c <proc_ftpd+0x31c>)
 8009084:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8009088:	f7f7 f8ca 	bl	8000220 <strcmp>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d112      	bne.n	80090b8 <proc_ftpd+0x278>
			{
				slen = sprintf(sendbuf, "331 Enter PASS command\r\n");
 8009092:	f107 0308 	add.w	r3, r7, #8
 8009096:	493a      	ldr	r1, [pc, #232]	; (8009180 <proc_ftpd+0x340>)
 8009098:	4618      	mov	r0, r3
 800909a:	f005 fb7d 	bl	800e798 <siprintf>
 800909e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
				send(ftp.ctrl_sock, (uint8_t *)sendbuf, slen);
 80090a2:	4b33      	ldr	r3, [pc, #204]	; (8009170 <proc_ftpd+0x330>)
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80090aa:	b292      	uxth	r2, r2
 80090ac:	f107 0108 	add.w	r1, r7, #8
 80090b0:	4618      	mov	r0, r3
 80090b2:	f7fe feb5 	bl	8007e20 <send>
			else
			{
				slen = sprintf(sendbuf, "530 Not logged in\r\n");
				send(ftp.ctrl_sock, (uint8_t *)sendbuf, slen);
			}
			break;
 80090b6:	e34d      	b.n	8009754 <proc_ftpd+0x914>
				slen = sprintf(sendbuf, "530 Not logged in\r\n");
 80090b8:	f107 0308 	add.w	r3, r7, #8
 80090bc:	4931      	ldr	r1, [pc, #196]	; (8009184 <proc_ftpd+0x344>)
 80090be:	4618      	mov	r0, r3
 80090c0:	f005 fb6a 	bl	800e798 <siprintf>
 80090c4:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
				send(ftp.ctrl_sock, (uint8_t *)sendbuf, slen);
 80090c8:	4b29      	ldr	r3, [pc, #164]	; (8009170 <proc_ftpd+0x330>)
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80090d0:	b292      	uxth	r2, r2
 80090d2:	f107 0108 	add.w	r1, r7, #8
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7fe fea2 	bl	8007e20 <send>
			break;
 80090dc:	e33a      	b.n	8009754 <proc_ftpd+0x914>


		case PASS_CMD :
#if defined(_FTP_DEBUG_)
			printf("PASS_CMD : %s", arg);
 80090de:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80090e2:	4829      	ldr	r0, [pc, #164]	; (8009188 <proc_ftpd+0x348>)
 80090e4:	f005 faa4 	bl	800e630 <iprintf>
#endif
			if(strcmp(arg,ftp.pass)==0)
 80090e8:	4928      	ldr	r1, [pc, #160]	; (800918c <proc_ftpd+0x34c>)
 80090ea:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80090ee:	f7f7 f897 	bl	8000220 <strcmp>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d11a      	bne.n	800912e <proc_ftpd+0x2ee>
			{
			   printf("%s logged in\r\n", ftp.username);
 80090f8:	4925      	ldr	r1, [pc, #148]	; (8009190 <proc_ftpd+0x350>)
 80090fa:	4826      	ldr	r0, [pc, #152]	; (8009194 <proc_ftpd+0x354>)
 80090fc:	f005 fa98 	bl	800e630 <iprintf>
			   slen = sprintf(sendbuf, "230 Logged on\r\n");
 8009100:	f107 0308 	add.w	r3, r7, #8
 8009104:	4924      	ldr	r1, [pc, #144]	; (8009198 <proc_ftpd+0x358>)
 8009106:	4618      	mov	r0, r3
 8009108:	f005 fb46 	bl	800e798 <siprintf>
 800910c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
			   send(ftp.ctrl_sock, (uint8_t *)sendbuf, slen);
 8009110:	4b17      	ldr	r3, [pc, #92]	; (8009170 <proc_ftpd+0x330>)
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8009118:	b292      	uxth	r2, r2
 800911a:	f107 0108 	add.w	r1, r7, #8
 800911e:	4618      	mov	r0, r3
 8009120:	f7fe fe7e 	bl	8007e20 <send>
			   ftp.is_login = 1;
 8009124:	4b12      	ldr	r3, [pc, #72]	; (8009170 <proc_ftpd+0x330>)
 8009126:	2201      	movs	r2, #1
 8009128:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
			{
			   printf("%s Not logged in\r\n", ftp.username);
			   slen = sprintf(sendbuf, "530 Not logged in\r\n");
			   send(ftp.ctrl_sock, (uint8_t *)sendbuf, slen);
			}
			break;
 800912c:	e312      	b.n	8009754 <proc_ftpd+0x914>
			   printf("%s Not logged in\r\n", ftp.username);
 800912e:	4918      	ldr	r1, [pc, #96]	; (8009190 <proc_ftpd+0x350>)
 8009130:	481a      	ldr	r0, [pc, #104]	; (800919c <proc_ftpd+0x35c>)
 8009132:	f005 fa7d 	bl	800e630 <iprintf>
			   slen = sprintf(sendbuf, "530 Not logged in\r\n");
 8009136:	f107 0308 	add.w	r3, r7, #8
 800913a:	4912      	ldr	r1, [pc, #72]	; (8009184 <proc_ftpd+0x344>)
 800913c:	4618      	mov	r0, r3
 800913e:	f005 fb2b 	bl	800e798 <siprintf>
 8009142:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
			   send(ftp.ctrl_sock, (uint8_t *)sendbuf, slen);
 8009146:	4b0a      	ldr	r3, [pc, #40]	; (8009170 <proc_ftpd+0x330>)
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800914e:	b292      	uxth	r2, r2
 8009150:	f107 0108 	add.w	r1, r7, #8
 8009154:	4618      	mov	r0, r3
 8009156:	f7fe fe63 	bl	8007e20 <send>
			break;
 800915a:	e2fb      	b.n	8009754 <proc_ftpd+0x914>
 800915c:	20000a02 	.word	0x20000a02
 8009160:	0800ff08 	.word	0x0800ff08
 8009164:	08010ad8 	.word	0x08010ad8
 8009168:	2000003c 	.word	0x2000003c
 800916c:	0800ff1c 	.word	0x0800ff1c
 8009170:	20000a00 	.word	0x20000a00
 8009174:	0800ff38 	.word	0x0800ff38
 8009178:	0800ff60 	.word	0x0800ff60
 800917c:	0800ff70 	.word	0x0800ff70
 8009180:	0800ff80 	.word	0x0800ff80
 8009184:	0800ff9c 	.word	0x0800ff9c
 8009188:	0800ffb0 	.word	0x0800ffb0
 800918c:	20000a16 	.word	0x20000a16
 8009190:	20000a2a 	.word	0x20000a2a
 8009194:	0800ffc0 	.word	0x0800ffc0
 8009198:	0800ffd0 	.word	0x0800ffd0
 800919c:	0800ffe0 	.word	0x0800ffe0

		case TYPE_CMD :
			switch(arg[0])
 80091a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	3b41      	subs	r3, #65	; 0x41
 80091a8:	2b28      	cmp	r3, #40	; 0x28
 80091aa:	f200 8087 	bhi.w	80092bc <proc_ftpd+0x47c>
 80091ae:	a201      	add	r2, pc, #4	; (adr r2, 80091b4 <proc_ftpd+0x374>)
 80091b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b4:	08009259 	.word	0x08009259
 80091b8:	0800928b 	.word	0x0800928b
 80091bc:	080092bd 	.word	0x080092bd
 80091c0:	080092bd 	.word	0x080092bd
 80091c4:	080092bd 	.word	0x080092bd
 80091c8:	080092bd 	.word	0x080092bd
 80091cc:	080092bd 	.word	0x080092bd
 80091d0:	080092bd 	.word	0x080092bd
 80091d4:	0800928b 	.word	0x0800928b
 80091d8:	080092bd 	.word	0x080092bd
 80091dc:	080092bd 	.word	0x080092bd
 80091e0:	080092bd 	.word	0x080092bd
 80091e4:	080092bd 	.word	0x080092bd
 80091e8:	080092bd 	.word	0x080092bd
 80091ec:	080092bd 	.word	0x080092bd
 80091f0:	080092bd 	.word	0x080092bd
 80091f4:	080092bd 	.word	0x080092bd
 80091f8:	080092bd 	.word	0x080092bd
 80091fc:	080092bd 	.word	0x080092bd
 8009200:	080092bd 	.word	0x080092bd
 8009204:	080092bd 	.word	0x080092bd
 8009208:	080092bd 	.word	0x080092bd
 800920c:	080092bd 	.word	0x080092bd
 8009210:	080092bd 	.word	0x080092bd
 8009214:	080092bd 	.word	0x080092bd
 8009218:	080092bd 	.word	0x080092bd
 800921c:	080092bd 	.word	0x080092bd
 8009220:	080092bd 	.word	0x080092bd
 8009224:	080092bd 	.word	0x080092bd
 8009228:	080092bd 	.word	0x080092bd
 800922c:	080092bd 	.word	0x080092bd
 8009230:	080092bd 	.word	0x080092bd
 8009234:	08009259 	.word	0x08009259
 8009238:	0800928b 	.word	0x0800928b
 800923c:	080092bd 	.word	0x080092bd
 8009240:	080092bd 	.word	0x080092bd
 8009244:	080092bd 	.word	0x080092bd
 8009248:	080092bd 	.word	0x080092bd
 800924c:	080092bd 	.word	0x080092bd
 8009250:	080092bd 	.word	0x080092bd
 8009254:	0800928b 	.word	0x0800928b
			{
				case 'A':
				case 'a':	/* Ascii */
					ftp.is_ascii = 1;
 8009258:	4bb9      	ldr	r3, [pc, #740]	; (8009540 <proc_ftpd+0x700>)
 800925a:	2201      	movs	r2, #1
 800925c:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
					//fsprintf(ftp.ctrl_sock, typeok, arg);
					slen = sprintf(sendbuf, "200 Type set to %s\r\n", arg);
 8009260:	f107 0308 	add.w	r3, r7, #8
 8009264:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009268:	49b6      	ldr	r1, [pc, #728]	; (8009544 <proc_ftpd+0x704>)
 800926a:	4618      	mov	r0, r3
 800926c:	f005 fa94 	bl	800e798 <siprintf>
 8009270:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
					send(ftp.ctrl_sock, (uint8_t *)sendbuf, slen);
 8009274:	4bb2      	ldr	r3, [pc, #712]	; (8009540 <proc_ftpd+0x700>)
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800927c:	b292      	uxth	r2, r2
 800927e:	f107 0108 	add.w	r1, r7, #8
 8009282:	4618      	mov	r0, r3
 8009284:	f7fe fdcc 	bl	8007e20 <send>
					break;
 8009288:	e02d      	b.n	80092e6 <proc_ftpd+0x4a6>

				case 'B':
				case 'b':	/* Binary */
				case 'I':
				case 'i':	/* Image */
					ftp.is_ascii = 0;
 800928a:	4bad      	ldr	r3, [pc, #692]	; (8009540 <proc_ftpd+0x700>)
 800928c:	2200      	movs	r2, #0
 800928e:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
					//fsprintf(ftp.ctrl_sock, typeok, arg);
					slen = sprintf(sendbuf, "200 Type set to %s\r\n", arg);
 8009292:	f107 0308 	add.w	r3, r7, #8
 8009296:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800929a:	49aa      	ldr	r1, [pc, #680]	; (8009544 <proc_ftpd+0x704>)
 800929c:	4618      	mov	r0, r3
 800929e:	f005 fa7b 	bl	800e798 <siprintf>
 80092a2:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
					send(ftp.ctrl_sock, (uint8_t *)sendbuf, slen);
 80092a6:	4ba6      	ldr	r3, [pc, #664]	; (8009540 <proc_ftpd+0x700>)
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80092ae:	b292      	uxth	r2, r2
 80092b0:	f107 0108 	add.w	r1, r7, #8
 80092b4:	4618      	mov	r0, r3
 80092b6:	f7fe fdb3 	bl	8007e20 <send>
					break;
 80092ba:	e014      	b.n	80092e6 <proc_ftpd+0x4a6>

				default:	/* Invalid */
					//fsprintf(ftp.ctrl_sock, badtype, arg);
					slen = sprintf(sendbuf, "501 Unknown type \"%s\"\r\n", arg);
 80092bc:	f107 0308 	add.w	r3, r7, #8
 80092c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80092c4:	49a0      	ldr	r1, [pc, #640]	; (8009548 <proc_ftpd+0x708>)
 80092c6:	4618      	mov	r0, r3
 80092c8:	f005 fa66 	bl	800e798 <siprintf>
 80092cc:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
					send(ftp.ctrl_sock, (uint8_t *)sendbuf, slen);
 80092d0:	4b9b      	ldr	r3, [pc, #620]	; (8009540 <proc_ftpd+0x700>)
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80092d8:	b292      	uxth	r2, r2
 80092da:	f107 0108 	add.w	r1, r7, #8
 80092de:	4618      	mov	r0, r3
 80092e0:	f7fe fd9e 	bl	8007e20 <send>
					break;
 80092e4:	bf00      	nop
			}
			break;
 80092e6:	e235      	b.n	8009754 <proc_ftpd+0x914>

		case FEAT_CMD :
			slen = sprintf(sendbuf, "211-Features:\r\n MDTM\r\n REST STREAM\r\n SIZE\r\n MLST size*;type*;create*;modify*;\r\n MLSD\r\n UTF8\r\n CLNT\r\n MFMT\r\n211 END\r\n");
 80092e8:	f107 0308 	add.w	r3, r7, #8
 80092ec:	4997      	ldr	r1, [pc, #604]	; (800954c <proc_ftpd+0x70c>)
 80092ee:	4618      	mov	r0, r3
 80092f0:	f005 fa52 	bl	800e798 <siprintf>
 80092f4:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
			send(ftp.ctrl_sock, (uint8_t *)sendbuf, slen);
 80092f8:	4b91      	ldr	r3, [pc, #580]	; (8009540 <proc_ftpd+0x700>)
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8009300:	b292      	uxth	r2, r2
 8009302:	f107 0108 	add.w	r1, r7, #8
 8009306:	4618      	mov	r0, r3
 8009308:	f7fe fd8a 	bl	8007e20 <send>
			break;
 800930c:	e222      	b.n	8009754 <proc_ftpd+0x914>

		case QUIT_CMD :
#if defined(_FTP_DEBUG_)
			printf("QUIT_CMD\r\n");
 800930e:	4890      	ldr	r0, [pc, #576]	; (8009550 <proc_ftpd+0x710>)
 8009310:	f005 fa2a 	bl	800e768 <puts>
#endif
			//fsprintf(ftp.ctrl_sock, bye);
			slen = sprintf(sendbuf, "221 Goodbye!\r\n");
 8009314:	f107 0308 	add.w	r3, r7, #8
 8009318:	498e      	ldr	r1, [pc, #568]	; (8009554 <proc_ftpd+0x714>)
 800931a:	4618      	mov	r0, r3
 800931c:	f005 fa3c 	bl	800e798 <siprintf>
 8009320:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
			send(ftp.ctrl_sock, (uint8_t *)sendbuf, slen);
 8009324:	4b86      	ldr	r3, [pc, #536]	; (8009540 <proc_ftpd+0x700>)
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800932c:	b292      	uxth	r2, r2
 800932e:	f107 0108 	add.w	r1, r7, #8
 8009332:	4618      	mov	r0, r3
 8009334:	f7fe fd74 	bl	8007e20 <send>
			disconnect(ftp.ctrl_sock);
 8009338:	4b81      	ldr	r3, [pc, #516]	; (8009540 <proc_ftpd+0x700>)
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	4618      	mov	r0, r3
 800933e:	f7fe fcf9 	bl	8007d34 <disconnect>
			break;
 8009342:	e207      	b.n	8009754 <proc_ftpd+0x914>

		case RETR_CMD :
#if defined(_FTP_DEBUG_)
			printf("RETR_CMD\r\n");
 8009344:	4884      	ldr	r0, [pc, #528]	; (8009558 <proc_ftpd+0x718>)
 8009346:	f005 fa0f 	bl	800e768 <puts>
#endif
			ftpd_retrcmd(arg);
 800934a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800934e:	f000 fb81 	bl	8009a54 <ftpd_retrcmd>
			break;
 8009352:	e1ff      	b.n	8009754 <proc_ftpd+0x914>

		case APPE_CMD :
		case STOR_CMD:
#if defined(_FTP_DEBUG_)
			printf("STOR_CMD\r\n");
 8009354:	4881      	ldr	r0, [pc, #516]	; (800955c <proc_ftpd+0x71c>)
 8009356:	f005 fa07 	bl	800e768 <puts>
#endif
			ftpd_storcmd(arg);
 800935a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800935e:	f000 fc69 	bl	8009c34 <ftpd_storcmd>
			break;
 8009362:	e1f7      	b.n	8009754 <proc_ftpd+0x914>

		case PORT_CMD:
#if defined(_FTP_DEBUG_)
			printf("PORT_CMD\r\n");
 8009364:	487e      	ldr	r0, [pc, #504]	; (8009560 <proc_ftpd+0x720>)
 8009366:	f005 f9ff 	bl	800e768 <puts>
#endif
			if (pport(arg) == -1){
 800936a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800936e:	f000 fa0d 	bl	800978c <pport>
 8009372:	4603      	mov	r3, r0
 8009374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009378:	d112      	bne.n	80093a0 <proc_ftpd+0x560>
				//fsprintf(ftp.ctrl_sock, badport);
				slen = sprintf(sendbuf, "501 Bad port syntax\r\n");
 800937a:	f107 0308 	add.w	r3, r7, #8
 800937e:	4979      	ldr	r1, [pc, #484]	; (8009564 <proc_ftpd+0x724>)
 8009380:	4618      	mov	r0, r3
 8009382:	f005 fa09 	bl	800e798 <siprintf>
 8009386:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
				send(ftp.ctrl_sock, (uint8_t *)sendbuf, slen);
 800938a:	4b6d      	ldr	r3, [pc, #436]	; (8009540 <proc_ftpd+0x700>)
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8009392:	b292      	uxth	r2, r2
 8009394:	f107 0108 	add.w	r1, r7, #8
 8009398:	4618      	mov	r0, r3
 800939a:	f7fe fd41 	bl	8007e20 <send>
 800939e:	e015      	b.n	80093cc <proc_ftpd+0x58c>
			} else{
				//fsprintf(ftp.ctrl_sock, portok);
				ftp.is_active = 1; //ftp.dsock_mode = ACTIVE_MODE;
 80093a0:	4b67      	ldr	r3, [pc, #412]	; (8009540 <proc_ftpd+0x700>)
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
				//ftp.dsock_state = DATASOCK_READY;
				slen = sprintf(sendbuf, "200 PORT command successful.\r\n");
 80093a8:	f107 0308 	add.w	r3, r7, #8
 80093ac:	496e      	ldr	r1, [pc, #440]	; (8009568 <proc_ftpd+0x728>)
 80093ae:	4618      	mov	r0, r3
 80093b0:	f005 f9f2 	bl	800e798 <siprintf>
 80093b4:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
				send(ftp.ctrl_sock, (uint8_t *)sendbuf, slen);
 80093b8:	4b61      	ldr	r3, [pc, #388]	; (8009540 <proc_ftpd+0x700>)
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80093c0:	b292      	uxth	r2, r2
 80093c2:	f107 0108 	add.w	r1, r7, #8
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7fe fd2a 	bl	8007e20 <send>
			}
			ftpd_dsock_ready();
 80093cc:	f000 fa62 	bl	8009894 <ftpd_dsock_ready>

			break;
 80093d0:	e1c0      	b.n	8009754 <proc_ftpd+0x914>

		case MLSD_CMD:
#if defined(_FTP_DEBUG_)
			printf("MLSD_CMD\r\n");
 80093d2:	4866      	ldr	r0, [pc, #408]	; (800956c <proc_ftpd+0x72c>)
 80093d4:	f005 f9c8 	bl	800e768 <puts>
#endif
			ftpd_listcmd(arg);
 80093d8:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80093dc:	f000 faac 	bl	8009938 <ftpd_listcmd>
			break;
 80093e0:	e1b8      	b.n	8009754 <proc_ftpd+0x914>

		case LIST_CMD:
#if defined(_FTP_DEBUG_)
			printf("LIST_CMD\r\n");
 80093e2:	4863      	ldr	r0, [pc, #396]	; (8009570 <proc_ftpd+0x730>)
 80093e4:	f005 f9c0 	bl	800e768 <puts>
#endif
			ftpd_listcmd(arg);
 80093e8:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80093ec:	f000 faa4 	bl	8009938 <ftpd_listcmd>
			break;
 80093f0:	e1b0      	b.n	8009754 <proc_ftpd+0x914>

		case NLST_CMD:
#if defined(_FTP_DEBUG_)
			printf("NLST_CMD\r\n");
 80093f2:	4860      	ldr	r0, [pc, #384]	; (8009574 <proc_ftpd+0x734>)
 80093f4:	f005 f9b8 	bl	800e768 <puts>
#endif
			break;
 80093f8:	e1ac      	b.n	8009754 <proc_ftpd+0x914>

		case SYST_CMD:
			slen = sprintf(sendbuf, "215 UNIX emulated by WIZnet\r\n");
 80093fa:	f107 0308 	add.w	r3, r7, #8
 80093fe:	495e      	ldr	r1, [pc, #376]	; (8009578 <proc_ftpd+0x738>)
 8009400:	4618      	mov	r0, r3
 8009402:	f005 f9c9 	bl	800e798 <siprintf>
 8009406:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
			send(ftp.ctrl_sock, (uint8_t *)sendbuf, slen);
 800940a:	4b4d      	ldr	r3, [pc, #308]	; (8009540 <proc_ftpd+0x700>)
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8009412:	b292      	uxth	r2, r2
 8009414:	f107 0108 	add.w	r1, r7, #8
 8009418:	4618      	mov	r0, r3
 800941a:	f7fe fd01 	bl	8007e20 <send>
			break;
 800941e:	e199      	b.n	8009754 <proc_ftpd+0x914>

		case PWD_CMD:
		case XPWD_CMD:
			slen = sprintf(sendbuf, "257 \"%s\" is current directory.\r\n", ftp.workingdir);
 8009420:	f107 0308 	add.w	r3, r7, #8
 8009424:	4a55      	ldr	r2, [pc, #340]	; (800957c <proc_ftpd+0x73c>)
 8009426:	4956      	ldr	r1, [pc, #344]	; (8009580 <proc_ftpd+0x740>)
 8009428:	4618      	mov	r0, r3
 800942a:	f005 f9b5 	bl	800e798 <siprintf>
 800942e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
			send(ftp.ctrl_sock, (uint8_t *)sendbuf, slen);
 8009432:	4b43      	ldr	r3, [pc, #268]	; (8009540 <proc_ftpd+0x700>)
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800943a:	b292      	uxth	r2, r2
 800943c:	f107 0108 	add.w	r1, r7, #8
 8009440:	4618      	mov	r0, r3
 8009442:	f7fe fced 	bl	8007e20 <send>
			break;
 8009446:	e185      	b.n	8009754 <proc_ftpd+0x914>

		case PASV_CMD:
			slen = sprintf(sendbuf, "227 Entering Passive Mode (%d,%d,%d,%d,%d,%d)\r\n", local_ip[0], local_ip[1], local_ip[2], local_ip[3], local_port >> 8, local_port & 0x00ff);
 8009448:	4b4e      	ldr	r3, [pc, #312]	; (8009584 <proc_ftpd+0x744>)
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	461d      	mov	r5, r3
 800944e:	4b4d      	ldr	r3, [pc, #308]	; (8009584 <proc_ftpd+0x744>)
 8009450:	785b      	ldrb	r3, [r3, #1]
 8009452:	461e      	mov	r6, r3
 8009454:	4b4b      	ldr	r3, [pc, #300]	; (8009584 <proc_ftpd+0x744>)
 8009456:	789b      	ldrb	r3, [r3, #2]
 8009458:	461a      	mov	r2, r3
 800945a:	4b4a      	ldr	r3, [pc, #296]	; (8009584 <proc_ftpd+0x744>)
 800945c:	78db      	ldrb	r3, [r3, #3]
 800945e:	4619      	mov	r1, r3
 8009460:	4b49      	ldr	r3, [pc, #292]	; (8009588 <proc_ftpd+0x748>)
 8009462:	881b      	ldrh	r3, [r3, #0]
 8009464:	0a1b      	lsrs	r3, r3, #8
 8009466:	b29b      	uxth	r3, r3
 8009468:	461c      	mov	r4, r3
 800946a:	4b47      	ldr	r3, [pc, #284]	; (8009588 <proc_ftpd+0x748>)
 800946c:	881b      	ldrh	r3, [r3, #0]
 800946e:	b2db      	uxtb	r3, r3
 8009470:	f107 0008 	add.w	r0, r7, #8
 8009474:	9303      	str	r3, [sp, #12]
 8009476:	9402      	str	r4, [sp, #8]
 8009478:	9101      	str	r1, [sp, #4]
 800947a:	9200      	str	r2, [sp, #0]
 800947c:	4633      	mov	r3, r6
 800947e:	462a      	mov	r2, r5
 8009480:	4942      	ldr	r1, [pc, #264]	; (800958c <proc_ftpd+0x74c>)
 8009482:	f005 f989 	bl	800e798 <siprintf>
 8009486:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
			send(ftp.ctrl_sock, (uint8_t *)sendbuf, slen);
 800948a:	4b2d      	ldr	r3, [pc, #180]	; (8009540 <proc_ftpd+0x700>)
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8009492:	b292      	uxth	r2, r2
 8009494:	f107 0108 	add.w	r1, r7, #8
 8009498:	4618      	mov	r0, r3
 800949a:	f7fe fcc1 	bl	8007e20 <send>
			ftp.is_active = 0;
 800949e:	4b28      	ldr	r3, [pc, #160]	; (8009540 <proc_ftpd+0x700>)
 80094a0:	2200      	movs	r2, #0
 80094a2:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
			ftpd_dsock_ready();
 80094a6:	f000 f9f5 	bl	8009894 <ftpd_dsock_ready>
#if defined(_FTP_DEBUG_)
			printf("PASV port: %d\r\n", local_port);
 80094aa:	4b37      	ldr	r3, [pc, #220]	; (8009588 <proc_ftpd+0x748>)
 80094ac:	881b      	ldrh	r3, [r3, #0]
 80094ae:	4619      	mov	r1, r3
 80094b0:	4837      	ldr	r0, [pc, #220]	; (8009590 <proc_ftpd+0x750>)
 80094b2:	f005 f8bd 	bl	800e630 <iprintf>
#endif
		break;
 80094b6:	e14d      	b.n	8009754 <proc_ftpd+0x914>

		case SIZE_CMD:
			if(slen > 3)
 80094b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094bc:	2b03      	cmp	r3, #3
 80094be:	dd2c      	ble.n	800951a <proc_ftpd+0x6da>
			{
				tmpstr = strrchr(arg, '/');
 80094c0:	212f      	movs	r1, #47	; 0x2f
 80094c2:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80094c6:	f005 f9a3 	bl	800e810 <strrchr>
 80094ca:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
				*tmpstr = 0;
 80094ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80094d2:	2200      	movs	r2, #0
 80094d4:	701a      	strb	r2, [r3, #0]
#if defined(F_FILESYSTEM)
				slen = get_filesize(arg, tmpstr + 1);
 80094d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80094da:	3301      	adds	r3, #1
 80094dc:	4619      	mov	r1, r3
 80094de:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80094e2:	f7ff fa7b 	bl	80089dc <get_filesize>
 80094e6:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
#else
				slen = _MAX_SS ;
#endif
				if(slen > 0)
 80094ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	dd0a      	ble.n	8009508 <proc_ftpd+0x6c8>
					slen = sprintf(sendbuf, "213 %d\r\n", slen);
 80094f2:	f107 0308 	add.w	r3, r7, #8
 80094f6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80094fa:	4926      	ldr	r1, [pc, #152]	; (8009594 <proc_ftpd+0x754>)
 80094fc:	4618      	mov	r0, r3
 80094fe:	f005 f94b 	bl	800e798 <siprintf>
 8009502:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8009506:	e010      	b.n	800952a <proc_ftpd+0x6ea>
				else
					slen = sprintf(sendbuf, "550 File not Found\r\n");
 8009508:	f107 0308 	add.w	r3, r7, #8
 800950c:	4922      	ldr	r1, [pc, #136]	; (8009598 <proc_ftpd+0x758>)
 800950e:	4618      	mov	r0, r3
 8009510:	f005 f942 	bl	800e798 <siprintf>
 8009514:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8009518:	e007      	b.n	800952a <proc_ftpd+0x6ea>
			}
			else
			{
				slen = sprintf(sendbuf, "550 File not Found\r\n");
 800951a:	f107 0308 	add.w	r3, r7, #8
 800951e:	491e      	ldr	r1, [pc, #120]	; (8009598 <proc_ftpd+0x758>)
 8009520:	4618      	mov	r0, r3
 8009522:	f005 f939 	bl	800e798 <siprintf>
 8009526:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
			}
			send(ftp.ctrl_sock, (uint8_t *)sendbuf, slen);
 800952a:	4b05      	ldr	r3, [pc, #20]	; (8009540 <proc_ftpd+0x700>)
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8009532:	b292      	uxth	r2, r2
 8009534:	f107 0108 	add.w	r1, r7, #8
 8009538:	4618      	mov	r0, r3
 800953a:	f7fe fc71 	bl	8007e20 <send>
			break;
 800953e:	e109      	b.n	8009754 <proc_ftpd+0x914>
 8009540:	20000a00 	.word	0x20000a00
 8009544:	0800fff4 	.word	0x0800fff4
 8009548:	0801000c 	.word	0x0801000c
 800954c:	08010024 	.word	0x08010024
 8009550:	0801009c 	.word	0x0801009c
 8009554:	080100a8 	.word	0x080100a8
 8009558:	080100b8 	.word	0x080100b8
 800955c:	080100c4 	.word	0x080100c4
 8009560:	080100d0 	.word	0x080100d0
 8009564:	080100dc 	.word	0x080100dc
 8009568:	080100f4 	.word	0x080100f4
 800956c:	08010114 	.word	0x08010114
 8009570:	08010120 	.word	0x08010120
 8009574:	0801012c 	.word	0x0801012c
 8009578:	08010138 	.word	0x08010138
 800957c:	20000a8e 	.word	0x20000a8e
 8009580:	08010158 	.word	0x08010158
 8009584:	200009f8 	.word	0x200009f8
 8009588:	200009fc 	.word	0x200009fc
 800958c:	0801017c 	.word	0x0801017c
 8009590:	080101ac 	.word	0x080101ac
 8009594:	080101bc 	.word	0x080101bc
 8009598:	080101c8 	.word	0x080101c8

		case CWD_CMD:
			if(slen > 3)
 800959c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80095a0:	2b03      	cmp	r3, #3
 80095a2:	dd48      	ble.n	8009636 <proc_ftpd+0x7f6>
			{
				arg[slen - 3] = 0x00;
 80095a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80095a8:	3b03      	subs	r3, #3
 80095aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80095ae:	4413      	add	r3, r2
 80095b0:	2200      	movs	r2, #0
 80095b2:	701a      	strb	r2, [r3, #0]
				tmpstr = strrchr(arg, '/');
 80095b4:	212f      	movs	r1, #47	; 0x2f
 80095b6:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80095ba:	f005 f929 	bl	800e810 <strrchr>
 80095be:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
				*tmpstr = 0;
 80095c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80095c6:	2200      	movs	r2, #0
 80095c8:	701a      	strb	r2, [r3, #0]
#if defined(F_FILESYSTEM)
				slen = get_filesize(arg, tmpstr + 1);
 80095ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80095ce:	3301      	adds	r3, #1
 80095d0:	4619      	mov	r1, r3
 80095d2:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80095d6:	f7ff fa01 	bl	80089dc <get_filesize>
 80095da:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
#else
				slen = 0;
#endif
				*tmpstr = '/';
 80095de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80095e2:	222f      	movs	r2, #47	; 0x2f
 80095e4:	701a      	strb	r2, [r3, #0]
				if(slen == 0){
 80095e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d118      	bne.n	8009620 <proc_ftpd+0x7e0>
					slen = sprintf(sendbuf, "213 %d\r\n", slen);
 80095ee:	f107 0308 	add.w	r3, r7, #8
 80095f2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80095f6:	495a      	ldr	r1, [pc, #360]	; (8009760 <proc_ftpd+0x920>)
 80095f8:	4618      	mov	r0, r3
 80095fa:	f005 f8cd 	bl	800e798 <siprintf>
 80095fe:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
					strcpy(ftp.workingdir, arg);
 8009602:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8009606:	4857      	ldr	r0, [pc, #348]	; (8009764 <proc_ftpd+0x924>)
 8009608:	f005 f8e6 	bl	800e7d8 <strcpy>
					slen = sprintf(sendbuf, "250 CWD successful. \"%s\" is current directory.\r\n", ftp.workingdir);
 800960c:	f107 0308 	add.w	r3, r7, #8
 8009610:	4a54      	ldr	r2, [pc, #336]	; (8009764 <proc_ftpd+0x924>)
 8009612:	4955      	ldr	r1, [pc, #340]	; (8009768 <proc_ftpd+0x928>)
 8009614:	4618      	mov	r0, r3
 8009616:	f005 f8bf 	bl	800e798 <siprintf>
 800961a:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 800961e:	e018      	b.n	8009652 <proc_ftpd+0x812>
				}
				else
				{
					slen = sprintf(sendbuf, "550 CWD failed. \"%s\"\r\n", arg);
 8009620:	f107 0308 	add.w	r3, r7, #8
 8009624:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009628:	4950      	ldr	r1, [pc, #320]	; (800976c <proc_ftpd+0x92c>)
 800962a:	4618      	mov	r0, r3
 800962c:	f005 f8b4 	bl	800e798 <siprintf>
 8009630:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8009634:	e00d      	b.n	8009652 <proc_ftpd+0x812>
				}
			}
			else
			{
				strcpy(ftp.workingdir, arg);
 8009636:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800963a:	484a      	ldr	r0, [pc, #296]	; (8009764 <proc_ftpd+0x924>)
 800963c:	f005 f8cc 	bl	800e7d8 <strcpy>
				slen = sprintf(sendbuf, "250 CWD successful. \"%s\" is current directory.\r\n", ftp.workingdir);
 8009640:	f107 0308 	add.w	r3, r7, #8
 8009644:	4a47      	ldr	r2, [pc, #284]	; (8009764 <proc_ftpd+0x924>)
 8009646:	4948      	ldr	r1, [pc, #288]	; (8009768 <proc_ftpd+0x928>)
 8009648:	4618      	mov	r0, r3
 800964a:	f005 f8a5 	bl	800e798 <siprintf>
 800964e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
			}
			send(ftp.ctrl_sock, (uint8_t *)sendbuf, slen);
 8009652:	4b47      	ldr	r3, [pc, #284]	; (8009770 <proc_ftpd+0x930>)
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800965a:	b292      	uxth	r2, r2
 800965c:	f107 0108 	add.w	r1, r7, #8
 8009660:	4618      	mov	r0, r3
 8009662:	f7fe fbdd 	bl	8007e20 <send>
			break;
 8009666:	e075      	b.n	8009754 <proc_ftpd+0x914>

		case MKD_CMD:
		case XMKD_CMD:
#if defined(F_FILESYSTEM)
			if (f_mkdir(arg) != 0)
 8009668:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800966c:	f004 fbbf 	bl	800ddee <f_mkdir>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d00a      	beq.n	800968c <proc_ftpd+0x84c>
			{
				slen = sprintf(sendbuf, "550 Can't create directory. \"%s\"\r\n", arg);
 8009676:	f107 0308 	add.w	r3, r7, #8
 800967a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800967e:	493d      	ldr	r1, [pc, #244]	; (8009774 <proc_ftpd+0x934>)
 8009680:	4618      	mov	r0, r3
 8009682:	f005 f889 	bl	800e798 <siprintf>
 8009686:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 800968a:	e009      	b.n	80096a0 <proc_ftpd+0x860>
			}
			else
			{
				slen = sprintf(sendbuf, "257 MKD command successful. \"%s\"\r\n", arg);
 800968c:	f107 0308 	add.w	r3, r7, #8
 8009690:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009694:	4938      	ldr	r1, [pc, #224]	; (8009778 <proc_ftpd+0x938>)
 8009696:	4618      	mov	r0, r3
 8009698:	f005 f87e 	bl	800e798 <siprintf>
 800969c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
				//strcpy(ftp.workingdir, arg);
			}
#else
			slen = sprintf(sendbuf, "550 Can't create directory. Permission denied\r\n");
#endif
			send(ftp.ctrl_sock, (uint8_t *)sendbuf, slen);
 80096a0:	4b33      	ldr	r3, [pc, #204]	; (8009770 <proc_ftpd+0x930>)
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80096a8:	b292      	uxth	r2, r2
 80096aa:	f107 0108 	add.w	r1, r7, #8
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7fe fbb6 	bl	8007e20 <send>
			break;
 80096b4:	e04e      	b.n	8009754 <proc_ftpd+0x914>

		case DELE_CMD:

#if defined(F_FILESYSTEM)
			if (f_unlink(arg) != 0)
 80096b6:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80096ba:	f004 fadd 	bl	800dc78 <f_unlink>
 80096be:	4603      	mov	r3, r0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d00a      	beq.n	80096da <proc_ftpd+0x89a>
			{
				slen = sprintf(sendbuf, "550 Could not delete. \"%s\"\r\n", arg);
 80096c4:	f107 0308 	add.w	r3, r7, #8
 80096c8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80096cc:	492b      	ldr	r1, [pc, #172]	; (800977c <proc_ftpd+0x93c>)
 80096ce:	4618      	mov	r0, r3
 80096d0:	f005 f862 	bl	800e798 <siprintf>
 80096d4:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 80096d8:	e009      	b.n	80096ee <proc_ftpd+0x8ae>
			}
			else
			{
				slen = sprintf(sendbuf, "250 Deleted. \"%s\"\r\n", arg);
 80096da:	f107 0308 	add.w	r3, r7, #8
 80096de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80096e2:	4927      	ldr	r1, [pc, #156]	; (8009780 <proc_ftpd+0x940>)
 80096e4:	4618      	mov	r0, r3
 80096e6:	f005 f857 	bl	800e798 <siprintf>
 80096ea:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
			}
#else
			slen = sprintf(sendbuf, "550 Could not delete. Permission denied\r\n");
#endif
			send(ftp.ctrl_sock, (uint8_t *)sendbuf, slen);
 80096ee:	4b20      	ldr	r3, [pc, #128]	; (8009770 <proc_ftpd+0x930>)
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80096f6:	b292      	uxth	r2, r2
 80096f8:	f107 0108 	add.w	r1, r7, #8
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7fe fb8f 	bl	8007e20 <send>
			break;
 8009702:	e027      	b.n	8009754 <proc_ftpd+0x914>
		case RMD_CMD:
		case STRU_CMD:
		case MODE_CMD:
		case XMD5_CMD:
			//fsprintf(ftp.ctrl_sock, unimp);
			slen = sprintf(sendbuf, "502 Command does not implemented yet.\r\n");
 8009704:	f107 0308 	add.w	r3, r7, #8
 8009708:	491e      	ldr	r1, [pc, #120]	; (8009784 <proc_ftpd+0x944>)
 800970a:	4618      	mov	r0, r3
 800970c:	f005 f844 	bl	800e798 <siprintf>
 8009710:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
			send(ftp.ctrl_sock, (uint8_t *)sendbuf, slen);
 8009714:	4b16      	ldr	r3, [pc, #88]	; (8009770 <proc_ftpd+0x930>)
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800971c:	b292      	uxth	r2, r2
 800971e:	f107 0108 	add.w	r1, r7, #8
 8009722:	4618      	mov	r0, r3
 8009724:	f7fe fb7c 	bl	8007e20 <send>
			break;
 8009728:	e014      	b.n	8009754 <proc_ftpd+0x914>

		default:	/* Invalid */
			//fsprintf(ftp.ctrl_sock, badcmd, arg);
			slen = sprintf(sendbuf, "500 Unknown command \'%s\'\r\n", arg);
 800972a:	f107 0308 	add.w	r3, r7, #8
 800972e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009732:	4915      	ldr	r1, [pc, #84]	; (8009788 <proc_ftpd+0x948>)
 8009734:	4618      	mov	r0, r3
 8009736:	f005 f82f 	bl	800e798 <siprintf>
 800973a:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
			send(ftp.ctrl_sock, (uint8_t *)sendbuf, slen);
 800973e:	4b0c      	ldr	r3, [pc, #48]	; (8009770 <proc_ftpd+0x930>)
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8009746:	b292      	uxth	r2, r2
 8009748:	f107 0108 	add.w	r1, r7, #8
 800974c:	4618      	mov	r0, r3
 800974e:	f7fe fb67 	bl	8007e20 <send>
			break;
 8009752:	bf00      	nop
	}
	
	return 1;
 8009754:	2301      	movs	r3, #1
}
 8009756:	4618      	mov	r0, r3
 8009758:	37ec      	adds	r7, #236	; 0xec
 800975a:	46bd      	mov	sp, r7
 800975c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800975e:	bf00      	nop
 8009760:	080101bc 	.word	0x080101bc
 8009764:	20000a8e 	.word	0x20000a8e
 8009768:	080101e0 	.word	0x080101e0
 800976c:	08010214 	.word	0x08010214
 8009770:	20000a00 	.word	0x20000a00
 8009774:	0801022c 	.word	0x0801022c
 8009778:	08010250 	.word	0x08010250
 800977c:	08010274 	.word	0x08010274
 8009780:	08010294 	.word	0x08010294
 8009784:	080102a8 	.word	0x080102a8
 8009788:	0800ff1c 	.word	0x0800ff1c

0800978c <pport>:


int pport(char * arg)
{
 800978c:	b590      	push	{r4, r7, lr}
 800978e:	b087      	sub	sp, #28
 8009790:	af02      	add	r7, sp, #8
 8009792:	6078      	str	r0, [r7, #4]
	int i;
	char* tok=0;
 8009794:	2300      	movs	r3, #0
 8009796:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < 4; i++)
 8009798:	2300      	movs	r3, #0
 800979a:	60fb      	str	r3, [r7, #12]
 800979c:	e024      	b.n	80097e8 <pport+0x5c>
	{
		if(i==0) tok = strtok(arg,",\r\n");
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d105      	bne.n	80097b0 <pport+0x24>
 80097a4:	4935      	ldr	r1, [pc, #212]	; (800987c <pport+0xf0>)
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f005 f846 	bl	800e838 <strtok>
 80097ac:	60b8      	str	r0, [r7, #8]
 80097ae:	e004      	b.n	80097ba <pport+0x2e>
		else	 tok = strtok(NULL,",");
 80097b0:	4933      	ldr	r1, [pc, #204]	; (8009880 <pport+0xf4>)
 80097b2:	2000      	movs	r0, #0
 80097b4:	f005 f840 	bl	800e838 <strtok>
 80097b8:	60b8      	str	r0, [r7, #8]
		remote_ip[i] = (uint8_t)atoi(tok);
 80097ba:	68b8      	ldr	r0, [r7, #8]
 80097bc:	f004 fe03 	bl	800e3c6 <atoi>
 80097c0:	4603      	mov	r3, r0
 80097c2:	b2d9      	uxtb	r1, r3
 80097c4:	4a2f      	ldr	r2, [pc, #188]	; (8009884 <pport+0xf8>)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	4413      	add	r3, r2
 80097ca:	460a      	mov	r2, r1
 80097cc:	701a      	strb	r2, [r3, #0]
		if (!tok)
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d106      	bne.n	80097e2 <pport+0x56>
		{
#if defined(_FTP_DEBUG_)
			printf("bad pport : %s\r\n", arg);
 80097d4:	6879      	ldr	r1, [r7, #4]
 80097d6:	482c      	ldr	r0, [pc, #176]	; (8009888 <pport+0xfc>)
 80097d8:	f004 ff2a 	bl	800e630 <iprintf>
#endif
			return -1;
 80097dc:	f04f 33ff 	mov.w	r3, #4294967295
 80097e0:	e047      	b.n	8009872 <pport+0xe6>
	for (i = 0; i < 4; i++)
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	3301      	adds	r3, #1
 80097e6:	60fb      	str	r3, [r7, #12]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2b03      	cmp	r3, #3
 80097ec:	ddd7      	ble.n	800979e <pport+0x12>
		}
	}
	remote_port = 0;
 80097ee:	4b27      	ldr	r3, [pc, #156]	; (800988c <pport+0x100>)
 80097f0:	2200      	movs	r2, #0
 80097f2:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < 2; i++)
 80097f4:	2300      	movs	r3, #0
 80097f6:	60fb      	str	r3, [r7, #12]
 80097f8:	e022      	b.n	8009840 <pport+0xb4>
	{
		tok = strtok(NULL,",\r\n");
 80097fa:	4920      	ldr	r1, [pc, #128]	; (800987c <pport+0xf0>)
 80097fc:	2000      	movs	r0, #0
 80097fe:	f005 f81b 	bl	800e838 <strtok>
 8009802:	60b8      	str	r0, [r7, #8]
		remote_port <<= 8;
 8009804:	4b21      	ldr	r3, [pc, #132]	; (800988c <pport+0x100>)
 8009806:	881b      	ldrh	r3, [r3, #0]
 8009808:	021b      	lsls	r3, r3, #8
 800980a:	b29a      	uxth	r2, r3
 800980c:	4b1f      	ldr	r3, [pc, #124]	; (800988c <pport+0x100>)
 800980e:	801a      	strh	r2, [r3, #0]
		remote_port += atoi(tok);
 8009810:	68b8      	ldr	r0, [r7, #8]
 8009812:	f004 fdd8 	bl	800e3c6 <atoi>
 8009816:	4603      	mov	r3, r0
 8009818:	b29a      	uxth	r2, r3
 800981a:	4b1c      	ldr	r3, [pc, #112]	; (800988c <pport+0x100>)
 800981c:	881b      	ldrh	r3, [r3, #0]
 800981e:	4413      	add	r3, r2
 8009820:	b29a      	uxth	r2, r3
 8009822:	4b1a      	ldr	r3, [pc, #104]	; (800988c <pport+0x100>)
 8009824:	801a      	strh	r2, [r3, #0]
		if (!tok)
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d106      	bne.n	800983a <pport+0xae>
		{
#if defined(_FTP_DEBUG_)
			printf("bad pport : %s\r\n", arg);
 800982c:	6879      	ldr	r1, [r7, #4]
 800982e:	4816      	ldr	r0, [pc, #88]	; (8009888 <pport+0xfc>)
 8009830:	f004 fefe 	bl	800e630 <iprintf>
#endif
			return -1;
 8009834:	f04f 33ff 	mov.w	r3, #4294967295
 8009838:	e01b      	b.n	8009872 <pport+0xe6>
	for (i = 0; i < 2; i++)
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	3301      	adds	r3, #1
 800983e:	60fb      	str	r3, [r7, #12]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2b01      	cmp	r3, #1
 8009844:	ddd9      	ble.n	80097fa <pport+0x6e>
		}
	}
#if defined(_FTP_DEBUG_)
	printf("ip : %d.%d.%d.%d, port : %d\r\n", remote_ip[0], remote_ip[1], remote_ip[2], remote_ip[3], remote_port);
 8009846:	4b0f      	ldr	r3, [pc, #60]	; (8009884 <pport+0xf8>)
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	4619      	mov	r1, r3
 800984c:	4b0d      	ldr	r3, [pc, #52]	; (8009884 <pport+0xf8>)
 800984e:	785b      	ldrb	r3, [r3, #1]
 8009850:	4618      	mov	r0, r3
 8009852:	4b0c      	ldr	r3, [pc, #48]	; (8009884 <pport+0xf8>)
 8009854:	789b      	ldrb	r3, [r3, #2]
 8009856:	461c      	mov	r4, r3
 8009858:	4b0a      	ldr	r3, [pc, #40]	; (8009884 <pport+0xf8>)
 800985a:	78db      	ldrb	r3, [r3, #3]
 800985c:	461a      	mov	r2, r3
 800985e:	4b0b      	ldr	r3, [pc, #44]	; (800988c <pport+0x100>)
 8009860:	881b      	ldrh	r3, [r3, #0]
 8009862:	9301      	str	r3, [sp, #4]
 8009864:	9200      	str	r2, [sp, #0]
 8009866:	4623      	mov	r3, r4
 8009868:	4602      	mov	r2, r0
 800986a:	4809      	ldr	r0, [pc, #36]	; (8009890 <pport+0x104>)
 800986c:	f004 fee0 	bl	800e630 <iprintf>
#endif

	return 0;
 8009870:	2300      	movs	r3, #0
}
 8009872:	4618      	mov	r0, r3
 8009874:	3714      	adds	r7, #20
 8009876:	46bd      	mov	sp, r7
 8009878:	bd90      	pop	{r4, r7, pc}
 800987a:	bf00      	nop
 800987c:	080102d0 	.word	0x080102d0
 8009880:	080102d4 	.word	0x080102d4
 8009884:	200009f0 	.word	0x200009f0
 8009888:	080102d8 	.word	0x080102d8
 800988c:	200009f4 	.word	0x200009f4
 8009890:	080102ec 	.word	0x080102ec

08009894 <ftpd_dsock_ready>:




int ftpd_dsock_ready(){
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
    int ret;
    if(getSn_SR(ftp.data_sock)!= SOCK_CLOSED)
 800989a:	4b22      	ldr	r3, [pc, #136]	; (8009924 <ftpd_dsock_ready+0x90>)
 800989c:	785b      	ldrb	r3, [r3, #1]
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	3301      	adds	r3, #1
 80098a2:	00db      	lsls	r3, r3, #3
 80098a4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7fd fce1 	bl	8007270 <WIZCHIP_READ>
 80098ae:	4603      	mov	r3, r0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d004      	beq.n	80098be <ftpd_dsock_ready+0x2a>
    {
        close(ftp.data_sock);
 80098b4:	4b1b      	ldr	r3, [pc, #108]	; (8009924 <ftpd_dsock_ready+0x90>)
 80098b6:	785b      	ldrb	r3, [r3, #1]
 80098b8:	4618      	mov	r0, r3
 80098ba:	f7fe f897 	bl	80079ec <close>
    }
    if(ftp.is_active == 1){
 80098be:	4b19      	ldr	r3, [pc, #100]	; (8009924 <ftpd_dsock_ready+0x90>)
 80098c0:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d11b      	bne.n	8009900 <ftpd_dsock_ready+0x6c>
        socket(ftp.data_sock, Sn_MR_TCP, IPPORT_FTPD, 0x0);
 80098c8:	4b16      	ldr	r3, [pc, #88]	; (8009924 <ftpd_dsock_ready+0x90>)
 80098ca:	7858      	ldrb	r0, [r3, #1]
 80098cc:	2300      	movs	r3, #0
 80098ce:	2214      	movs	r2, #20
 80098d0:	2101      	movs	r1, #1
 80098d2:	f7fd ff75 	bl	80077c0 <socket>
        ret=connect(ftp.data_sock, remote_ip, remote_port);
 80098d6:	4b13      	ldr	r3, [pc, #76]	; (8009924 <ftpd_dsock_ready+0x90>)
 80098d8:	785b      	ldrb	r3, [r3, #1]
 80098da:	4a13      	ldr	r2, [pc, #76]	; (8009928 <ftpd_dsock_ready+0x94>)
 80098dc:	8812      	ldrh	r2, [r2, #0]
 80098de:	4913      	ldr	r1, [pc, #76]	; (800992c <ftpd_dsock_ready+0x98>)
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7fe f94b 	bl	8007b7c <connect>
 80098e6:	4603      	mov	r3, r0
 80098e8:	607b      	str	r3, [r7, #4]
        if(ret  != SOCK_OK){
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d014      	beq.n	800991a <ftpd_dsock_ready+0x86>
#if defined(_FTP_DEBUG_)
            printf("%d:Connect error\r\n", ftp.data_sock);
 80098f0:	4b0c      	ldr	r3, [pc, #48]	; (8009924 <ftpd_dsock_ready+0x90>)
 80098f2:	785b      	ldrb	r3, [r3, #1]
 80098f4:	4619      	mov	r1, r3
 80098f6:	480e      	ldr	r0, [pc, #56]	; (8009930 <ftpd_dsock_ready+0x9c>)
 80098f8:	f004 fe9a 	bl	800e630 <iprintf>
#endif
            return ret;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	e00d      	b.n	800991c <ftpd_dsock_ready+0x88>
        }

    }
    else
    {
        socket(ftp.data_sock, Sn_MR_TCP, local_port, 0x0);
 8009900:	4b08      	ldr	r3, [pc, #32]	; (8009924 <ftpd_dsock_ready+0x90>)
 8009902:	7858      	ldrb	r0, [r3, #1]
 8009904:	4b0b      	ldr	r3, [pc, #44]	; (8009934 <ftpd_dsock_ready+0xa0>)
 8009906:	881a      	ldrh	r2, [r3, #0]
 8009908:	2300      	movs	r3, #0
 800990a:	2101      	movs	r1, #1
 800990c:	f7fd ff58 	bl	80077c0 <socket>
        listen(ftp.data_sock);
 8009910:	4b04      	ldr	r3, [pc, #16]	; (8009924 <ftpd_dsock_ready+0x90>)
 8009912:	785b      	ldrb	r3, [r3, #1]
 8009914:	4618      	mov	r0, r3
 8009916:	f7fe f8d7 	bl	8007ac8 <listen>
    }
    return 0;
 800991a:	2300      	movs	r3, #0
}
 800991c:	4618      	mov	r0, r3
 800991e:	3708      	adds	r7, #8
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}
 8009924:	20000a00 	.word	0x20000a00
 8009928:	200009f4 	.word	0x200009f4
 800992c:	200009f0 	.word	0x200009f0
 8009930:	0801030c 	.word	0x0801030c
 8009934:	200009fc 	.word	0x200009fc

08009938 <ftpd_listcmd>:

int ftpd_listcmd(char* arg){
 8009938:	b580      	push	{r7, lr}
 800993a:	f5ad 7d38 	sub.w	sp, sp, #736	; 0x2e0
 800993e:	af00      	add	r7, sp, #0
 8009940:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009944:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8009948:	6018      	str	r0, [r3, #0]
    char sendbuf[200], dbuf[_MAX_SS];
    uint8_t tmp;
    int size;
    int16_t slen;

    slen = sprintf(sendbuf, "150 Opening data channel for directory listing of \"%s\"\r\n", ftp.workingdir);
 800994a:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800994e:	4a3b      	ldr	r2, [pc, #236]	; (8009a3c <ftpd_listcmd+0x104>)
 8009950:	493b      	ldr	r1, [pc, #236]	; (8009a40 <ftpd_listcmd+0x108>)
 8009952:	4618      	mov	r0, r3
 8009954:	f004 ff20 	bl	800e798 <siprintf>
 8009958:	4603      	mov	r3, r0
 800995a:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
    send(ftp.ctrl_sock, (uint8_t *)sendbuf, slen);
 800995e:	4b39      	ldr	r3, [pc, #228]	; (8009a44 <ftpd_listcmd+0x10c>)
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	f8b7 22de 	ldrh.w	r2, [r7, #734]	; 0x2de
 8009966:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800996a:	4618      	mov	r0, r3
 800996c:	f7fe fa58 	bl	8007e20 <send>
    getsockopt(ftp.data_sock, SO_STATUS, &tmp);
 8009970:	4b34      	ldr	r3, [pc, #208]	; (8009a44 <ftpd_listcmd+0x10c>)
 8009972:	785b      	ldrb	r3, [r3, #1]
 8009974:	f107 0213 	add.w	r2, r7, #19
 8009978:	210a      	movs	r1, #10
 800997a:	4618      	mov	r0, r3
 800997c:	f7fe fc00 	bl	8008180 <getsockopt>
    if(tmp!=SOCK_ESTABLISHED)
 8009980:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009984:	f2a3 23cd 	subw	r3, r3, #717	; 0x2cd
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	2b17      	cmp	r3, #23
 800998c:	d001      	beq.n	8009992 <ftpd_listcmd+0x5a>
    {
        ftpd_dsock_ready();
 800998e:	f7ff ff81 	bl	8009894 <ftpd_dsock_ready>
    }

#if defined(F_FILESYSTEM)
    				scan_files(ftp.workingdir, dbuf, (int *)&size);
 8009992:	f107 020c 	add.w	r2, r7, #12
 8009996:	f107 0314 	add.w	r3, r7, #20
 800999a:	4619      	mov	r1, r3
 800999c:	4827      	ldr	r0, [pc, #156]	; (8009a3c <ftpd_listcmd+0x104>)
 800999e:	f7fe ffa9 	bl	80088f4 <scan_files>
#endif
#if defined(_FTP_DEBUG_)
    				printf("returned size: %d\r\n", size);
 80099a2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80099a6:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4619      	mov	r1, r3
 80099ae:	4826      	ldr	r0, [pc, #152]	; (8009a48 <ftpd_listcmd+0x110>)
 80099b0:	f004 fe3e 	bl	800e630 <iprintf>
    				printf("%s\r\n", dbuf);
 80099b4:	f107 0314 	add.w	r3, r7, #20
 80099b8:	4619      	mov	r1, r3
 80099ba:	4824      	ldr	r0, [pc, #144]	; (8009a4c <ftpd_listcmd+0x114>)
 80099bc:	f004 fe38 	bl	800e630 <iprintf>
#endif
#if !defined(F_FILESYSTEM)
    if (strncmp(ftp.workingdir, "/$Recycle.Bin", sizeof("/$Recycle.Bin")) != 0)
        size = sprintf((char*)dbuf, "drwxr-xr-x 1 ftp ftp 0 Dec 31 2014 $Recycle.Bin\r\n-rwxr-xr-x 1 ftp ftp 512 Dec 31 2014 test.txt\r\n");
#endif
    size = strlen((char*)dbuf);
 80099c0:	f107 0314 	add.w	r3, r7, #20
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7f6 fc35 	bl	8000234 <strlen>
 80099ca:	4603      	mov	r3, r0
 80099cc:	461a      	mov	r2, r3
 80099ce:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80099d2:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80099d6:	601a      	str	r2, [r3, #0]
    send(ftp.data_sock, (uint8_t*)dbuf, size);
 80099d8:	4b1a      	ldr	r3, [pc, #104]	; (8009a44 <ftpd_listcmd+0x10c>)
 80099da:	7858      	ldrb	r0, [r3, #1]
 80099dc:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80099e0:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	b29a      	uxth	r2, r3
 80099e8:	f107 0314 	add.w	r3, r7, #20
 80099ec:	4619      	mov	r1, r3
 80099ee:	f7fe fa17 	bl	8007e20 <send>
    disconnect(ftp.data_sock);
 80099f2:	4b14      	ldr	r3, [pc, #80]	; (8009a44 <ftpd_listcmd+0x10c>)
 80099f4:	785b      	ldrb	r3, [r3, #1]
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7fe f99c 	bl	8007d34 <disconnect>
    size = sprintf((char*)dbuf, "226 Successfully transferred \"%s\"\r\n", ftp.workingdir);
 80099fc:	f107 0314 	add.w	r3, r7, #20
 8009a00:	4a0e      	ldr	r2, [pc, #56]	; (8009a3c <ftpd_listcmd+0x104>)
 8009a02:	4913      	ldr	r1, [pc, #76]	; (8009a50 <ftpd_listcmd+0x118>)
 8009a04:	4618      	mov	r0, r3
 8009a06:	f004 fec7 	bl	800e798 <siprintf>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009a10:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8009a14:	601a      	str	r2, [r3, #0]
    send(ftp.ctrl_sock, (uint8_t*)dbuf, size);
 8009a16:	4b0b      	ldr	r3, [pc, #44]	; (8009a44 <ftpd_listcmd+0x10c>)
 8009a18:	7818      	ldrb	r0, [r3, #0]
 8009a1a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009a1e:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	b29a      	uxth	r2, r3
 8009a26:	f107 0314 	add.w	r3, r7, #20
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	f7fe f9f8 	bl	8007e20 <send>
    return 0;
 8009a30:	2300      	movs	r3, #0
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	f507 7738 	add.w	r7, r7, #736	; 0x2e0
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	20000a8e 	.word	0x20000a8e
 8009a40:	08010320 	.word	0x08010320
 8009a44:	20000a00 	.word	0x20000a00
 8009a48:	0801035c 	.word	0x0801035c
 8009a4c:	08010370 	.word	0x08010370
 8009a50:	08010378 	.word	0x08010378

08009a54 <ftpd_retrcmd>:

int ftpd_retrcmd(char* arg){
 8009a54:	b580      	push	{r7, lr}
 8009a56:	f5ad 7d38 	sub.w	sp, sp, #736	; 0x2e0
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009a60:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8009a64:	6018      	str	r0, [r3, #0]
    size_t remain_filesize;
    uint8_t tmp;
    uint32_t blocklen, send_byte;
    char sendbuf[200], dbuf[_MAX_SS];

    if(strlen(ftp.workingdir) == 1)
 8009a66:	4867      	ldr	r0, [pc, #412]	; (8009c04 <ftpd_retrcmd+0x1b0>)
 8009a68:	f7f6 fbe4 	bl	8000234 <strlen>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d109      	bne.n	8009a86 <ftpd_retrcmd+0x32>
        sprintf(ftp.filename, "/%s", arg);
 8009a72:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009a76:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	4962      	ldr	r1, [pc, #392]	; (8009c08 <ftpd_retrcmd+0x1b4>)
 8009a7e:	4863      	ldr	r0, [pc, #396]	; (8009c0c <ftpd_retrcmd+0x1b8>)
 8009a80:	f004 fe8a 	bl	800e798 <siprintf>
 8009a84:	e009      	b.n	8009a9a <ftpd_retrcmd+0x46>
    else
        sprintf(ftp.filename, "%s/%s", ftp.workingdir, arg);
 8009a86:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009a8a:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a5c      	ldr	r2, [pc, #368]	; (8009c04 <ftpd_retrcmd+0x1b0>)
 8009a92:	495f      	ldr	r1, [pc, #380]	; (8009c10 <ftpd_retrcmd+0x1bc>)
 8009a94:	485d      	ldr	r0, [pc, #372]	; (8009c0c <ftpd_retrcmd+0x1b8>)
 8009a96:	f004 fe7f 	bl	800e798 <siprintf>
    slen = sprintf(sendbuf, "150 Opening data channel for file download from server of \"%s\"\r\n", ftp.filename);
 8009a9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009a9e:	4a5b      	ldr	r2, [pc, #364]	; (8009c0c <ftpd_retrcmd+0x1b8>)
 8009aa0:	495c      	ldr	r1, [pc, #368]	; (8009c14 <ftpd_retrcmd+0x1c0>)
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f004 fe78 	bl	800e798 <siprintf>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6
    send(ftp.ctrl_sock, (uint8_t *)sendbuf, slen);
 8009aae:	4b5a      	ldr	r3, [pc, #360]	; (8009c18 <ftpd_retrcmd+0x1c4>)
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	f8b7 22d6 	ldrh.w	r2, [r7, #726]	; 0x2d6
 8009ab6:	f507 7102 	add.w	r1, r7, #520	; 0x208
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7fe f9b0 	bl	8007e20 <send>
    getsockopt(ftp.data_sock, SO_STATUS, &tmp);
 8009ac0:	4b55      	ldr	r3, [pc, #340]	; (8009c18 <ftpd_retrcmd+0x1c4>)
 8009ac2:	785b      	ldrb	r3, [r3, #1]
 8009ac4:	f207 22d5 	addw	r2, r7, #725	; 0x2d5
 8009ac8:	210a      	movs	r1, #10
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7fe fb58 	bl	8008180 <getsockopt>
    if(tmp!=SOCK_ESTABLISHED)
 8009ad0:	f897 32d5 	ldrb.w	r3, [r7, #725]	; 0x2d5
 8009ad4:	2b17      	cmp	r3, #23
 8009ad6:	d001      	beq.n	8009adc <ftpd_retrcmd+0x88>
    {
        ftpd_dsock_ready();
 8009ad8:	f7ff fedc 	bl	8009894 <ftpd_dsock_ready>
    }
#if defined(_FTP_DEBUG_)
    printf("filename to retrieve : %s %d\r\n", ftp.filename, strlen(ftp.filename));
 8009adc:	484b      	ldr	r0, [pc, #300]	; (8009c0c <ftpd_retrcmd+0x1b8>)
 8009ade:	f7f6 fba9 	bl	8000234 <strlen>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	4949      	ldr	r1, [pc, #292]	; (8009c0c <ftpd_retrcmd+0x1b8>)
 8009ae8:	484c      	ldr	r0, [pc, #304]	; (8009c1c <ftpd_retrcmd+0x1c8>)
 8009aea:	f004 fda1 	bl	800e630 <iprintf>
#endif
#if defined(F_FILESYSTEM)
	ftp.fr = f_open(&(ftp.fil), (const char *)ftp.filename, FA_READ);
 8009aee:	2201      	movs	r2, #1
 8009af0:	4946      	ldr	r1, [pc, #280]	; (8009c0c <ftpd_retrcmd+0x1b8>)
 8009af2:	484b      	ldr	r0, [pc, #300]	; (8009c20 <ftpd_retrcmd+0x1cc>)
 8009af4:	f003 faa0 	bl	800d038 <f_open>
 8009af8:	4603      	mov	r3, r0
 8009afa:	461a      	mov	r2, r3
 8009afc:	4b46      	ldr	r3, [pc, #280]	; (8009c18 <ftpd_retrcmd+0x1c4>)
 8009afe:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
	//print_filedsc(&(ftp.fil));
	if(ftp.fr == FR_OK){
 8009b02:	4b45      	ldr	r3, [pc, #276]	; (8009c18 <ftpd_retrcmd+0x1c4>)
 8009b04:	f893 338c 	ldrb.w	r3, [r3, #908]	; 0x38c
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d156      	bne.n	8009bba <ftpd_retrcmd+0x166>
		remain_filesize = ftp.fil.obj.objsize;
 8009b0c:	4b42      	ldr	r3, [pc, #264]	; (8009c18 <ftpd_retrcmd+0x1c4>)
 8009b0e:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8009b12:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
#if defined(_FTP_DEBUG_)
		printf("f_open return FR_OK\r\n");
 8009b16:	4843      	ldr	r0, [pc, #268]	; (8009c24 <ftpd_retrcmd+0x1d0>)
 8009b18:	f004 fe26 	bl	800e768 <puts>
#endif
		do{
#if defined(_FTP_DEBUG_)
			//printf("remained file size: %d\r\n", ftp.fil.fsize);
#endif
			memset(dbuf, 0, _MAX_SS);
 8009b1c:	f107 0308 	add.w	r3, r7, #8
 8009b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b24:	2100      	movs	r1, #0
 8009b26:	4618      	mov	r0, r3
 8009b28:	f004 fc9a 	bl	800e460 <memset>

			if(remain_filesize > _MAX_SS)
 8009b2c:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8009b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b34:	d904      	bls.n	8009b40 <ftpd_retrcmd+0xec>
				send_byte = _MAX_SS;
 8009b36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b3a:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
 8009b3e:	e003      	b.n	8009b48 <ftpd_retrcmd+0xf4>
			else
				send_byte = remain_filesize;
 8009b40:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8009b44:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8

			ftp.fr = f_read(&(ftp.fil), dbuf, send_byte , &blocklen);
 8009b48:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8009b4c:	f107 0108 	add.w	r1, r7, #8
 8009b50:	f8d7 22d8 	ldr.w	r2, [r7, #728]	; 0x2d8
 8009b54:	4832      	ldr	r0, [pc, #200]	; (8009c20 <ftpd_retrcmd+0x1cc>)
 8009b56:	f003 fc3d 	bl	800d3d4 <f_read>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	4b2e      	ldr	r3, [pc, #184]	; (8009c18 <ftpd_retrcmd+0x1c4>)
 8009b60:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
			if(ftp.fr != FR_OK)
 8009b64:	4b2c      	ldr	r3, [pc, #176]	; (8009c18 <ftpd_retrcmd+0x1c4>)
 8009b66:	f893 338c 	ldrb.w	r3, [r3, #908]	; 0x38c
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d118      	bne.n	8009ba0 <ftpd_retrcmd+0x14c>
				break;
#if defined(_FTP_DEBUG_)
			printf("#");
 8009b6e:	2023      	movs	r0, #35	; 0x23
 8009b70:	f004 fd76 	bl	800e660 <putchar>
			//printf("----->fsize:%d recv:%d len:%d \r\n", remain_filesize, send_byte, blocklen);
			//printf("----->fn:%s data:%s \r\n", ftp.filename, dbuf);
#endif
			send(ftp.data_sock, dbuf, blocklen);
 8009b74:	4b28      	ldr	r3, [pc, #160]	; (8009c18 <ftpd_retrcmd+0x1c4>)
 8009b76:	785b      	ldrb	r3, [r3, #1]
 8009b78:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8009b7c:	b292      	uxth	r2, r2
 8009b7e:	f107 0108 	add.w	r1, r7, #8
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7fe f94c 	bl	8007e20 <send>
			remain_filesize -= blocklen;
 8009b88:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8009b8c:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8009b90:	1ad3      	subs	r3, r2, r3
 8009b92:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
		}while(remain_filesize != 0);
 8009b96:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d1be      	bne.n	8009b1c <ftpd_retrcmd+0xc8>
 8009b9e:	e000      	b.n	8009ba2 <ftpd_retrcmd+0x14e>
				break;
 8009ba0:	bf00      	nop
#if defined(_FTP_DEBUG_)
		printf("\r\nFile read finished\r\n");
 8009ba2:	4821      	ldr	r0, [pc, #132]	; (8009c28 <ftpd_retrcmd+0x1d4>)
 8009ba4:	f004 fde0 	bl	800e768 <puts>
#endif
		ftp.fr = f_close(&(ftp.fil));
 8009ba8:	481d      	ldr	r0, [pc, #116]	; (8009c20 <ftpd_retrcmd+0x1cc>)
 8009baa:	f003 ff45 	bl	800da38 <f_close>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	4b19      	ldr	r3, [pc, #100]	; (8009c18 <ftpd_retrcmd+0x1c4>)
 8009bb4:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
 8009bb8:	e006      	b.n	8009bc8 <ftpd_retrcmd+0x174>
	}else{
#if defined(_FTP_DEBUG_)
		printf("File Open Error: %d\r\n", ftp.fr);
 8009bba:	4b17      	ldr	r3, [pc, #92]	; (8009c18 <ftpd_retrcmd+0x1c4>)
 8009bbc:	f893 338c 	ldrb.w	r3, [r3, #908]	; 0x38c
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	481a      	ldr	r0, [pc, #104]	; (8009c2c <ftpd_retrcmd+0x1d8>)
 8009bc4:	f004 fd34 	bl	800e630 <iprintf>
        printf("########## dbuf:%s\r\n", dbuf);
        send(ftp.data_sock, (uint8_t*)dbuf, blocklen);
        remain_filesize -= blocklen;
    }while(remain_filesize != 0);
#endif
    disconnect(ftp.data_sock);
 8009bc8:	4b13      	ldr	r3, [pc, #76]	; (8009c18 <ftpd_retrcmd+0x1c4>)
 8009bca:	785b      	ldrb	r3, [r3, #1]
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7fe f8b1 	bl	8007d34 <disconnect>
    slen = sprintf(sendbuf, "226 Successfully transferred \"%s\"\r\n", ftp.filename);
 8009bd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009bd6:	4a0d      	ldr	r2, [pc, #52]	; (8009c0c <ftpd_retrcmd+0x1b8>)
 8009bd8:	4915      	ldr	r1, [pc, #84]	; (8009c30 <ftpd_retrcmd+0x1dc>)
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f004 fddc 	bl	800e798 <siprintf>
 8009be0:	4603      	mov	r3, r0
 8009be2:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6
    send(ftp.ctrl_sock, (uint8_t*)sendbuf, slen);
 8009be6:	4b0c      	ldr	r3, [pc, #48]	; (8009c18 <ftpd_retrcmd+0x1c4>)
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	f8b7 22d6 	ldrh.w	r2, [r7, #726]	; 0x2d6
 8009bee:	f507 7102 	add.w	r1, r7, #520	; 0x208
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7fe f914 	bl	8007e20 <send>
    return 0;
 8009bf8:	2300      	movs	r3, #0

}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f507 7738 	add.w	r7, r7, #736	; 0x2e0
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}
 8009c04:	20000a8e 	.word	0x20000a8e
 8009c08:	0800fdbc 	.word	0x0800fdbc
 8009c0c:	20000af2 	.word	0x20000af2
 8009c10:	0801039c 	.word	0x0801039c
 8009c14:	080103a4 	.word	0x080103a4
 8009c18:	20000a00 	.word	0x20000a00
 8009c1c:	080103e8 	.word	0x080103e8
 8009c20:	20000b5c 	.word	0x20000b5c
 8009c24:	08010408 	.word	0x08010408
 8009c28:	08010420 	.word	0x08010420
 8009c2c:	08010438 	.word	0x08010438
 8009c30:	08010378 	.word	0x08010378

08009c34 <ftpd_storcmd>:

int ftpd_storcmd(char* arg){
 8009c34:	b580      	push	{r7, lr}
 8009c36:	f5ad 7d38 	sub.w	sp, sp, #736	; 0x2e0
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009c40:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8009c44:	6018      	str	r0, [r3, #0]
    uint8_t tmp;
    uint16_t recv_byte;
    uint16_t ret;
    uint32_t blocklen;

    if(strlen(ftp.workingdir) == 1)
 8009c46:	487e      	ldr	r0, [pc, #504]	; (8009e40 <ftpd_storcmd+0x20c>)
 8009c48:	f7f6 faf4 	bl	8000234 <strlen>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	2b01      	cmp	r3, #1
 8009c50:	d109      	bne.n	8009c66 <ftpd_storcmd+0x32>
       sprintf(ftp.filename, "/%s", arg);
 8009c52:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009c56:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	4979      	ldr	r1, [pc, #484]	; (8009e44 <ftpd_storcmd+0x210>)
 8009c5e:	487a      	ldr	r0, [pc, #488]	; (8009e48 <ftpd_storcmd+0x214>)
 8009c60:	f004 fd9a 	bl	800e798 <siprintf>
 8009c64:	e009      	b.n	8009c7a <ftpd_storcmd+0x46>
    else
       sprintf(ftp.filename, "%s/%s", ftp.workingdir, arg);
 8009c66:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009c6a:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a73      	ldr	r2, [pc, #460]	; (8009e40 <ftpd_storcmd+0x20c>)
 8009c72:	4976      	ldr	r1, [pc, #472]	; (8009e4c <ftpd_storcmd+0x218>)
 8009c74:	4874      	ldr	r0, [pc, #464]	; (8009e48 <ftpd_storcmd+0x214>)
 8009c76:	f004 fd8f 	bl	800e798 <siprintf>
    slen = sprintf(sendbuf, "150 Opening data channel for file upload to server of \"%s\"\r\n", ftp.filename);
 8009c7a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009c7e:	4a72      	ldr	r2, [pc, #456]	; (8009e48 <ftpd_storcmd+0x214>)
 8009c80:	4973      	ldr	r1, [pc, #460]	; (8009e50 <ftpd_storcmd+0x21c>)
 8009c82:	4618      	mov	r0, r3
 8009c84:	f004 fd88 	bl	800e798 <siprintf>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	f8a7 32da 	strh.w	r3, [r7, #730]	; 0x2da
    send(ftp.ctrl_sock, (uint8_t *)sendbuf, slen);
 8009c8e:	4b71      	ldr	r3, [pc, #452]	; (8009e54 <ftpd_storcmd+0x220>)
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	f8b7 22da 	ldrh.w	r2, [r7, #730]	; 0x2da
 8009c96:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7fe f8c0 	bl	8007e20 <send>

    getsockopt(ftp.data_sock, SO_STATUS, &tmp);
 8009ca0:	4b6c      	ldr	r3, [pc, #432]	; (8009e54 <ftpd_storcmd+0x220>)
 8009ca2:	785b      	ldrb	r3, [r3, #1]
 8009ca4:	f107 020f 	add.w	r2, r7, #15
 8009ca8:	210a      	movs	r1, #10
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7fe fa68 	bl	8008180 <getsockopt>
	if(tmp!=SOCK_ESTABLISHED)
 8009cb0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009cb4:	f2a3 23d1 	subw	r3, r3, #721	; 0x2d1
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	2b17      	cmp	r3, #23
 8009cbc:	d001      	beq.n	8009cc2 <ftpd_storcmd+0x8e>
	{
		ftpd_dsock_ready();
 8009cbe:	f7ff fde9 	bl	8009894 <ftpd_dsock_ready>
	}

#if defined(_FTP_DEBUG_)
    printf("filename to store : %s %d\r\n", ftp.filename, strlen(ftp.filename));
 8009cc2:	4861      	ldr	r0, [pc, #388]	; (8009e48 <ftpd_storcmd+0x214>)
 8009cc4:	f7f6 fab6 	bl	8000234 <strlen>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	461a      	mov	r2, r3
 8009ccc:	495e      	ldr	r1, [pc, #376]	; (8009e48 <ftpd_storcmd+0x214>)
 8009cce:	4862      	ldr	r0, [pc, #392]	; (8009e58 <ftpd_storcmd+0x224>)
 8009cd0:	f004 fcae 	bl	800e630 <iprintf>
#endif
#if defined(F_FILESYSTEM)
	ftp.fr = f_open(&(ftp.fil), (const char *)ftp.filename, FA_CREATE_ALWAYS | FA_WRITE);
 8009cd4:	220a      	movs	r2, #10
 8009cd6:	495c      	ldr	r1, [pc, #368]	; (8009e48 <ftpd_storcmd+0x214>)
 8009cd8:	4860      	ldr	r0, [pc, #384]	; (8009e5c <ftpd_storcmd+0x228>)
 8009cda:	f003 f9ad 	bl	800d038 <f_open>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	4b5c      	ldr	r3, [pc, #368]	; (8009e54 <ftpd_storcmd+0x220>)
 8009ce4:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
	//print_filedsc(&(ftp.fil));
	if(ftp.fr == FR_OK){
 8009ce8:	4b5a      	ldr	r3, [pc, #360]	; (8009e54 <ftpd_storcmd+0x220>)
 8009cea:	f893 338c 	ldrb.w	r3, [r3, #908]	; 0x38c
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	f040 8081 	bne.w	8009df6 <ftpd_storcmd+0x1c2>
#if defined(_FTP_DEBUG_)
		printf("f_open return FR_OK\r\n");
 8009cf4:	485a      	ldr	r0, [pc, #360]	; (8009e60 <ftpd_storcmd+0x22c>)
 8009cf6:	f004 fd37 	bl	800e768 <puts>
#endif
		while(1){
			if((remain_datasize = getSn_RX_RSR(ftp.data_sock)) > 0){
 8009cfa:	4b56      	ldr	r3, [pc, #344]	; (8009e54 <ftpd_storcmd+0x220>)
 8009cfc:	785b      	ldrb	r3, [r3, #1]
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7fd fc5b 	bl	80075ba <getSn_RX_RSR>
 8009d04:	4603      	mov	r3, r0
 8009d06:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
 8009d0a:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d056      	beq.n	8009dc0 <ftpd_storcmd+0x18c>
				while(1){
					memset(dbuf, 0, _MAX_SS);
 8009d12:	f107 0310 	add.w	r3, r7, #16
 8009d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d1a:	2100      	movs	r1, #0
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f004 fb9f 	bl	800e460 <memset>

					if(remain_datasize > _MAX_SS)
 8009d22:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009d26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d2a:	d904      	bls.n	8009d36 <ftpd_storcmd+0x102>
						recv_byte = _MAX_SS;
 8009d2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d30:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009d34:	e003      	b.n	8009d3e <ftpd_storcmd+0x10a>
					else
						recv_byte = remain_datasize;
 8009d36:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009d3a:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc

					ret = recv(ftp.data_sock, dbuf, recv_byte);
 8009d3e:	4b45      	ldr	r3, [pc, #276]	; (8009e54 <ftpd_storcmd+0x220>)
 8009d40:	785b      	ldrb	r3, [r3, #1]
 8009d42:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009d46:	f107 0110 	add.w	r1, r7, #16
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7fe f962 	bl	8008014 <recv>
 8009d50:	4603      	mov	r3, r0
 8009d52:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
#if defined(_FTP_DEBUG_)
					//printf("----->fn:%s data:%s \r\n", ftp.filename, dbuf);
#endif

					ftp.fr = f_write(&(ftp.fil), dbuf, (UINT)ret, &blocklen);
 8009d56:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 8009d5a:	f107 0308 	add.w	r3, r7, #8
 8009d5e:	f107 0110 	add.w	r1, r7, #16
 8009d62:	483e      	ldr	r0, [pc, #248]	; (8009e5c <ftpd_storcmd+0x228>)
 8009d64:	f003 fc75 	bl	800d652 <f_write>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	4b39      	ldr	r3, [pc, #228]	; (8009e54 <ftpd_storcmd+0x220>)
 8009d6e:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
#if defined(_FTP_DEBUG_)
					//printf("----->dsize:%d recv:%d len:%d \r\n", remain_datasize, ret, blocklen);
#endif
					remain_datasize -= blocklen;
 8009d72:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009d76:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	f8b7 22de 	ldrh.w	r2, [r7, #734]	; 0x2de
 8009d82:	1ad3      	subs	r3, r2, r3
 8009d84:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de

					if(ftp.fr != FR_OK){
 8009d88:	4b32      	ldr	r3, [pc, #200]	; (8009e54 <ftpd_storcmd+0x220>)
 8009d8a:	f893 338c 	ldrb.w	r3, [r3, #908]	; 0x38c
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d003      	beq.n	8009d9a <ftpd_storcmd+0x166>
#if defined(_FTP_DEBUG_)
						printf("f_write failed\r\n");
 8009d92:	4834      	ldr	r0, [pc, #208]	; (8009e64 <ftpd_storcmd+0x230>)
 8009d94:	f004 fce8 	bl	800e768 <puts>
#endif
						break;
 8009d98:	e005      	b.n	8009da6 <ftpd_storcmd+0x172>
					}

					if(remain_datasize <= 0)
 8009d9a:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d000      	beq.n	8009da4 <ftpd_storcmd+0x170>
					memset(dbuf, 0, _MAX_SS);
 8009da2:	e7b6      	b.n	8009d12 <ftpd_storcmd+0xde>
						break;
 8009da4:	bf00      	nop
				}

				if(ftp.fr != FR_OK){
 8009da6:	4b2b      	ldr	r3, [pc, #172]	; (8009e54 <ftpd_storcmd+0x220>)
 8009da8:	f893 338c 	ldrb.w	r3, [r3, #908]	; 0x38c
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d003      	beq.n	8009db8 <ftpd_storcmd+0x184>
#if defined(_FTP_DEBUG_)
					printf("f_write failed\r\n");
 8009db0:	482c      	ldr	r0, [pc, #176]	; (8009e64 <ftpd_storcmd+0x230>)
 8009db2:	f004 fcd9 	bl	800e768 <puts>
#endif
					break;
 8009db6:	e012      	b.n	8009dde <ftpd_storcmd+0x1aa>
				}

#if defined(_FTP_DEBUG_)
				printf("#");
 8009db8:	2023      	movs	r0, #35	; 0x23
 8009dba:	f004 fc51 	bl	800e660 <putchar>
 8009dbe:	e79c      	b.n	8009cfa <ftpd_storcmd+0xc6>
#endif
			}else{
				if(getSn_SR(ftp.data_sock) != SOCK_ESTABLISHED)
 8009dc0:	4b24      	ldr	r3, [pc, #144]	; (8009e54 <ftpd_storcmd+0x220>)
 8009dc2:	785b      	ldrb	r3, [r3, #1]
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	00db      	lsls	r3, r3, #3
 8009dca:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7fd fa4e 	bl	8007270 <WIZCHIP_READ>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	2b17      	cmp	r3, #23
 8009dd8:	d100      	bne.n	8009ddc <ftpd_storcmd+0x1a8>
			if((remain_datasize = getSn_RX_RSR(ftp.data_sock)) > 0){
 8009dda:	e78e      	b.n	8009cfa <ftpd_storcmd+0xc6>
					break;
 8009ddc:	bf00      	nop
			}
		}
#if defined(_FTP_DEBUG_)
		printf("\r\nFile write finished\r\n");
 8009dde:	4822      	ldr	r0, [pc, #136]	; (8009e68 <ftpd_storcmd+0x234>)
 8009de0:	f004 fcc2 	bl	800e768 <puts>
#endif
		ftp.fr = f_close(&(ftp.fil));
 8009de4:	481d      	ldr	r0, [pc, #116]	; (8009e5c <ftpd_storcmd+0x228>)
 8009de6:	f003 fe27 	bl	800da38 <f_close>
 8009dea:	4603      	mov	r3, r0
 8009dec:	461a      	mov	r2, r3
 8009dee:	4b19      	ldr	r3, [pc, #100]	; (8009e54 <ftpd_storcmd+0x220>)
 8009df0:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
 8009df4:	e006      	b.n	8009e04 <ftpd_storcmd+0x1d0>
		}else{
#if defined(_FTP_DEBUG_)
			printf("File Open Error: %d\r\n", ftp.fr);
 8009df6:	4b17      	ldr	r3, [pc, #92]	; (8009e54 <ftpd_storcmd+0x220>)
 8009df8:	f893 338c 	ldrb.w	r3, [r3, #908]	; 0x38c
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	481b      	ldr	r0, [pc, #108]	; (8009e6c <ftpd_storcmd+0x238>)
 8009e00:	f004 fc16 	bl	800e630 <iprintf>
           if(tmp != SOCK_ESTABLISHED)
               break;
       }
    }
#endif
    disconnect(ftp.data_sock);
 8009e04:	4b13      	ldr	r3, [pc, #76]	; (8009e54 <ftpd_storcmd+0x220>)
 8009e06:	785b      	ldrb	r3, [r3, #1]
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7fd ff93 	bl	8007d34 <disconnect>

    slen = sprintf(sendbuf, "226 Successfully transferred \"%s\"\r\n", ftp.filename);
 8009e0e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009e12:	4a0d      	ldr	r2, [pc, #52]	; (8009e48 <ftpd_storcmd+0x214>)
 8009e14:	4916      	ldr	r1, [pc, #88]	; (8009e70 <ftpd_storcmd+0x23c>)
 8009e16:	4618      	mov	r0, r3
 8009e18:	f004 fcbe 	bl	800e798 <siprintf>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	f8a7 32da 	strh.w	r3, [r7, #730]	; 0x2da
    send(ftp.ctrl_sock, (uint8_t*)sendbuf, slen);
 8009e22:	4b0c      	ldr	r3, [pc, #48]	; (8009e54 <ftpd_storcmd+0x220>)
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	f8b7 22da 	ldrh.w	r2, [r7, #730]	; 0x2da
 8009e2a:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f7fd fff6 	bl	8007e20 <send>
    return 0;
 8009e34:	2300      	movs	r3, #0
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	f507 7738 	add.w	r7, r7, #736	; 0x2e0
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	20000a8e 	.word	0x20000a8e
 8009e44:	0800fdbc 	.word	0x0800fdbc
 8009e48:	20000af2 	.word	0x20000af2
 8009e4c:	0801039c 	.word	0x0801039c
 8009e50:	08010450 	.word	0x08010450
 8009e54:	20000a00 	.word	0x20000a00
 8009e58:	08010490 	.word	0x08010490
 8009e5c:	20000b5c 	.word	0x20000b5c
 8009e60:	08010408 	.word	0x08010408
 8009e64:	080104ac 	.word	0x080104ac
 8009e68:	080104bc 	.word	0x080104bc
 8009e6c:	08010438 	.word	0x08010438
 8009e70:	08010378 	.word	0x08010378

08009e74 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8009e78:	4907      	ldr	r1, [pc, #28]	; (8009e98 <MX_FATFS_Init+0x24>)
 8009e7a:	4808      	ldr	r0, [pc, #32]	; (8009e9c <MX_FATFS_Init+0x28>)
 8009e7c:	f004 f9b6 	bl	800e1ec <FATFS_LinkDriver>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d002      	beq.n	8009e8c <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 8009e86:	f04f 33ff 	mov.w	r3, #4294967295
 8009e8a:	e003      	b.n	8009e94 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8009e8c:	4b04      	ldr	r3, [pc, #16]	; (8009ea0 <MX_FATFS_Init+0x2c>)
 8009e8e:	2201      	movs	r2, #1
 8009e90:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 8009e92:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	20000ea8 	.word	0x20000ea8
 8009e9c:	200000b8 	.word	0x200000b8
 8009ea0:	20000eac 	.word	0x20000eac

08009ea4 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009ea8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8009eb8:	2200      	movs	r2, #0
 8009eba:	2110      	movs	r1, #16
 8009ebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009ec0:	f7f9 fb50 	bl	8003564 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8009ec4:	2001      	movs	r0, #1
 8009ec6:	f7f7 fe05 	bl	8001ad4 <HAL_Delay>
}
 8009eca:	bf00      	nop
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	2110      	movs	r1, #16
 8009ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009eda:	f7f9 fb43 	bl	8003564 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8009ede:	2001      	movs	r0, #1
 8009ee0:	f7f7 fdf8 	bl	8001ad4 <HAL_Delay>
}
 8009ee4:	bf00      	nop
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	4603      	mov	r3, r0
 8009ef0:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8009ef2:	bf00      	nop
 8009ef4:	4b08      	ldr	r3, [pc, #32]	; (8009f18 <SPI_TxByte+0x30>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	689b      	ldr	r3, [r3, #8]
 8009efa:	f003 0302 	and.w	r3, r3, #2
 8009efe:	2b02      	cmp	r3, #2
 8009f00:	d1f8      	bne.n	8009ef4 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8009f02:	1df9      	adds	r1, r7, #7
 8009f04:	2364      	movs	r3, #100	; 0x64
 8009f06:	2201      	movs	r2, #1
 8009f08:	4803      	ldr	r0, [pc, #12]	; (8009f18 <SPI_TxByte+0x30>)
 8009f0a:	f7fa fefc 	bl	8004d06 <HAL_SPI_Transmit>
}
 8009f0e:	bf00      	nop
 8009f10:	3708      	adds	r7, #8
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop
 8009f18:	2000033c 	.word	0x2000033c

08009f1c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b082      	sub	sp, #8
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	460b      	mov	r3, r1
 8009f26:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8009f28:	bf00      	nop
 8009f2a:	4b08      	ldr	r3, [pc, #32]	; (8009f4c <SPI_TxBuffer+0x30>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	f003 0302 	and.w	r3, r3, #2
 8009f34:	2b02      	cmp	r3, #2
 8009f36:	d1f8      	bne.n	8009f2a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8009f38:	887a      	ldrh	r2, [r7, #2]
 8009f3a:	2364      	movs	r3, #100	; 0x64
 8009f3c:	6879      	ldr	r1, [r7, #4]
 8009f3e:	4803      	ldr	r0, [pc, #12]	; (8009f4c <SPI_TxBuffer+0x30>)
 8009f40:	f7fa fee1 	bl	8004d06 <HAL_SPI_Transmit>
}
 8009f44:	bf00      	nop
 8009f46:	3708      	adds	r7, #8
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}
 8009f4c:	2000033c 	.word	0x2000033c

08009f50 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b084      	sub	sp, #16
 8009f54:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8009f56:	23ff      	movs	r3, #255	; 0xff
 8009f58:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8009f5a:	bf00      	nop
 8009f5c:	4b09      	ldr	r3, [pc, #36]	; (8009f84 <SPI_RxByte+0x34>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	f003 0302 	and.w	r3, r3, #2
 8009f66:	2b02      	cmp	r3, #2
 8009f68:	d1f8      	bne.n	8009f5c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8009f6a:	1dba      	adds	r2, r7, #6
 8009f6c:	1df9      	adds	r1, r7, #7
 8009f6e:	2364      	movs	r3, #100	; 0x64
 8009f70:	9300      	str	r3, [sp, #0]
 8009f72:	2301      	movs	r3, #1
 8009f74:	4803      	ldr	r0, [pc, #12]	; (8009f84 <SPI_RxByte+0x34>)
 8009f76:	f7fb f964 	bl	8005242 <HAL_SPI_TransmitReceive>

	return data;
 8009f7a:	79bb      	ldrb	r3, [r7, #6]
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3708      	adds	r7, #8
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}
 8009f84:	2000033c 	.word	0x2000033c

08009f88 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8009f90:	f7ff ffde 	bl	8009f50 <SPI_RxByte>
 8009f94:	4603      	mov	r3, r0
 8009f96:	461a      	mov	r2, r3
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	701a      	strb	r2, [r3, #0]
}
 8009f9c:	bf00      	nop
 8009f9e:	3708      	adds	r7, #8
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8009faa:	4b0a      	ldr	r3, [pc, #40]	; (8009fd4 <SD_ReadyWait+0x30>)
 8009fac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009fb0:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8009fb2:	f7ff ffcd 	bl	8009f50 <SPI_RxByte>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8009fba:	79fb      	ldrb	r3, [r7, #7]
 8009fbc:	2bff      	cmp	r3, #255	; 0xff
 8009fbe:	d003      	beq.n	8009fc8 <SD_ReadyWait+0x24>
 8009fc0:	4b04      	ldr	r3, [pc, #16]	; (8009fd4 <SD_ReadyWait+0x30>)
 8009fc2:	881b      	ldrh	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d1f4      	bne.n	8009fb2 <SD_ReadyWait+0xe>

	return res;
 8009fc8:	79fb      	ldrb	r3, [r7, #7]
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3708      	adds	r7, #8
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	20000eb0 	.word	0x20000eb0

08009fd8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8009fde:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8009fe2:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8009fe4:	f7ff ff73 	bl	8009ece <DESELECT>
	for(int i = 0; i < 10; i++)
 8009fe8:	2300      	movs	r3, #0
 8009fea:	60bb      	str	r3, [r7, #8]
 8009fec:	e005      	b.n	8009ffa <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8009fee:	20ff      	movs	r0, #255	; 0xff
 8009ff0:	f7ff ff7a 	bl	8009ee8 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	60bb      	str	r3, [r7, #8]
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	2b09      	cmp	r3, #9
 8009ffe:	ddf6      	ble.n	8009fee <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800a000:	f7ff ff58 	bl	8009eb4 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800a004:	2340      	movs	r3, #64	; 0x40
 800a006:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800a008:	2300      	movs	r3, #0
 800a00a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800a00c:	2300      	movs	r3, #0
 800a00e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800a010:	2300      	movs	r3, #0
 800a012:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800a014:	2300      	movs	r3, #0
 800a016:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800a018:	2395      	movs	r3, #149	; 0x95
 800a01a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800a01c:	463b      	mov	r3, r7
 800a01e:	2106      	movs	r1, #6
 800a020:	4618      	mov	r0, r3
 800a022:	f7ff ff7b 	bl	8009f1c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800a026:	e002      	b.n	800a02e <SD_PowerOn+0x56>
	{
		cnt--;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	3b01      	subs	r3, #1
 800a02c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800a02e:	f7ff ff8f 	bl	8009f50 <SPI_RxByte>
 800a032:	4603      	mov	r3, r0
 800a034:	2b01      	cmp	r3, #1
 800a036:	d002      	beq.n	800a03e <SD_PowerOn+0x66>
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d1f4      	bne.n	800a028 <SD_PowerOn+0x50>
	}

	DESELECT();
 800a03e:	f7ff ff46 	bl	8009ece <DESELECT>
	SPI_TxByte(0XFF);
 800a042:	20ff      	movs	r0, #255	; 0xff
 800a044:	f7ff ff50 	bl	8009ee8 <SPI_TxByte>

	PowerFlag = 1;
 800a048:	4b03      	ldr	r3, [pc, #12]	; (800a058 <SD_PowerOn+0x80>)
 800a04a:	2201      	movs	r2, #1
 800a04c:	701a      	strb	r2, [r3, #0]
}
 800a04e:	bf00      	nop
 800a050:	3710      	adds	r7, #16
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	20000eb3 	.word	0x20000eb3

0800a05c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 800a05c:	b480      	push	{r7}
 800a05e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800a060:	4b03      	ldr	r3, [pc, #12]	; (800a070 <SD_PowerOff+0x14>)
 800a062:	2200      	movs	r2, #0
 800a064:	701a      	strb	r2, [r3, #0]
}
 800a066:	bf00      	nop
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr
 800a070:	20000eb3 	.word	0x20000eb3

0800a074 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800a074:	b480      	push	{r7}
 800a076:	af00      	add	r7, sp, #0
	return PowerFlag;
 800a078:	4b03      	ldr	r3, [pc, #12]	; (800a088 <SD_CheckPower+0x14>)
 800a07a:	781b      	ldrb	r3, [r3, #0]
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	46bd      	mov	sp, r7
 800a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a084:	4770      	bx	lr
 800a086:	bf00      	nop
 800a088:	20000eb3 	.word	0x20000eb3

0800a08c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800a096:	4b13      	ldr	r3, [pc, #76]	; (800a0e4 <SD_RxDataBlock+0x58>)
 800a098:	22c8      	movs	r2, #200	; 0xc8
 800a09a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800a09c:	f7ff ff58 	bl	8009f50 <SPI_RxByte>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800a0a4:	7bfb      	ldrb	r3, [r7, #15]
 800a0a6:	2bff      	cmp	r3, #255	; 0xff
 800a0a8:	d103      	bne.n	800a0b2 <SD_RxDataBlock+0x26>
 800a0aa:	4b0e      	ldr	r3, [pc, #56]	; (800a0e4 <SD_RxDataBlock+0x58>)
 800a0ac:	881b      	ldrh	r3, [r3, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d1f4      	bne.n	800a09c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800a0b2:	7bfb      	ldrb	r3, [r7, #15]
 800a0b4:	2bfe      	cmp	r3, #254	; 0xfe
 800a0b6:	d001      	beq.n	800a0bc <SD_RxDataBlock+0x30>
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	e00f      	b.n	800a0dc <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	1c5a      	adds	r2, r3, #1
 800a0c0:	607a      	str	r2, [r7, #4]
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7ff ff60 	bl	8009f88 <SPI_RxBytePtr>
	} while(len--);
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	1e5a      	subs	r2, r3, #1
 800a0cc:	603a      	str	r2, [r7, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d1f4      	bne.n	800a0bc <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800a0d2:	f7ff ff3d 	bl	8009f50 <SPI_RxByte>
	SPI_RxByte();
 800a0d6:	f7ff ff3b 	bl	8009f50 <SPI_RxByte>

	return TRUE;
 800a0da:	2301      	movs	r3, #1
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3710      	adds	r7, #16
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	20000eae 	.word	0x20000eae

0800a0e8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800a0f8:	f7ff ff54 	bl	8009fa4 <SD_ReadyWait>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	2bff      	cmp	r3, #255	; 0xff
 800a100:	d001      	beq.n	800a106 <SD_TxDataBlock+0x1e>
 800a102:	2300      	movs	r3, #0
 800a104:	e02f      	b.n	800a166 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800a106:	78fb      	ldrb	r3, [r7, #3]
 800a108:	4618      	mov	r0, r3
 800a10a:	f7ff feed 	bl	8009ee8 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800a10e:	78fb      	ldrb	r3, [r7, #3]
 800a110:	2bfd      	cmp	r3, #253	; 0xfd
 800a112:	d020      	beq.n	800a156 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800a114:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f7ff feff 	bl	8009f1c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800a11e:	f7ff ff17 	bl	8009f50 <SPI_RxByte>
		SPI_RxByte();
 800a122:	f7ff ff15 	bl	8009f50 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800a126:	e00b      	b.n	800a140 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800a128:	f7ff ff12 	bl	8009f50 <SPI_RxByte>
 800a12c:	4603      	mov	r3, r0
 800a12e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800a130:	7bfb      	ldrb	r3, [r7, #15]
 800a132:	f003 031f 	and.w	r3, r3, #31
 800a136:	2b05      	cmp	r3, #5
 800a138:	d006      	beq.n	800a148 <SD_TxDataBlock+0x60>
			i++;
 800a13a:	7bbb      	ldrb	r3, [r7, #14]
 800a13c:	3301      	adds	r3, #1
 800a13e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800a140:	7bbb      	ldrb	r3, [r7, #14]
 800a142:	2b40      	cmp	r3, #64	; 0x40
 800a144:	d9f0      	bls.n	800a128 <SD_TxDataBlock+0x40>
 800a146:	e000      	b.n	800a14a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800a148:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800a14a:	bf00      	nop
 800a14c:	f7ff ff00 	bl	8009f50 <SPI_RxByte>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d0fa      	beq.n	800a14c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800a156:	7bfb      	ldrb	r3, [r7, #15]
 800a158:	f003 031f 	and.w	r3, r3, #31
 800a15c:	2b05      	cmp	r3, #5
 800a15e:	d101      	bne.n	800a164 <SD_TxDataBlock+0x7c>
 800a160:	2301      	movs	r3, #1
 800a162:	e000      	b.n	800a166 <SD_TxDataBlock+0x7e>

	return FALSE;
 800a164:	2300      	movs	r3, #0
}
 800a166:	4618      	mov	r0, r3
 800a168:	3710      	adds	r7, #16
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}

0800a16e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800a16e:	b580      	push	{r7, lr}
 800a170:	b084      	sub	sp, #16
 800a172:	af00      	add	r7, sp, #0
 800a174:	4603      	mov	r3, r0
 800a176:	6039      	str	r1, [r7, #0]
 800a178:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800a17a:	f7ff ff13 	bl	8009fa4 <SD_ReadyWait>
 800a17e:	4603      	mov	r3, r0
 800a180:	2bff      	cmp	r3, #255	; 0xff
 800a182:	d001      	beq.n	800a188 <SD_SendCmd+0x1a>
 800a184:	23ff      	movs	r3, #255	; 0xff
 800a186:	e042      	b.n	800a20e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800a188:	79fb      	ldrb	r3, [r7, #7]
 800a18a:	4618      	mov	r0, r3
 800a18c:	f7ff feac 	bl	8009ee8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	0e1b      	lsrs	r3, r3, #24
 800a194:	b2db      	uxtb	r3, r3
 800a196:	4618      	mov	r0, r3
 800a198:	f7ff fea6 	bl	8009ee8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	0c1b      	lsrs	r3, r3, #16
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7ff fea0 	bl	8009ee8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	0a1b      	lsrs	r3, r3, #8
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7ff fe9a 	bl	8009ee8 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f7ff fe95 	bl	8009ee8 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800a1be:	79fb      	ldrb	r3, [r7, #7]
 800a1c0:	2b40      	cmp	r3, #64	; 0x40
 800a1c2:	d102      	bne.n	800a1ca <SD_SendCmd+0x5c>
 800a1c4:	2395      	movs	r3, #149	; 0x95
 800a1c6:	73fb      	strb	r3, [r7, #15]
 800a1c8:	e007      	b.n	800a1da <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800a1ca:	79fb      	ldrb	r3, [r7, #7]
 800a1cc:	2b48      	cmp	r3, #72	; 0x48
 800a1ce:	d102      	bne.n	800a1d6 <SD_SendCmd+0x68>
 800a1d0:	2387      	movs	r3, #135	; 0x87
 800a1d2:	73fb      	strb	r3, [r7, #15]
 800a1d4:	e001      	b.n	800a1da <SD_SendCmd+0x6c>
	else crc = 1;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800a1da:	7bfb      	ldrb	r3, [r7, #15]
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7ff fe83 	bl	8009ee8 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800a1e2:	79fb      	ldrb	r3, [r7, #7]
 800a1e4:	2b4c      	cmp	r3, #76	; 0x4c
 800a1e6:	d101      	bne.n	800a1ec <SD_SendCmd+0x7e>
 800a1e8:	f7ff feb2 	bl	8009f50 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800a1ec:	230a      	movs	r3, #10
 800a1ee:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800a1f0:	f7ff feae 	bl	8009f50 <SPI_RxByte>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800a1f8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	da05      	bge.n	800a20c <SD_SendCmd+0x9e>
 800a200:	7bbb      	ldrb	r3, [r7, #14]
 800a202:	3b01      	subs	r3, #1
 800a204:	73bb      	strb	r3, [r7, #14]
 800a206:	7bbb      	ldrb	r3, [r7, #14]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d1f1      	bne.n	800a1f0 <SD_SendCmd+0x82>

	return res;
 800a20c:	7b7b      	ldrb	r3, [r7, #13]
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3710      	adds	r7, #16
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
	...

0800a218 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800a218:	b590      	push	{r4, r7, lr}
 800a21a:	b085      	sub	sp, #20
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	4603      	mov	r3, r0
 800a220:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800a222:	79fb      	ldrb	r3, [r7, #7]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d001      	beq.n	800a22c <SD_disk_initialize+0x14>
 800a228:	2301      	movs	r3, #1
 800a22a:	e0d1      	b.n	800a3d0 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800a22c:	4b6a      	ldr	r3, [pc, #424]	; (800a3d8 <SD_disk_initialize+0x1c0>)
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	b2db      	uxtb	r3, r3
 800a232:	f003 0302 	and.w	r3, r3, #2
 800a236:	2b00      	cmp	r3, #0
 800a238:	d003      	beq.n	800a242 <SD_disk_initialize+0x2a>
 800a23a:	4b67      	ldr	r3, [pc, #412]	; (800a3d8 <SD_disk_initialize+0x1c0>)
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	e0c6      	b.n	800a3d0 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800a242:	f7ff fec9 	bl	8009fd8 <SD_PowerOn>

	/* slave select */
	SELECT();
 800a246:	f7ff fe35 	bl	8009eb4 <SELECT>

	/* check disk type */
	type = 0;
 800a24a:	2300      	movs	r3, #0
 800a24c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800a24e:	2100      	movs	r1, #0
 800a250:	2040      	movs	r0, #64	; 0x40
 800a252:	f7ff ff8c 	bl	800a16e <SD_SendCmd>
 800a256:	4603      	mov	r3, r0
 800a258:	2b01      	cmp	r3, #1
 800a25a:	f040 80a1 	bne.w	800a3a0 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800a25e:	4b5f      	ldr	r3, [pc, #380]	; (800a3dc <SD_disk_initialize+0x1c4>)
 800a260:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a264:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800a266:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a26a:	2048      	movs	r0, #72	; 0x48
 800a26c:	f7ff ff7f 	bl	800a16e <SD_SendCmd>
 800a270:	4603      	mov	r3, r0
 800a272:	2b01      	cmp	r3, #1
 800a274:	d155      	bne.n	800a322 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800a276:	2300      	movs	r3, #0
 800a278:	73fb      	strb	r3, [r7, #15]
 800a27a:	e00c      	b.n	800a296 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800a27c:	7bfc      	ldrb	r4, [r7, #15]
 800a27e:	f7ff fe67 	bl	8009f50 <SPI_RxByte>
 800a282:	4603      	mov	r3, r0
 800a284:	461a      	mov	r2, r3
 800a286:	f104 0310 	add.w	r3, r4, #16
 800a28a:	443b      	add	r3, r7
 800a28c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800a290:	7bfb      	ldrb	r3, [r7, #15]
 800a292:	3301      	adds	r3, #1
 800a294:	73fb      	strb	r3, [r7, #15]
 800a296:	7bfb      	ldrb	r3, [r7, #15]
 800a298:	2b03      	cmp	r3, #3
 800a29a:	d9ef      	bls.n	800a27c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800a29c:	7abb      	ldrb	r3, [r7, #10]
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d17e      	bne.n	800a3a0 <SD_disk_initialize+0x188>
 800a2a2:	7afb      	ldrb	r3, [r7, #11]
 800a2a4:	2baa      	cmp	r3, #170	; 0xaa
 800a2a6:	d17b      	bne.n	800a3a0 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800a2a8:	2100      	movs	r1, #0
 800a2aa:	2077      	movs	r0, #119	; 0x77
 800a2ac:	f7ff ff5f 	bl	800a16e <SD_SendCmd>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d807      	bhi.n	800a2c6 <SD_disk_initialize+0xae>
 800a2b6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a2ba:	2069      	movs	r0, #105	; 0x69
 800a2bc:	f7ff ff57 	bl	800a16e <SD_SendCmd>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d004      	beq.n	800a2d0 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800a2c6:	4b45      	ldr	r3, [pc, #276]	; (800a3dc <SD_disk_initialize+0x1c4>)
 800a2c8:	881b      	ldrh	r3, [r3, #0]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d1ec      	bne.n	800a2a8 <SD_disk_initialize+0x90>
 800a2ce:	e000      	b.n	800a2d2 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800a2d0:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800a2d2:	4b42      	ldr	r3, [pc, #264]	; (800a3dc <SD_disk_initialize+0x1c4>)
 800a2d4:	881b      	ldrh	r3, [r3, #0]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d062      	beq.n	800a3a0 <SD_disk_initialize+0x188>
 800a2da:	2100      	movs	r1, #0
 800a2dc:	207a      	movs	r0, #122	; 0x7a
 800a2de:	f7ff ff46 	bl	800a16e <SD_SendCmd>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d15b      	bne.n	800a3a0 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	73fb      	strb	r3, [r7, #15]
 800a2ec:	e00c      	b.n	800a308 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800a2ee:	7bfc      	ldrb	r4, [r7, #15]
 800a2f0:	f7ff fe2e 	bl	8009f50 <SPI_RxByte>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	f104 0310 	add.w	r3, r4, #16
 800a2fc:	443b      	add	r3, r7
 800a2fe:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800a302:	7bfb      	ldrb	r3, [r7, #15]
 800a304:	3301      	adds	r3, #1
 800a306:	73fb      	strb	r3, [r7, #15]
 800a308:	7bfb      	ldrb	r3, [r7, #15]
 800a30a:	2b03      	cmp	r3, #3
 800a30c:	d9ef      	bls.n	800a2ee <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800a30e:	7a3b      	ldrb	r3, [r7, #8]
 800a310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a314:	2b00      	cmp	r3, #0
 800a316:	d001      	beq.n	800a31c <SD_disk_initialize+0x104>
 800a318:	230c      	movs	r3, #12
 800a31a:	e000      	b.n	800a31e <SD_disk_initialize+0x106>
 800a31c:	2304      	movs	r3, #4
 800a31e:	73bb      	strb	r3, [r7, #14]
 800a320:	e03e      	b.n	800a3a0 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800a322:	2100      	movs	r1, #0
 800a324:	2077      	movs	r0, #119	; 0x77
 800a326:	f7ff ff22 	bl	800a16e <SD_SendCmd>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d808      	bhi.n	800a342 <SD_disk_initialize+0x12a>
 800a330:	2100      	movs	r1, #0
 800a332:	2069      	movs	r0, #105	; 0x69
 800a334:	f7ff ff1b 	bl	800a16e <SD_SendCmd>
 800a338:	4603      	mov	r3, r0
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d801      	bhi.n	800a342 <SD_disk_initialize+0x12a>
 800a33e:	2302      	movs	r3, #2
 800a340:	e000      	b.n	800a344 <SD_disk_initialize+0x12c>
 800a342:	2301      	movs	r3, #1
 800a344:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800a346:	7bbb      	ldrb	r3, [r7, #14]
 800a348:	2b02      	cmp	r3, #2
 800a34a:	d10e      	bne.n	800a36a <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800a34c:	2100      	movs	r1, #0
 800a34e:	2077      	movs	r0, #119	; 0x77
 800a350:	f7ff ff0d 	bl	800a16e <SD_SendCmd>
 800a354:	4603      	mov	r3, r0
 800a356:	2b01      	cmp	r3, #1
 800a358:	d80e      	bhi.n	800a378 <SD_disk_initialize+0x160>
 800a35a:	2100      	movs	r1, #0
 800a35c:	2069      	movs	r0, #105	; 0x69
 800a35e:	f7ff ff06 	bl	800a16e <SD_SendCmd>
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d107      	bne.n	800a378 <SD_disk_initialize+0x160>
 800a368:	e00c      	b.n	800a384 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800a36a:	2100      	movs	r1, #0
 800a36c:	2041      	movs	r0, #65	; 0x41
 800a36e:	f7ff fefe 	bl	800a16e <SD_SendCmd>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d004      	beq.n	800a382 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 800a378:	4b18      	ldr	r3, [pc, #96]	; (800a3dc <SD_disk_initialize+0x1c4>)
 800a37a:	881b      	ldrh	r3, [r3, #0]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d1e2      	bne.n	800a346 <SD_disk_initialize+0x12e>
 800a380:	e000      	b.n	800a384 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800a382:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800a384:	4b15      	ldr	r3, [pc, #84]	; (800a3dc <SD_disk_initialize+0x1c4>)
 800a386:	881b      	ldrh	r3, [r3, #0]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d007      	beq.n	800a39c <SD_disk_initialize+0x184>
 800a38c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a390:	2050      	movs	r0, #80	; 0x50
 800a392:	f7ff feec 	bl	800a16e <SD_SendCmd>
 800a396:	4603      	mov	r3, r0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d001      	beq.n	800a3a0 <SD_disk_initialize+0x188>
 800a39c:	2300      	movs	r3, #0
 800a39e:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800a3a0:	4a0f      	ldr	r2, [pc, #60]	; (800a3e0 <SD_disk_initialize+0x1c8>)
 800a3a2:	7bbb      	ldrb	r3, [r7, #14]
 800a3a4:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800a3a6:	f7ff fd92 	bl	8009ece <DESELECT>
	SPI_RxByte();
 800a3aa:	f7ff fdd1 	bl	8009f50 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800a3ae:	7bbb      	ldrb	r3, [r7, #14]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d008      	beq.n	800a3c6 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 800a3b4:	4b08      	ldr	r3, [pc, #32]	; (800a3d8 <SD_disk_initialize+0x1c0>)
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	b2db      	uxtb	r3, r3
 800a3ba:	f023 0301 	bic.w	r3, r3, #1
 800a3be:	b2da      	uxtb	r2, r3
 800a3c0:	4b05      	ldr	r3, [pc, #20]	; (800a3d8 <SD_disk_initialize+0x1c0>)
 800a3c2:	701a      	strb	r2, [r3, #0]
 800a3c4:	e001      	b.n	800a3ca <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800a3c6:	f7ff fe49 	bl	800a05c <SD_PowerOff>
	}

	return Stat;
 800a3ca:	4b03      	ldr	r3, [pc, #12]	; (800a3d8 <SD_disk_initialize+0x1c0>)
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	b2db      	uxtb	r3, r3
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3714      	adds	r7, #20
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd90      	pop	{r4, r7, pc}
 800a3d8:	200000b4 	.word	0x200000b4
 800a3dc:	20000eae 	.word	0x20000eae
 800a3e0:	20000eb2 	.word	0x20000eb2

0800a3e4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800a3ee:	79fb      	ldrb	r3, [r7, #7]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d001      	beq.n	800a3f8 <SD_disk_status+0x14>
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	e002      	b.n	800a3fe <SD_disk_status+0x1a>
	return Stat;
 800a3f8:	4b04      	ldr	r3, [pc, #16]	; (800a40c <SD_disk_status+0x28>)
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	b2db      	uxtb	r3, r3
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	370c      	adds	r7, #12
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr
 800a40a:	bf00      	nop
 800a40c:	200000b4 	.word	0x200000b4

0800a410 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	60b9      	str	r1, [r7, #8]
 800a418:	607a      	str	r2, [r7, #4]
 800a41a:	603b      	str	r3, [r7, #0]
 800a41c:	4603      	mov	r3, r0
 800a41e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800a420:	7bfb      	ldrb	r3, [r7, #15]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d102      	bne.n	800a42c <SD_disk_read+0x1c>
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d101      	bne.n	800a430 <SD_disk_read+0x20>
 800a42c:	2304      	movs	r3, #4
 800a42e:	e051      	b.n	800a4d4 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a430:	4b2a      	ldr	r3, [pc, #168]	; (800a4dc <SD_disk_read+0xcc>)
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	b2db      	uxtb	r3, r3
 800a436:	f003 0301 	and.w	r3, r3, #1
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d001      	beq.n	800a442 <SD_disk_read+0x32>
 800a43e:	2303      	movs	r3, #3
 800a440:	e048      	b.n	800a4d4 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800a442:	4b27      	ldr	r3, [pc, #156]	; (800a4e0 <SD_disk_read+0xd0>)
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	f003 0304 	and.w	r3, r3, #4
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d102      	bne.n	800a454 <SD_disk_read+0x44>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	025b      	lsls	r3, r3, #9
 800a452:	607b      	str	r3, [r7, #4]

	SELECT();
 800a454:	f7ff fd2e 	bl	8009eb4 <SELECT>

	if (count == 1)
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d111      	bne.n	800a482 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800a45e:	6879      	ldr	r1, [r7, #4]
 800a460:	2051      	movs	r0, #81	; 0x51
 800a462:	f7ff fe84 	bl	800a16e <SD_SendCmd>
 800a466:	4603      	mov	r3, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d129      	bne.n	800a4c0 <SD_disk_read+0xb0>
 800a46c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a470:	68b8      	ldr	r0, [r7, #8]
 800a472:	f7ff fe0b 	bl	800a08c <SD_RxDataBlock>
 800a476:	4603      	mov	r3, r0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d021      	beq.n	800a4c0 <SD_disk_read+0xb0>
 800a47c:	2300      	movs	r3, #0
 800a47e:	603b      	str	r3, [r7, #0]
 800a480:	e01e      	b.n	800a4c0 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800a482:	6879      	ldr	r1, [r7, #4]
 800a484:	2052      	movs	r0, #82	; 0x52
 800a486:	f7ff fe72 	bl	800a16e <SD_SendCmd>
 800a48a:	4603      	mov	r3, r0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d117      	bne.n	800a4c0 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800a490:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a494:	68b8      	ldr	r0, [r7, #8]
 800a496:	f7ff fdf9 	bl	800a08c <SD_RxDataBlock>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00a      	beq.n	800a4b6 <SD_disk_read+0xa6>
				buff += 512;
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a4a6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	3b01      	subs	r3, #1
 800a4ac:	603b      	str	r3, [r7, #0]
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d1ed      	bne.n	800a490 <SD_disk_read+0x80>
 800a4b4:	e000      	b.n	800a4b8 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800a4b6:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800a4b8:	2100      	movs	r1, #0
 800a4ba:	204c      	movs	r0, #76	; 0x4c
 800a4bc:	f7ff fe57 	bl	800a16e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800a4c0:	f7ff fd05 	bl	8009ece <DESELECT>
	SPI_RxByte();
 800a4c4:	f7ff fd44 	bl	8009f50 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	bf14      	ite	ne
 800a4ce:	2301      	movne	r3, #1
 800a4d0:	2300      	moveq	r3, #0
 800a4d2:	b2db      	uxtb	r3, r3
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3710      	adds	r7, #16
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}
 800a4dc:	200000b4 	.word	0x200000b4
 800a4e0:	20000eb2 	.word	0x20000eb2

0800a4e4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	60b9      	str	r1, [r7, #8]
 800a4ec:	607a      	str	r2, [r7, #4]
 800a4ee:	603b      	str	r3, [r7, #0]
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800a4f4:	7bfb      	ldrb	r3, [r7, #15]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d102      	bne.n	800a500 <SD_disk_write+0x1c>
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d101      	bne.n	800a504 <SD_disk_write+0x20>
 800a500:	2304      	movs	r3, #4
 800a502:	e06b      	b.n	800a5dc <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a504:	4b37      	ldr	r3, [pc, #220]	; (800a5e4 <SD_disk_write+0x100>)
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	f003 0301 	and.w	r3, r3, #1
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d001      	beq.n	800a516 <SD_disk_write+0x32>
 800a512:	2303      	movs	r3, #3
 800a514:	e062      	b.n	800a5dc <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800a516:	4b33      	ldr	r3, [pc, #204]	; (800a5e4 <SD_disk_write+0x100>)
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	f003 0304 	and.w	r3, r3, #4
 800a520:	2b00      	cmp	r3, #0
 800a522:	d001      	beq.n	800a528 <SD_disk_write+0x44>
 800a524:	2302      	movs	r3, #2
 800a526:	e059      	b.n	800a5dc <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800a528:	4b2f      	ldr	r3, [pc, #188]	; (800a5e8 <SD_disk_write+0x104>)
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	f003 0304 	and.w	r3, r3, #4
 800a530:	2b00      	cmp	r3, #0
 800a532:	d102      	bne.n	800a53a <SD_disk_write+0x56>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	025b      	lsls	r3, r3, #9
 800a538:	607b      	str	r3, [r7, #4]

	SELECT();
 800a53a:	f7ff fcbb 	bl	8009eb4 <SELECT>

	if (count == 1)
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	2b01      	cmp	r3, #1
 800a542:	d110      	bne.n	800a566 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800a544:	6879      	ldr	r1, [r7, #4]
 800a546:	2058      	movs	r0, #88	; 0x58
 800a548:	f7ff fe11 	bl	800a16e <SD_SendCmd>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d13a      	bne.n	800a5c8 <SD_disk_write+0xe4>
 800a552:	21fe      	movs	r1, #254	; 0xfe
 800a554:	68b8      	ldr	r0, [r7, #8]
 800a556:	f7ff fdc7 	bl	800a0e8 <SD_TxDataBlock>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d033      	beq.n	800a5c8 <SD_disk_write+0xe4>
			count = 0;
 800a560:	2300      	movs	r3, #0
 800a562:	603b      	str	r3, [r7, #0]
 800a564:	e030      	b.n	800a5c8 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800a566:	4b20      	ldr	r3, [pc, #128]	; (800a5e8 <SD_disk_write+0x104>)
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	f003 0302 	and.w	r3, r3, #2
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d007      	beq.n	800a582 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800a572:	2100      	movs	r1, #0
 800a574:	2077      	movs	r0, #119	; 0x77
 800a576:	f7ff fdfa 	bl	800a16e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800a57a:	6839      	ldr	r1, [r7, #0]
 800a57c:	2057      	movs	r0, #87	; 0x57
 800a57e:	f7ff fdf6 	bl	800a16e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800a582:	6879      	ldr	r1, [r7, #4]
 800a584:	2059      	movs	r0, #89	; 0x59
 800a586:	f7ff fdf2 	bl	800a16e <SD_SendCmd>
 800a58a:	4603      	mov	r3, r0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d11b      	bne.n	800a5c8 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800a590:	21fc      	movs	r1, #252	; 0xfc
 800a592:	68b8      	ldr	r0, [r7, #8]
 800a594:	f7ff fda8 	bl	800a0e8 <SD_TxDataBlock>
 800a598:	4603      	mov	r3, r0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d00a      	beq.n	800a5b4 <SD_disk_write+0xd0>
				buff += 512;
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a5a4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	3b01      	subs	r3, #1
 800a5aa:	603b      	str	r3, [r7, #0]
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d1ee      	bne.n	800a590 <SD_disk_write+0xac>
 800a5b2:	e000      	b.n	800a5b6 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800a5b4:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800a5b6:	21fd      	movs	r1, #253	; 0xfd
 800a5b8:	2000      	movs	r0, #0
 800a5ba:	f7ff fd95 	bl	800a0e8 <SD_TxDataBlock>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d101      	bne.n	800a5c8 <SD_disk_write+0xe4>
			{
				count = 1;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800a5c8:	f7ff fc81 	bl	8009ece <DESELECT>
	SPI_RxByte();
 800a5cc:	f7ff fcc0 	bl	8009f50 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	bf14      	ite	ne
 800a5d6:	2301      	movne	r3, #1
 800a5d8:	2300      	moveq	r3, #0
 800a5da:	b2db      	uxtb	r3, r3
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3710      	adds	r7, #16
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	200000b4 	.word	0x200000b4
 800a5e8:	20000eb2 	.word	0x20000eb2

0800a5ec <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800a5ec:	b590      	push	{r4, r7, lr}
 800a5ee:	b08b      	sub	sp, #44	; 0x2c
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	603a      	str	r2, [r7, #0]
 800a5f6:	71fb      	strb	r3, [r7, #7]
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800a600:	79fb      	ldrb	r3, [r7, #7]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d001      	beq.n	800a60a <SD_disk_ioctl+0x1e>
 800a606:	2304      	movs	r3, #4
 800a608:	e115      	b.n	800a836 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800a60a:	2301      	movs	r3, #1
 800a60c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 800a610:	79bb      	ldrb	r3, [r7, #6]
 800a612:	2b05      	cmp	r3, #5
 800a614:	d124      	bne.n	800a660 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800a616:	6a3b      	ldr	r3, [r7, #32]
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	2b02      	cmp	r3, #2
 800a61c:	d012      	beq.n	800a644 <SD_disk_ioctl+0x58>
 800a61e:	2b02      	cmp	r3, #2
 800a620:	dc1a      	bgt.n	800a658 <SD_disk_ioctl+0x6c>
 800a622:	2b00      	cmp	r3, #0
 800a624:	d002      	beq.n	800a62c <SD_disk_ioctl+0x40>
 800a626:	2b01      	cmp	r3, #1
 800a628:	d006      	beq.n	800a638 <SD_disk_ioctl+0x4c>
 800a62a:	e015      	b.n	800a658 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800a62c:	f7ff fd16 	bl	800a05c <SD_PowerOff>
			res = RES_OK;
 800a630:	2300      	movs	r3, #0
 800a632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800a636:	e0fc      	b.n	800a832 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 800a638:	f7ff fcce 	bl	8009fd8 <SD_PowerOn>
			res = RES_OK;
 800a63c:	2300      	movs	r3, #0
 800a63e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800a642:	e0f6      	b.n	800a832 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800a644:	6a3b      	ldr	r3, [r7, #32]
 800a646:	1c5c      	adds	r4, r3, #1
 800a648:	f7ff fd14 	bl	800a074 <SD_CheckPower>
 800a64c:	4603      	mov	r3, r0
 800a64e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 800a650:	2300      	movs	r3, #0
 800a652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800a656:	e0ec      	b.n	800a832 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 800a658:	2304      	movs	r3, #4
 800a65a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a65e:	e0e8      	b.n	800a832 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a660:	4b77      	ldr	r3, [pc, #476]	; (800a840 <SD_disk_ioctl+0x254>)
 800a662:	781b      	ldrb	r3, [r3, #0]
 800a664:	b2db      	uxtb	r3, r3
 800a666:	f003 0301 	and.w	r3, r3, #1
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d001      	beq.n	800a672 <SD_disk_ioctl+0x86>
 800a66e:	2303      	movs	r3, #3
 800a670:	e0e1      	b.n	800a836 <SD_disk_ioctl+0x24a>

		SELECT();
 800a672:	f7ff fc1f 	bl	8009eb4 <SELECT>

		switch (ctrl)
 800a676:	79bb      	ldrb	r3, [r7, #6]
 800a678:	2b0d      	cmp	r3, #13
 800a67a:	f200 80cb 	bhi.w	800a814 <SD_disk_ioctl+0x228>
 800a67e:	a201      	add	r2, pc, #4	; (adr r2, 800a684 <SD_disk_ioctl+0x98>)
 800a680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a684:	0800a77f 	.word	0x0800a77f
 800a688:	0800a6bd 	.word	0x0800a6bd
 800a68c:	0800a76f 	.word	0x0800a76f
 800a690:	0800a815 	.word	0x0800a815
 800a694:	0800a815 	.word	0x0800a815
 800a698:	0800a815 	.word	0x0800a815
 800a69c:	0800a815 	.word	0x0800a815
 800a6a0:	0800a815 	.word	0x0800a815
 800a6a4:	0800a815 	.word	0x0800a815
 800a6a8:	0800a815 	.word	0x0800a815
 800a6ac:	0800a815 	.word	0x0800a815
 800a6b0:	0800a791 	.word	0x0800a791
 800a6b4:	0800a7b5 	.word	0x0800a7b5
 800a6b8:	0800a7d9 	.word	0x0800a7d9
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800a6bc:	2100      	movs	r1, #0
 800a6be:	2049      	movs	r0, #73	; 0x49
 800a6c0:	f7ff fd55 	bl	800a16e <SD_SendCmd>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	f040 80a8 	bne.w	800a81c <SD_disk_ioctl+0x230>
 800a6cc:	f107 030c 	add.w	r3, r7, #12
 800a6d0:	2110      	movs	r1, #16
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f7ff fcda 	bl	800a08c <SD_RxDataBlock>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	f000 809e 	beq.w	800a81c <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 800a6e0:	7b3b      	ldrb	r3, [r7, #12]
 800a6e2:	099b      	lsrs	r3, r3, #6
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d10e      	bne.n	800a708 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800a6ea:	7d7b      	ldrb	r3, [r7, #21]
 800a6ec:	b29a      	uxth	r2, r3
 800a6ee:	7d3b      	ldrb	r3, [r7, #20]
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	021b      	lsls	r3, r3, #8
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	4413      	add	r3, r2
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800a6fe:	8bfb      	ldrh	r3, [r7, #30]
 800a700:	029a      	lsls	r2, r3, #10
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	601a      	str	r2, [r3, #0]
 800a706:	e02e      	b.n	800a766 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800a708:	7c7b      	ldrb	r3, [r7, #17]
 800a70a:	f003 030f 	and.w	r3, r3, #15
 800a70e:	b2da      	uxtb	r2, r3
 800a710:	7dbb      	ldrb	r3, [r7, #22]
 800a712:	09db      	lsrs	r3, r3, #7
 800a714:	b2db      	uxtb	r3, r3
 800a716:	4413      	add	r3, r2
 800a718:	b2da      	uxtb	r2, r3
 800a71a:	7d7b      	ldrb	r3, [r7, #21]
 800a71c:	005b      	lsls	r3, r3, #1
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	f003 0306 	and.w	r3, r3, #6
 800a724:	b2db      	uxtb	r3, r3
 800a726:	4413      	add	r3, r2
 800a728:	b2db      	uxtb	r3, r3
 800a72a:	3302      	adds	r3, #2
 800a72c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800a730:	7d3b      	ldrb	r3, [r7, #20]
 800a732:	099b      	lsrs	r3, r3, #6
 800a734:	b2db      	uxtb	r3, r3
 800a736:	b29a      	uxth	r2, r3
 800a738:	7cfb      	ldrb	r3, [r7, #19]
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	009b      	lsls	r3, r3, #2
 800a73e:	b29b      	uxth	r3, r3
 800a740:	4413      	add	r3, r2
 800a742:	b29a      	uxth	r2, r3
 800a744:	7cbb      	ldrb	r3, [r7, #18]
 800a746:	029b      	lsls	r3, r3, #10
 800a748:	b29b      	uxth	r3, r3
 800a74a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a74e:	b29b      	uxth	r3, r3
 800a750:	4413      	add	r3, r2
 800a752:	b29b      	uxth	r3, r3
 800a754:	3301      	adds	r3, #1
 800a756:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800a758:	8bfa      	ldrh	r2, [r7, #30]
 800a75a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a75e:	3b09      	subs	r3, #9
 800a760:	409a      	lsls	r2, r3
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800a766:	2300      	movs	r3, #0
 800a768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 800a76c:	e056      	b.n	800a81c <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a774:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800a776:	2300      	movs	r3, #0
 800a778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800a77c:	e055      	b.n	800a82a <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800a77e:	f7ff fc11 	bl	8009fa4 <SD_ReadyWait>
 800a782:	4603      	mov	r3, r0
 800a784:	2bff      	cmp	r3, #255	; 0xff
 800a786:	d14b      	bne.n	800a820 <SD_disk_ioctl+0x234>
 800a788:	2300      	movs	r3, #0
 800a78a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800a78e:	e047      	b.n	800a820 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800a790:	2100      	movs	r1, #0
 800a792:	2049      	movs	r0, #73	; 0x49
 800a794:	f7ff fceb 	bl	800a16e <SD_SendCmd>
 800a798:	4603      	mov	r3, r0
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d142      	bne.n	800a824 <SD_disk_ioctl+0x238>
 800a79e:	2110      	movs	r1, #16
 800a7a0:	6a38      	ldr	r0, [r7, #32]
 800a7a2:	f7ff fc73 	bl	800a08c <SD_RxDataBlock>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d03b      	beq.n	800a824 <SD_disk_ioctl+0x238>
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800a7b2:	e037      	b.n	800a824 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800a7b4:	2100      	movs	r1, #0
 800a7b6:	204a      	movs	r0, #74	; 0x4a
 800a7b8:	f7ff fcd9 	bl	800a16e <SD_SendCmd>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d132      	bne.n	800a828 <SD_disk_ioctl+0x23c>
 800a7c2:	2110      	movs	r1, #16
 800a7c4:	6a38      	ldr	r0, [r7, #32]
 800a7c6:	f7ff fc61 	bl	800a08c <SD_RxDataBlock>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d02b      	beq.n	800a828 <SD_disk_ioctl+0x23c>
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800a7d6:	e027      	b.n	800a828 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800a7d8:	2100      	movs	r1, #0
 800a7da:	207a      	movs	r0, #122	; 0x7a
 800a7dc:	f7ff fcc7 	bl	800a16e <SD_SendCmd>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d116      	bne.n	800a814 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a7ec:	e00b      	b.n	800a806 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 800a7ee:	6a3c      	ldr	r4, [r7, #32]
 800a7f0:	1c63      	adds	r3, r4, #1
 800a7f2:	623b      	str	r3, [r7, #32]
 800a7f4:	f7ff fbac 	bl	8009f50 <SPI_RxByte>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 800a7fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a800:	3301      	adds	r3, #1
 800a802:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a806:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a80a:	2b03      	cmp	r3, #3
 800a80c:	d9ef      	bls.n	800a7ee <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800a80e:	2300      	movs	r3, #0
 800a810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 800a814:	2304      	movs	r3, #4
 800a816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a81a:	e006      	b.n	800a82a <SD_disk_ioctl+0x23e>
			break;
 800a81c:	bf00      	nop
 800a81e:	e004      	b.n	800a82a <SD_disk_ioctl+0x23e>
			break;
 800a820:	bf00      	nop
 800a822:	e002      	b.n	800a82a <SD_disk_ioctl+0x23e>
			break;
 800a824:	bf00      	nop
 800a826:	e000      	b.n	800a82a <SD_disk_ioctl+0x23e>
			break;
 800a828:	bf00      	nop
		}

		DESELECT();
 800a82a:	f7ff fb50 	bl	8009ece <DESELECT>
		SPI_RxByte();
 800a82e:	f7ff fb8f 	bl	8009f50 <SPI_RxByte>
	}

	return res;
 800a832:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a836:	4618      	mov	r0, r3
 800a838:	372c      	adds	r7, #44	; 0x2c
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd90      	pop	{r4, r7, pc}
 800a83e:	bf00      	nop
 800a840:	200000b4 	.word	0x200000b4

0800a844 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	4603      	mov	r3, r0
 800a84c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = SD_disk_initialize(pdrv);;
 800a84e:	79fb      	ldrb	r3, [r7, #7]
 800a850:	4618      	mov	r0, r3
 800a852:	f7ff fce1 	bl	800a218 <SD_disk_initialize>
 800a856:	4603      	mov	r3, r0
 800a858:	461a      	mov	r2, r3
 800a85a:	4b04      	ldr	r3, [pc, #16]	; (800a86c <USER_initialize+0x28>)
 800a85c:	701a      	strb	r2, [r3, #0]
    return Stat;
 800a85e:	4b03      	ldr	r3, [pc, #12]	; (800a86c <USER_initialize+0x28>)
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800a864:	4618      	mov	r0, r3
 800a866:	3708      	adds	r7, #8
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	200000b5 	.word	0x200000b5

0800a870 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b082      	sub	sp, #8
 800a874:	af00      	add	r7, sp, #0
 800a876:	4603      	mov	r3, r0
 800a878:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = SD_disk_status(pdrv);
 800a87a:	79fb      	ldrb	r3, [r7, #7]
 800a87c:	4618      	mov	r0, r3
 800a87e:	f7ff fdb1 	bl	800a3e4 <SD_disk_status>
 800a882:	4603      	mov	r3, r0
 800a884:	461a      	mov	r2, r3
 800a886:	4b04      	ldr	r3, [pc, #16]	; (800a898 <USER_status+0x28>)
 800a888:	701a      	strb	r2, [r3, #0]
    return Stat;
 800a88a:	4b03      	ldr	r3, [pc, #12]	; (800a898 <USER_status+0x28>)
 800a88c:	781b      	ldrb	r3, [r3, #0]
 800a88e:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800a890:	4618      	mov	r0, r3
 800a892:	3708      	adds	r7, #8
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}
 800a898:	200000b5 	.word	0x200000b5

0800a89c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	60b9      	str	r1, [r7, #8]
 800a8a4:	607a      	str	r2, [r7, #4]
 800a8a6:	603b      	str	r3, [r7, #0]
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800a8ac:	7bf8      	ldrb	r0, [r7, #15]
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	68b9      	ldr	r1, [r7, #8]
 800a8b4:	f7ff fdac 	bl	800a410 <SD_disk_read>
 800a8b8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3710      	adds	r7, #16
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}

0800a8c2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a8c2:	b580      	push	{r7, lr}
 800a8c4:	b084      	sub	sp, #16
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	60b9      	str	r1, [r7, #8]
 800a8ca:	607a      	str	r2, [r7, #4]
 800a8cc:	603b      	str	r3, [r7, #0]
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800a8d2:	7bf8      	ldrb	r0, [r7, #15]
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	687a      	ldr	r2, [r7, #4]
 800a8d8:	68b9      	ldr	r1, [r7, #8]
 800a8da:	f7ff fe03 	bl	800a4e4 <SD_disk_write>
 800a8de:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3710      	adds	r7, #16
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	603a      	str	r2, [r7, #0]
 800a8f2:	71fb      	strb	r3, [r7, #7]
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	73fb      	strb	r3, [r7, #15]
    return SD_disk_ioctl(pdrv, cmd, buff);
 800a8fc:	79b9      	ldrb	r1, [r7, #6]
 800a8fe:	79fb      	ldrb	r3, [r7, #7]
 800a900:	683a      	ldr	r2, [r7, #0]
 800a902:	4618      	mov	r0, r3
 800a904:	f7ff fe72 	bl	800a5ec <SD_disk_ioctl>
 800a908:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3710      	adds	r7, #16
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
	...

0800a914 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b084      	sub	sp, #16
 800a918:	af00      	add	r7, sp, #0
 800a91a:	4603      	mov	r3, r0
 800a91c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a91e:	79fb      	ldrb	r3, [r7, #7]
 800a920:	4a08      	ldr	r2, [pc, #32]	; (800a944 <disk_status+0x30>)
 800a922:	009b      	lsls	r3, r3, #2
 800a924:	4413      	add	r3, r2
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	79fa      	ldrb	r2, [r7, #7]
 800a92c:	4905      	ldr	r1, [pc, #20]	; (800a944 <disk_status+0x30>)
 800a92e:	440a      	add	r2, r1
 800a930:	7a12      	ldrb	r2, [r2, #8]
 800a932:	4610      	mov	r0, r2
 800a934:	4798      	blx	r3
 800a936:	4603      	mov	r3, r0
 800a938:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a93a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3710      	adds	r7, #16
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}
 800a944:	20000edc 	.word	0x20000edc

0800a948 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b084      	sub	sp, #16
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	4603      	mov	r3, r0
 800a950:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a952:	2300      	movs	r3, #0
 800a954:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a956:	79fb      	ldrb	r3, [r7, #7]
 800a958:	4a0d      	ldr	r2, [pc, #52]	; (800a990 <disk_initialize+0x48>)
 800a95a:	5cd3      	ldrb	r3, [r2, r3]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d111      	bne.n	800a984 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a960:	79fb      	ldrb	r3, [r7, #7]
 800a962:	4a0b      	ldr	r2, [pc, #44]	; (800a990 <disk_initialize+0x48>)
 800a964:	2101      	movs	r1, #1
 800a966:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a968:	79fb      	ldrb	r3, [r7, #7]
 800a96a:	4a09      	ldr	r2, [pc, #36]	; (800a990 <disk_initialize+0x48>)
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	4413      	add	r3, r2
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	79fa      	ldrb	r2, [r7, #7]
 800a976:	4906      	ldr	r1, [pc, #24]	; (800a990 <disk_initialize+0x48>)
 800a978:	440a      	add	r2, r1
 800a97a:	7a12      	ldrb	r2, [r2, #8]
 800a97c:	4610      	mov	r0, r2
 800a97e:	4798      	blx	r3
 800a980:	4603      	mov	r3, r0
 800a982:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a984:	7bfb      	ldrb	r3, [r7, #15]
}
 800a986:	4618      	mov	r0, r3
 800a988:	3710      	adds	r7, #16
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	20000edc 	.word	0x20000edc

0800a994 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a994:	b590      	push	{r4, r7, lr}
 800a996:	b087      	sub	sp, #28
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60b9      	str	r1, [r7, #8]
 800a99c:	607a      	str	r2, [r7, #4]
 800a99e:	603b      	str	r3, [r7, #0]
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a9a4:	7bfb      	ldrb	r3, [r7, #15]
 800a9a6:	4a0a      	ldr	r2, [pc, #40]	; (800a9d0 <disk_read+0x3c>)
 800a9a8:	009b      	lsls	r3, r3, #2
 800a9aa:	4413      	add	r3, r2
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	689c      	ldr	r4, [r3, #8]
 800a9b0:	7bfb      	ldrb	r3, [r7, #15]
 800a9b2:	4a07      	ldr	r2, [pc, #28]	; (800a9d0 <disk_read+0x3c>)
 800a9b4:	4413      	add	r3, r2
 800a9b6:	7a18      	ldrb	r0, [r3, #8]
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	68b9      	ldr	r1, [r7, #8]
 800a9be:	47a0      	blx	r4
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	75fb      	strb	r3, [r7, #23]
  return res;
 800a9c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	371c      	adds	r7, #28
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd90      	pop	{r4, r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	20000edc 	.word	0x20000edc

0800a9d4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a9d4:	b590      	push	{r4, r7, lr}
 800a9d6:	b087      	sub	sp, #28
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60b9      	str	r1, [r7, #8]
 800a9dc:	607a      	str	r2, [r7, #4]
 800a9de:	603b      	str	r3, [r7, #0]
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a9e4:	7bfb      	ldrb	r3, [r7, #15]
 800a9e6:	4a0a      	ldr	r2, [pc, #40]	; (800aa10 <disk_write+0x3c>)
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	4413      	add	r3, r2
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	68dc      	ldr	r4, [r3, #12]
 800a9f0:	7bfb      	ldrb	r3, [r7, #15]
 800a9f2:	4a07      	ldr	r2, [pc, #28]	; (800aa10 <disk_write+0x3c>)
 800a9f4:	4413      	add	r3, r2
 800a9f6:	7a18      	ldrb	r0, [r3, #8]
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	687a      	ldr	r2, [r7, #4]
 800a9fc:	68b9      	ldr	r1, [r7, #8]
 800a9fe:	47a0      	blx	r4
 800aa00:	4603      	mov	r3, r0
 800aa02:	75fb      	strb	r3, [r7, #23]
  return res;
 800aa04:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	371c      	adds	r7, #28
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd90      	pop	{r4, r7, pc}
 800aa0e:	bf00      	nop
 800aa10:	20000edc 	.word	0x20000edc

0800aa14 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b084      	sub	sp, #16
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	603a      	str	r2, [r7, #0]
 800aa1e:	71fb      	strb	r3, [r7, #7]
 800aa20:	460b      	mov	r3, r1
 800aa22:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800aa24:	79fb      	ldrb	r3, [r7, #7]
 800aa26:	4a09      	ldr	r2, [pc, #36]	; (800aa4c <disk_ioctl+0x38>)
 800aa28:	009b      	lsls	r3, r3, #2
 800aa2a:	4413      	add	r3, r2
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	691b      	ldr	r3, [r3, #16]
 800aa30:	79fa      	ldrb	r2, [r7, #7]
 800aa32:	4906      	ldr	r1, [pc, #24]	; (800aa4c <disk_ioctl+0x38>)
 800aa34:	440a      	add	r2, r1
 800aa36:	7a10      	ldrb	r0, [r2, #8]
 800aa38:	79b9      	ldrb	r1, [r7, #6]
 800aa3a:	683a      	ldr	r2, [r7, #0]
 800aa3c:	4798      	blx	r3
 800aa3e:	4603      	mov	r3, r0
 800aa40:	73fb      	strb	r3, [r7, #15]
  return res;
 800aa42:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3710      	adds	r7, #16
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	20000edc 	.word	0x20000edc

0800aa50 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800aa50:	b480      	push	{r7}
 800aa52:	b085      	sub	sp, #20
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800aa60:	89fb      	ldrh	r3, [r7, #14]
 800aa62:	021b      	lsls	r3, r3, #8
 800aa64:	b21a      	sxth	r2, r3
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	b21b      	sxth	r3, r3
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	b21b      	sxth	r3, r3
 800aa70:	81fb      	strh	r3, [r7, #14]
	return rv;
 800aa72:	89fb      	ldrh	r3, [r7, #14]
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3714      	adds	r7, #20
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800aa80:	b480      	push	{r7}
 800aa82:	b085      	sub	sp, #20
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	3303      	adds	r3, #3
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	021b      	lsls	r3, r3, #8
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	3202      	adds	r2, #2
 800aa98:	7812      	ldrb	r2, [r2, #0]
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	021b      	lsls	r3, r3, #8
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	3201      	adds	r2, #1
 800aaa6:	7812      	ldrb	r2, [r2, #0]
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	021b      	lsls	r3, r3, #8
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	7812      	ldrb	r2, [r2, #0]
 800aab4:	4313      	orrs	r3, r2
 800aab6:	60fb      	str	r3, [r7, #12]
	return rv;
 800aab8:	68fb      	ldr	r3, [r7, #12]
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3714      	adds	r7, #20
 800aabe:	46bd      	mov	sp, r7
 800aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac4:	4770      	bx	lr

0800aac6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800aac6:	b480      	push	{r7}
 800aac8:	b083      	sub	sp, #12
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	6078      	str	r0, [r7, #4]
 800aace:	460b      	mov	r3, r1
 800aad0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	1c5a      	adds	r2, r3, #1
 800aad6:	607a      	str	r2, [r7, #4]
 800aad8:	887a      	ldrh	r2, [r7, #2]
 800aada:	b2d2      	uxtb	r2, r2
 800aadc:	701a      	strb	r2, [r3, #0]
 800aade:	887b      	ldrh	r3, [r7, #2]
 800aae0:	0a1b      	lsrs	r3, r3, #8
 800aae2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	1c5a      	adds	r2, r3, #1
 800aae8:	607a      	str	r2, [r7, #4]
 800aaea:	887a      	ldrh	r2, [r7, #2]
 800aaec:	b2d2      	uxtb	r2, r2
 800aaee:	701a      	strb	r2, [r3, #0]
}
 800aaf0:	bf00      	nop
 800aaf2:	370c      	adds	r7, #12
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr

0800aafc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800aafc:	b480      	push	{r7}
 800aafe:	b083      	sub	sp, #12
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	1c5a      	adds	r2, r3, #1
 800ab0a:	607a      	str	r2, [r7, #4]
 800ab0c:	683a      	ldr	r2, [r7, #0]
 800ab0e:	b2d2      	uxtb	r2, r2
 800ab10:	701a      	strb	r2, [r3, #0]
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	0a1b      	lsrs	r3, r3, #8
 800ab16:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	1c5a      	adds	r2, r3, #1
 800ab1c:	607a      	str	r2, [r7, #4]
 800ab1e:	683a      	ldr	r2, [r7, #0]
 800ab20:	b2d2      	uxtb	r2, r2
 800ab22:	701a      	strb	r2, [r3, #0]
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	0a1b      	lsrs	r3, r3, #8
 800ab28:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	1c5a      	adds	r2, r3, #1
 800ab2e:	607a      	str	r2, [r7, #4]
 800ab30:	683a      	ldr	r2, [r7, #0]
 800ab32:	b2d2      	uxtb	r2, r2
 800ab34:	701a      	strb	r2, [r3, #0]
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	0a1b      	lsrs	r3, r3, #8
 800ab3a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	1c5a      	adds	r2, r3, #1
 800ab40:	607a      	str	r2, [r7, #4]
 800ab42:	683a      	ldr	r2, [r7, #0]
 800ab44:	b2d2      	uxtb	r2, r2
 800ab46:	701a      	strb	r2, [r3, #0]
}
 800ab48:	bf00      	nop
 800ab4a:	370c      	adds	r7, #12
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr

0800ab54 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ab54:	b480      	push	{r7}
 800ab56:	b087      	sub	sp, #28
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	60b9      	str	r1, [r7, #8]
 800ab5e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d00d      	beq.n	800ab8a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ab6e:	693a      	ldr	r2, [r7, #16]
 800ab70:	1c53      	adds	r3, r2, #1
 800ab72:	613b      	str	r3, [r7, #16]
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	1c59      	adds	r1, r3, #1
 800ab78:	6179      	str	r1, [r7, #20]
 800ab7a:	7812      	ldrb	r2, [r2, #0]
 800ab7c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	3b01      	subs	r3, #1
 800ab82:	607b      	str	r3, [r7, #4]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d1f1      	bne.n	800ab6e <mem_cpy+0x1a>
	}
}
 800ab8a:	bf00      	nop
 800ab8c:	371c      	adds	r7, #28
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr

0800ab96 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ab96:	b480      	push	{r7}
 800ab98:	b087      	sub	sp, #28
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	60f8      	str	r0, [r7, #12]
 800ab9e:	60b9      	str	r1, [r7, #8]
 800aba0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	1c5a      	adds	r2, r3, #1
 800abaa:	617a      	str	r2, [r7, #20]
 800abac:	68ba      	ldr	r2, [r7, #8]
 800abae:	b2d2      	uxtb	r2, r2
 800abb0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	3b01      	subs	r3, #1
 800abb6:	607b      	str	r3, [r7, #4]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d1f3      	bne.n	800aba6 <mem_set+0x10>
}
 800abbe:	bf00      	nop
 800abc0:	bf00      	nop
 800abc2:	371c      	adds	r7, #28
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr

0800abcc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800abcc:	b480      	push	{r7}
 800abce:	b089      	sub	sp, #36	; 0x24
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	61fb      	str	r3, [r7, #28]
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800abe0:	2300      	movs	r3, #0
 800abe2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800abe4:	69fb      	ldr	r3, [r7, #28]
 800abe6:	1c5a      	adds	r2, r3, #1
 800abe8:	61fa      	str	r2, [r7, #28]
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	4619      	mov	r1, r3
 800abee:	69bb      	ldr	r3, [r7, #24]
 800abf0:	1c5a      	adds	r2, r3, #1
 800abf2:	61ba      	str	r2, [r7, #24]
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	1acb      	subs	r3, r1, r3
 800abf8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	3b01      	subs	r3, #1
 800abfe:	607b      	str	r3, [r7, #4]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d002      	beq.n	800ac0c <mem_cmp+0x40>
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d0eb      	beq.n	800abe4 <mem_cmp+0x18>

	return r;
 800ac0c:	697b      	ldr	r3, [r7, #20]
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3724      	adds	r7, #36	; 0x24
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr

0800ac1a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ac1a:	b480      	push	{r7}
 800ac1c:	b083      	sub	sp, #12
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	6078      	str	r0, [r7, #4]
 800ac22:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ac24:	e002      	b.n	800ac2c <chk_chr+0x12>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	3301      	adds	r3, #1
 800ac2a:	607b      	str	r3, [r7, #4]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d005      	beq.n	800ac40 <chk_chr+0x26>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	461a      	mov	r2, r3
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d1f2      	bne.n	800ac26 <chk_chr+0xc>
	return *str;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	781b      	ldrb	r3, [r3, #0]
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	370c      	adds	r7, #12
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr

0800ac50 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b085      	sub	sp, #20
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	60bb      	str	r3, [r7, #8]
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	60fb      	str	r3, [r7, #12]
 800ac62:	e029      	b.n	800acb8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ac64:	4a27      	ldr	r2, [pc, #156]	; (800ad04 <chk_lock+0xb4>)
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	011b      	lsls	r3, r3, #4
 800ac6a:	4413      	add	r3, r2
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d01d      	beq.n	800acae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ac72:	4a24      	ldr	r2, [pc, #144]	; (800ad04 <chk_lock+0xb4>)
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	011b      	lsls	r3, r3, #4
 800ac78:	4413      	add	r3, r2
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d116      	bne.n	800acb2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ac84:	4a1f      	ldr	r2, [pc, #124]	; (800ad04 <chk_lock+0xb4>)
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	011b      	lsls	r3, r3, #4
 800ac8a:	4413      	add	r3, r2
 800ac8c:	3304      	adds	r3, #4
 800ac8e:	681a      	ldr	r2, [r3, #0]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d10c      	bne.n	800acb2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ac98:	4a1a      	ldr	r2, [pc, #104]	; (800ad04 <chk_lock+0xb4>)
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	011b      	lsls	r3, r3, #4
 800ac9e:	4413      	add	r3, r2
 800aca0:	3308      	adds	r3, #8
 800aca2:	681a      	ldr	r2, [r3, #0]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d102      	bne.n	800acb2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800acac:	e007      	b.n	800acbe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800acae:	2301      	movs	r3, #1
 800acb0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	3301      	adds	r3, #1
 800acb6:	60fb      	str	r3, [r7, #12]
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d9d2      	bls.n	800ac64 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2b02      	cmp	r3, #2
 800acc2:	d109      	bne.n	800acd8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d102      	bne.n	800acd0 <chk_lock+0x80>
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	2b02      	cmp	r3, #2
 800acce:	d101      	bne.n	800acd4 <chk_lock+0x84>
 800acd0:	2300      	movs	r3, #0
 800acd2:	e010      	b.n	800acf6 <chk_lock+0xa6>
 800acd4:	2312      	movs	r3, #18
 800acd6:	e00e      	b.n	800acf6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d108      	bne.n	800acf0 <chk_lock+0xa0>
 800acde:	4a09      	ldr	r2, [pc, #36]	; (800ad04 <chk_lock+0xb4>)
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	011b      	lsls	r3, r3, #4
 800ace4:	4413      	add	r3, r2
 800ace6:	330c      	adds	r3, #12
 800ace8:	881b      	ldrh	r3, [r3, #0]
 800acea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acee:	d101      	bne.n	800acf4 <chk_lock+0xa4>
 800acf0:	2310      	movs	r3, #16
 800acf2:	e000      	b.n	800acf6 <chk_lock+0xa6>
 800acf4:	2300      	movs	r3, #0
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3714      	adds	r7, #20
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr
 800ad02:	bf00      	nop
 800ad04:	20000ebc 	.word	0x20000ebc

0800ad08 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	607b      	str	r3, [r7, #4]
 800ad12:	e002      	b.n	800ad1a <enq_lock+0x12>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	3301      	adds	r3, #1
 800ad18:	607b      	str	r3, [r7, #4]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d806      	bhi.n	800ad2e <enq_lock+0x26>
 800ad20:	4a09      	ldr	r2, [pc, #36]	; (800ad48 <enq_lock+0x40>)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	011b      	lsls	r3, r3, #4
 800ad26:	4413      	add	r3, r2
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d1f2      	bne.n	800ad14 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2b02      	cmp	r3, #2
 800ad32:	bf14      	ite	ne
 800ad34:	2301      	movne	r3, #1
 800ad36:	2300      	moveq	r3, #0
 800ad38:	b2db      	uxtb	r3, r3
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	370c      	adds	r7, #12
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	20000ebc 	.word	0x20000ebc

0800ad4c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b085      	sub	sp, #20
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ad56:	2300      	movs	r3, #0
 800ad58:	60fb      	str	r3, [r7, #12]
 800ad5a:	e01f      	b.n	800ad9c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ad5c:	4a41      	ldr	r2, [pc, #260]	; (800ae64 <inc_lock+0x118>)
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	011b      	lsls	r3, r3, #4
 800ad62:	4413      	add	r3, r2
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d113      	bne.n	800ad96 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ad6e:	4a3d      	ldr	r2, [pc, #244]	; (800ae64 <inc_lock+0x118>)
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	011b      	lsls	r3, r3, #4
 800ad74:	4413      	add	r3, r2
 800ad76:	3304      	adds	r3, #4
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d109      	bne.n	800ad96 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ad82:	4a38      	ldr	r2, [pc, #224]	; (800ae64 <inc_lock+0x118>)
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	011b      	lsls	r3, r3, #4
 800ad88:	4413      	add	r3, r2
 800ad8a:	3308      	adds	r3, #8
 800ad8c:	681a      	ldr	r2, [r3, #0]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d006      	beq.n	800ada4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	3301      	adds	r3, #1
 800ad9a:	60fb      	str	r3, [r7, #12]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d9dc      	bls.n	800ad5c <inc_lock+0x10>
 800ada2:	e000      	b.n	800ada6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ada4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2b02      	cmp	r3, #2
 800adaa:	d132      	bne.n	800ae12 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800adac:	2300      	movs	r3, #0
 800adae:	60fb      	str	r3, [r7, #12]
 800adb0:	e002      	b.n	800adb8 <inc_lock+0x6c>
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	3301      	adds	r3, #1
 800adb6:	60fb      	str	r3, [r7, #12]
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2b01      	cmp	r3, #1
 800adbc:	d806      	bhi.n	800adcc <inc_lock+0x80>
 800adbe:	4a29      	ldr	r2, [pc, #164]	; (800ae64 <inc_lock+0x118>)
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	011b      	lsls	r3, r3, #4
 800adc4:	4413      	add	r3, r2
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d1f2      	bne.n	800adb2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2b02      	cmp	r3, #2
 800add0:	d101      	bne.n	800add6 <inc_lock+0x8a>
 800add2:	2300      	movs	r3, #0
 800add4:	e040      	b.n	800ae58 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	4922      	ldr	r1, [pc, #136]	; (800ae64 <inc_lock+0x118>)
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	011b      	lsls	r3, r3, #4
 800ade0:	440b      	add	r3, r1
 800ade2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	689a      	ldr	r2, [r3, #8]
 800ade8:	491e      	ldr	r1, [pc, #120]	; (800ae64 <inc_lock+0x118>)
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	011b      	lsls	r3, r3, #4
 800adee:	440b      	add	r3, r1
 800adf0:	3304      	adds	r3, #4
 800adf2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	695a      	ldr	r2, [r3, #20]
 800adf8:	491a      	ldr	r1, [pc, #104]	; (800ae64 <inc_lock+0x118>)
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	011b      	lsls	r3, r3, #4
 800adfe:	440b      	add	r3, r1
 800ae00:	3308      	adds	r3, #8
 800ae02:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ae04:	4a17      	ldr	r2, [pc, #92]	; (800ae64 <inc_lock+0x118>)
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	011b      	lsls	r3, r3, #4
 800ae0a:	4413      	add	r3, r2
 800ae0c:	330c      	adds	r3, #12
 800ae0e:	2200      	movs	r2, #0
 800ae10:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d009      	beq.n	800ae2c <inc_lock+0xe0>
 800ae18:	4a12      	ldr	r2, [pc, #72]	; (800ae64 <inc_lock+0x118>)
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	011b      	lsls	r3, r3, #4
 800ae1e:	4413      	add	r3, r2
 800ae20:	330c      	adds	r3, #12
 800ae22:	881b      	ldrh	r3, [r3, #0]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d001      	beq.n	800ae2c <inc_lock+0xe0>
 800ae28:	2300      	movs	r3, #0
 800ae2a:	e015      	b.n	800ae58 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d108      	bne.n	800ae44 <inc_lock+0xf8>
 800ae32:	4a0c      	ldr	r2, [pc, #48]	; (800ae64 <inc_lock+0x118>)
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	011b      	lsls	r3, r3, #4
 800ae38:	4413      	add	r3, r2
 800ae3a:	330c      	adds	r3, #12
 800ae3c:	881b      	ldrh	r3, [r3, #0]
 800ae3e:	3301      	adds	r3, #1
 800ae40:	b29a      	uxth	r2, r3
 800ae42:	e001      	b.n	800ae48 <inc_lock+0xfc>
 800ae44:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae48:	4906      	ldr	r1, [pc, #24]	; (800ae64 <inc_lock+0x118>)
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	011b      	lsls	r3, r3, #4
 800ae4e:	440b      	add	r3, r1
 800ae50:	330c      	adds	r3, #12
 800ae52:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	3301      	adds	r3, #1
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3714      	adds	r7, #20
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr
 800ae64:	20000ebc 	.word	0x20000ebc

0800ae68 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b085      	sub	sp, #20
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	3b01      	subs	r3, #1
 800ae74:	607b      	str	r3, [r7, #4]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d825      	bhi.n	800aec8 <dec_lock+0x60>
		n = Files[i].ctr;
 800ae7c:	4a17      	ldr	r2, [pc, #92]	; (800aedc <dec_lock+0x74>)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	011b      	lsls	r3, r3, #4
 800ae82:	4413      	add	r3, r2
 800ae84:	330c      	adds	r3, #12
 800ae86:	881b      	ldrh	r3, [r3, #0]
 800ae88:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ae8a:	89fb      	ldrh	r3, [r7, #14]
 800ae8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae90:	d101      	bne.n	800ae96 <dec_lock+0x2e>
 800ae92:	2300      	movs	r3, #0
 800ae94:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ae96:	89fb      	ldrh	r3, [r7, #14]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d002      	beq.n	800aea2 <dec_lock+0x3a>
 800ae9c:	89fb      	ldrh	r3, [r7, #14]
 800ae9e:	3b01      	subs	r3, #1
 800aea0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800aea2:	4a0e      	ldr	r2, [pc, #56]	; (800aedc <dec_lock+0x74>)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	011b      	lsls	r3, r3, #4
 800aea8:	4413      	add	r3, r2
 800aeaa:	330c      	adds	r3, #12
 800aeac:	89fa      	ldrh	r2, [r7, #14]
 800aeae:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800aeb0:	89fb      	ldrh	r3, [r7, #14]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d105      	bne.n	800aec2 <dec_lock+0x5a>
 800aeb6:	4a09      	ldr	r2, [pc, #36]	; (800aedc <dec_lock+0x74>)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	011b      	lsls	r3, r3, #4
 800aebc:	4413      	add	r3, r2
 800aebe:	2200      	movs	r2, #0
 800aec0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800aec2:	2300      	movs	r3, #0
 800aec4:	737b      	strb	r3, [r7, #13]
 800aec6:	e001      	b.n	800aecc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800aec8:	2302      	movs	r3, #2
 800aeca:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800aecc:	7b7b      	ldrb	r3, [r7, #13]
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3714      	adds	r7, #20
 800aed2:	46bd      	mov	sp, r7
 800aed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed8:	4770      	bx	lr
 800aeda:	bf00      	nop
 800aedc:	20000ebc 	.word	0x20000ebc

0800aee0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b085      	sub	sp, #20
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800aee8:	2300      	movs	r3, #0
 800aeea:	60fb      	str	r3, [r7, #12]
 800aeec:	e010      	b.n	800af10 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800aeee:	4a0d      	ldr	r2, [pc, #52]	; (800af24 <clear_lock+0x44>)
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	011b      	lsls	r3, r3, #4
 800aef4:	4413      	add	r3, r2
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	687a      	ldr	r2, [r7, #4]
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d105      	bne.n	800af0a <clear_lock+0x2a>
 800aefe:	4a09      	ldr	r2, [pc, #36]	; (800af24 <clear_lock+0x44>)
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	011b      	lsls	r3, r3, #4
 800af04:	4413      	add	r3, r2
 800af06:	2200      	movs	r2, #0
 800af08:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	3301      	adds	r3, #1
 800af0e:	60fb      	str	r3, [r7, #12]
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	2b01      	cmp	r3, #1
 800af14:	d9eb      	bls.n	800aeee <clear_lock+0xe>
	}
}
 800af16:	bf00      	nop
 800af18:	bf00      	nop
 800af1a:	3714      	adds	r7, #20
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr
 800af24:	20000ebc 	.word	0x20000ebc

0800af28 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b086      	sub	sp, #24
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800af30:	2300      	movs	r3, #0
 800af32:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	78db      	ldrb	r3, [r3, #3]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d034      	beq.n	800afa6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af40:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	7858      	ldrb	r0, [r3, #1]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800af4c:	2301      	movs	r3, #1
 800af4e:	697a      	ldr	r2, [r7, #20]
 800af50:	f7ff fd40 	bl	800a9d4 <disk_write>
 800af54:	4603      	mov	r3, r0
 800af56:	2b00      	cmp	r3, #0
 800af58:	d002      	beq.n	800af60 <sync_window+0x38>
			res = FR_DISK_ERR;
 800af5a:	2301      	movs	r3, #1
 800af5c:	73fb      	strb	r3, [r7, #15]
 800af5e:	e022      	b.n	800afa6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2200      	movs	r2, #0
 800af64:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af6a:	697a      	ldr	r2, [r7, #20]
 800af6c:	1ad2      	subs	r2, r2, r3
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	69db      	ldr	r3, [r3, #28]
 800af72:	429a      	cmp	r2, r3
 800af74:	d217      	bcs.n	800afa6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	789b      	ldrb	r3, [r3, #2]
 800af7a:	613b      	str	r3, [r7, #16]
 800af7c:	e010      	b.n	800afa0 <sync_window+0x78>
					wsect += fs->fsize;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	69db      	ldr	r3, [r3, #28]
 800af82:	697a      	ldr	r2, [r7, #20]
 800af84:	4413      	add	r3, r2
 800af86:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	7858      	ldrb	r0, [r3, #1]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800af92:	2301      	movs	r3, #1
 800af94:	697a      	ldr	r2, [r7, #20]
 800af96:	f7ff fd1d 	bl	800a9d4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	3b01      	subs	r3, #1
 800af9e:	613b      	str	r3, [r7, #16]
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d8eb      	bhi.n	800af7e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800afa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3718      	adds	r7, #24
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b084      	sub	sp, #16
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800afba:	2300      	movs	r3, #0
 800afbc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afc2:	683a      	ldr	r2, [r7, #0]
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d01b      	beq.n	800b000 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f7ff ffad 	bl	800af28 <sync_window>
 800afce:	4603      	mov	r3, r0
 800afd0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800afd2:	7bfb      	ldrb	r3, [r7, #15]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d113      	bne.n	800b000 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	7858      	ldrb	r0, [r3, #1]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800afe2:	2301      	movs	r3, #1
 800afe4:	683a      	ldr	r2, [r7, #0]
 800afe6:	f7ff fcd5 	bl	800a994 <disk_read>
 800afea:	4603      	mov	r3, r0
 800afec:	2b00      	cmp	r3, #0
 800afee:	d004      	beq.n	800affa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800aff0:	f04f 33ff 	mov.w	r3, #4294967295
 800aff4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800aff6:	2301      	movs	r3, #1
 800aff8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	683a      	ldr	r2, [r7, #0]
 800affe:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800b000:	7bfb      	ldrb	r3, [r7, #15]
}
 800b002:	4618      	mov	r0, r3
 800b004:	3710      	adds	r7, #16
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
	...

0800b00c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f7ff ff87 	bl	800af28 <sync_window>
 800b01a:	4603      	mov	r3, r0
 800b01c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b01e:	7bfb      	ldrb	r3, [r7, #15]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d158      	bne.n	800b0d6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	2b03      	cmp	r3, #3
 800b02a:	d148      	bne.n	800b0be <sync_fs+0xb2>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	791b      	ldrb	r3, [r3, #4]
 800b030:	2b01      	cmp	r3, #1
 800b032:	d144      	bne.n	800b0be <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	3334      	adds	r3, #52	; 0x34
 800b038:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b03c:	2100      	movs	r1, #0
 800b03e:	4618      	mov	r0, r3
 800b040:	f7ff fda9 	bl	800ab96 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	3334      	adds	r3, #52	; 0x34
 800b048:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b04c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b050:	4618      	mov	r0, r3
 800b052:	f7ff fd38 	bl	800aac6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	3334      	adds	r3, #52	; 0x34
 800b05a:	4921      	ldr	r1, [pc, #132]	; (800b0e0 <sync_fs+0xd4>)
 800b05c:	4618      	mov	r0, r3
 800b05e:	f7ff fd4d 	bl	800aafc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	3334      	adds	r3, #52	; 0x34
 800b066:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b06a:	491e      	ldr	r1, [pc, #120]	; (800b0e4 <sync_fs+0xd8>)
 800b06c:	4618      	mov	r0, r3
 800b06e:	f7ff fd45 	bl	800aafc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	3334      	adds	r3, #52	; 0x34
 800b076:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	695b      	ldr	r3, [r3, #20]
 800b07e:	4619      	mov	r1, r3
 800b080:	4610      	mov	r0, r2
 800b082:	f7ff fd3b 	bl	800aafc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	3334      	adds	r3, #52	; 0x34
 800b08a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	691b      	ldr	r3, [r3, #16]
 800b092:	4619      	mov	r1, r3
 800b094:	4610      	mov	r0, r2
 800b096:	f7ff fd31 	bl	800aafc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6a1b      	ldr	r3, [r3, #32]
 800b09e:	1c5a      	adds	r2, r3, #1
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	7858      	ldrb	r0, [r3, #1]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	f7ff fc8e 	bl	800a9d4 <disk_write>
			fs->fsi_flag = 0;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	785b      	ldrb	r3, [r3, #1]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	2100      	movs	r1, #0
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7ff fca4 	bl	800aa14 <disk_ioctl>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d001      	beq.n	800b0d6 <sync_fs+0xca>
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b0d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3710      	adds	r7, #16
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	41615252 	.word	0x41615252
 800b0e4:	61417272 	.word	0x61417272

0800b0e8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b083      	sub	sp, #12
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	3b02      	subs	r3, #2
 800b0f6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	699b      	ldr	r3, [r3, #24]
 800b0fc:	3b02      	subs	r3, #2
 800b0fe:	683a      	ldr	r2, [r7, #0]
 800b100:	429a      	cmp	r2, r3
 800b102:	d301      	bcc.n	800b108 <clust2sect+0x20>
 800b104:	2300      	movs	r3, #0
 800b106:	e008      	b.n	800b11a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	895b      	ldrh	r3, [r3, #10]
 800b10c:	461a      	mov	r2, r3
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	fb03 f202 	mul.w	r2, r3, r2
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b118:	4413      	add	r3, r2
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	370c      	adds	r7, #12
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr

0800b126 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b126:	b580      	push	{r7, lr}
 800b128:	b086      	sub	sp, #24
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
 800b12e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	2b01      	cmp	r3, #1
 800b13a:	d904      	bls.n	800b146 <get_fat+0x20>
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	699b      	ldr	r3, [r3, #24]
 800b140:	683a      	ldr	r2, [r7, #0]
 800b142:	429a      	cmp	r2, r3
 800b144:	d302      	bcc.n	800b14c <get_fat+0x26>
		val = 1;	/* Internal error */
 800b146:	2301      	movs	r3, #1
 800b148:	617b      	str	r3, [r7, #20]
 800b14a:	e08f      	b.n	800b26c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b14c:	f04f 33ff 	mov.w	r3, #4294967295
 800b150:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	2b03      	cmp	r3, #3
 800b158:	d062      	beq.n	800b220 <get_fat+0xfa>
 800b15a:	2b03      	cmp	r3, #3
 800b15c:	dc7c      	bgt.n	800b258 <get_fat+0x132>
 800b15e:	2b01      	cmp	r3, #1
 800b160:	d002      	beq.n	800b168 <get_fat+0x42>
 800b162:	2b02      	cmp	r3, #2
 800b164:	d042      	beq.n	800b1ec <get_fat+0xc6>
 800b166:	e077      	b.n	800b258 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	60fb      	str	r3, [r7, #12]
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	085b      	lsrs	r3, r3, #1
 800b170:	68fa      	ldr	r2, [r7, #12]
 800b172:	4413      	add	r3, r2
 800b174:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	0a5b      	lsrs	r3, r3, #9
 800b17e:	4413      	add	r3, r2
 800b180:	4619      	mov	r1, r3
 800b182:	6938      	ldr	r0, [r7, #16]
 800b184:	f7ff ff14 	bl	800afb0 <move_window>
 800b188:	4603      	mov	r3, r0
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d167      	bne.n	800b25e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	1c5a      	adds	r2, r3, #1
 800b192:	60fa      	str	r2, [r7, #12]
 800b194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b198:	693a      	ldr	r2, [r7, #16]
 800b19a:	4413      	add	r3, r2
 800b19c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b1a0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	0a5b      	lsrs	r3, r3, #9
 800b1aa:	4413      	add	r3, r2
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	6938      	ldr	r0, [r7, #16]
 800b1b0:	f7ff fefe 	bl	800afb0 <move_window>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d153      	bne.n	800b262 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1c0:	693a      	ldr	r2, [r7, #16]
 800b1c2:	4413      	add	r3, r2
 800b1c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b1c8:	021b      	lsls	r3, r3, #8
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	f003 0301 	and.w	r3, r3, #1
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d002      	beq.n	800b1e2 <get_fat+0xbc>
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	091b      	lsrs	r3, r3, #4
 800b1e0:	e002      	b.n	800b1e8 <get_fat+0xc2>
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b1e8:	617b      	str	r3, [r7, #20]
			break;
 800b1ea:	e03f      	b.n	800b26c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	0a1b      	lsrs	r3, r3, #8
 800b1f4:	4413      	add	r3, r2
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	6938      	ldr	r0, [r7, #16]
 800b1fa:	f7ff fed9 	bl	800afb0 <move_window>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b00      	cmp	r3, #0
 800b202:	d130      	bne.n	800b266 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	005b      	lsls	r3, r3, #1
 800b20e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b212:	4413      	add	r3, r2
 800b214:	4618      	mov	r0, r3
 800b216:	f7ff fc1b 	bl	800aa50 <ld_word>
 800b21a:	4603      	mov	r3, r0
 800b21c:	617b      	str	r3, [r7, #20]
			break;
 800b21e:	e025      	b.n	800b26c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	09db      	lsrs	r3, r3, #7
 800b228:	4413      	add	r3, r2
 800b22a:	4619      	mov	r1, r3
 800b22c:	6938      	ldr	r0, [r7, #16]
 800b22e:	f7ff febf 	bl	800afb0 <move_window>
 800b232:	4603      	mov	r3, r0
 800b234:	2b00      	cmp	r3, #0
 800b236:	d118      	bne.n	800b26a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	009b      	lsls	r3, r3, #2
 800b242:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b246:	4413      	add	r3, r2
 800b248:	4618      	mov	r0, r3
 800b24a:	f7ff fc19 	bl	800aa80 <ld_dword>
 800b24e:	4603      	mov	r3, r0
 800b250:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b254:	617b      	str	r3, [r7, #20]
			break;
 800b256:	e009      	b.n	800b26c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b258:	2301      	movs	r3, #1
 800b25a:	617b      	str	r3, [r7, #20]
 800b25c:	e006      	b.n	800b26c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b25e:	bf00      	nop
 800b260:	e004      	b.n	800b26c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b262:	bf00      	nop
 800b264:	e002      	b.n	800b26c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b266:	bf00      	nop
 800b268:	e000      	b.n	800b26c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b26a:	bf00      	nop
		}
	}

	return val;
 800b26c:	697b      	ldr	r3, [r7, #20]
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3718      	adds	r7, #24
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}

0800b276 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b276:	b590      	push	{r4, r7, lr}
 800b278:	b089      	sub	sp, #36	; 0x24
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	60f8      	str	r0, [r7, #12]
 800b27e:	60b9      	str	r1, [r7, #8]
 800b280:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b282:	2302      	movs	r3, #2
 800b284:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	2b01      	cmp	r3, #1
 800b28a:	f240 80d2 	bls.w	800b432 <put_fat+0x1bc>
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	699b      	ldr	r3, [r3, #24]
 800b292:	68ba      	ldr	r2, [r7, #8]
 800b294:	429a      	cmp	r2, r3
 800b296:	f080 80cc 	bcs.w	800b432 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	2b03      	cmp	r3, #3
 800b2a0:	f000 8096 	beq.w	800b3d0 <put_fat+0x15a>
 800b2a4:	2b03      	cmp	r3, #3
 800b2a6:	f300 80cd 	bgt.w	800b444 <put_fat+0x1ce>
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d002      	beq.n	800b2b4 <put_fat+0x3e>
 800b2ae:	2b02      	cmp	r3, #2
 800b2b0:	d06e      	beq.n	800b390 <put_fat+0x11a>
 800b2b2:	e0c7      	b.n	800b444 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	61bb      	str	r3, [r7, #24]
 800b2b8:	69bb      	ldr	r3, [r7, #24]
 800b2ba:	085b      	lsrs	r3, r3, #1
 800b2bc:	69ba      	ldr	r2, [r7, #24]
 800b2be:	4413      	add	r3, r2
 800b2c0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2c6:	69bb      	ldr	r3, [r7, #24]
 800b2c8:	0a5b      	lsrs	r3, r3, #9
 800b2ca:	4413      	add	r3, r2
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	68f8      	ldr	r0, [r7, #12]
 800b2d0:	f7ff fe6e 	bl	800afb0 <move_window>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b2d8:	7ffb      	ldrb	r3, [r7, #31]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	f040 80ab 	bne.w	800b436 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b2e6:	69bb      	ldr	r3, [r7, #24]
 800b2e8:	1c59      	adds	r1, r3, #1
 800b2ea:	61b9      	str	r1, [r7, #24]
 800b2ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2f0:	4413      	add	r3, r2
 800b2f2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	f003 0301 	and.w	r3, r3, #1
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d00d      	beq.n	800b31a <put_fat+0xa4>
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	b25b      	sxtb	r3, r3
 800b304:	f003 030f 	and.w	r3, r3, #15
 800b308:	b25a      	sxtb	r2, r3
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	b2db      	uxtb	r3, r3
 800b30e:	011b      	lsls	r3, r3, #4
 800b310:	b25b      	sxtb	r3, r3
 800b312:	4313      	orrs	r3, r2
 800b314:	b25b      	sxtb	r3, r3
 800b316:	b2db      	uxtb	r3, r3
 800b318:	e001      	b.n	800b31e <put_fat+0xa8>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	b2db      	uxtb	r3, r3
 800b31e:	697a      	ldr	r2, [r7, #20]
 800b320:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	2201      	movs	r2, #1
 800b326:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b32c:	69bb      	ldr	r3, [r7, #24]
 800b32e:	0a5b      	lsrs	r3, r3, #9
 800b330:	4413      	add	r3, r2
 800b332:	4619      	mov	r1, r3
 800b334:	68f8      	ldr	r0, [r7, #12]
 800b336:	f7ff fe3b 	bl	800afb0 <move_window>
 800b33a:	4603      	mov	r3, r0
 800b33c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b33e:	7ffb      	ldrb	r3, [r7, #31]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d17a      	bne.n	800b43a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b34a:	69bb      	ldr	r3, [r7, #24]
 800b34c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b350:	4413      	add	r3, r2
 800b352:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	f003 0301 	and.w	r3, r3, #1
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d003      	beq.n	800b366 <put_fat+0xf0>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	091b      	lsrs	r3, r3, #4
 800b362:	b2db      	uxtb	r3, r3
 800b364:	e00e      	b.n	800b384 <put_fat+0x10e>
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	781b      	ldrb	r3, [r3, #0]
 800b36a:	b25b      	sxtb	r3, r3
 800b36c:	f023 030f 	bic.w	r3, r3, #15
 800b370:	b25a      	sxtb	r2, r3
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	0a1b      	lsrs	r3, r3, #8
 800b376:	b25b      	sxtb	r3, r3
 800b378:	f003 030f 	and.w	r3, r3, #15
 800b37c:	b25b      	sxtb	r3, r3
 800b37e:	4313      	orrs	r3, r2
 800b380:	b25b      	sxtb	r3, r3
 800b382:	b2db      	uxtb	r3, r3
 800b384:	697a      	ldr	r2, [r7, #20]
 800b386:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2201      	movs	r2, #1
 800b38c:	70da      	strb	r2, [r3, #3]
			break;
 800b38e:	e059      	b.n	800b444 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	0a1b      	lsrs	r3, r3, #8
 800b398:	4413      	add	r3, r2
 800b39a:	4619      	mov	r1, r3
 800b39c:	68f8      	ldr	r0, [r7, #12]
 800b39e:	f7ff fe07 	bl	800afb0 <move_window>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b3a6:	7ffb      	ldrb	r3, [r7, #31]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d148      	bne.n	800b43e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	005b      	lsls	r3, r3, #1
 800b3b6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b3ba:	4413      	add	r3, r2
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	b292      	uxth	r2, r2
 800b3c0:	4611      	mov	r1, r2
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7ff fb7f 	bl	800aac6 <st_word>
			fs->wflag = 1;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	70da      	strb	r2, [r3, #3]
			break;
 800b3ce:	e039      	b.n	800b444 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	09db      	lsrs	r3, r3, #7
 800b3d8:	4413      	add	r3, r2
 800b3da:	4619      	mov	r1, r3
 800b3dc:	68f8      	ldr	r0, [r7, #12]
 800b3de:	f7ff fde7 	bl	800afb0 <move_window>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b3e6:	7ffb      	ldrb	r3, [r7, #31]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d12a      	bne.n	800b442 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	009b      	lsls	r3, r3, #2
 800b3fc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b400:	4413      	add	r3, r2
 800b402:	4618      	mov	r0, r3
 800b404:	f7ff fb3c 	bl	800aa80 <ld_dword>
 800b408:	4603      	mov	r3, r0
 800b40a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b40e:	4323      	orrs	r3, r4
 800b410:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	009b      	lsls	r3, r3, #2
 800b41c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b420:	4413      	add	r3, r2
 800b422:	6879      	ldr	r1, [r7, #4]
 800b424:	4618      	mov	r0, r3
 800b426:	f7ff fb69 	bl	800aafc <st_dword>
			fs->wflag = 1;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2201      	movs	r2, #1
 800b42e:	70da      	strb	r2, [r3, #3]
			break;
 800b430:	e008      	b.n	800b444 <put_fat+0x1ce>
		}
	}
 800b432:	bf00      	nop
 800b434:	e006      	b.n	800b444 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b436:	bf00      	nop
 800b438:	e004      	b.n	800b444 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b43a:	bf00      	nop
 800b43c:	e002      	b.n	800b444 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b43e:	bf00      	nop
 800b440:	e000      	b.n	800b444 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b442:	bf00      	nop
	return res;
 800b444:	7ffb      	ldrb	r3, [r7, #31]
}
 800b446:	4618      	mov	r0, r3
 800b448:	3724      	adds	r7, #36	; 0x24
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd90      	pop	{r4, r7, pc}

0800b44e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b44e:	b580      	push	{r7, lr}
 800b450:	b088      	sub	sp, #32
 800b452:	af00      	add	r7, sp, #0
 800b454:	60f8      	str	r0, [r7, #12]
 800b456:	60b9      	str	r1, [r7, #8]
 800b458:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b45a:	2300      	movs	r3, #0
 800b45c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	2b01      	cmp	r3, #1
 800b468:	d904      	bls.n	800b474 <remove_chain+0x26>
 800b46a:	69bb      	ldr	r3, [r7, #24]
 800b46c:	699b      	ldr	r3, [r3, #24]
 800b46e:	68ba      	ldr	r2, [r7, #8]
 800b470:	429a      	cmp	r2, r3
 800b472:	d301      	bcc.n	800b478 <remove_chain+0x2a>
 800b474:	2302      	movs	r3, #2
 800b476:	e04b      	b.n	800b510 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d00c      	beq.n	800b498 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b47e:	f04f 32ff 	mov.w	r2, #4294967295
 800b482:	6879      	ldr	r1, [r7, #4]
 800b484:	69b8      	ldr	r0, [r7, #24]
 800b486:	f7ff fef6 	bl	800b276 <put_fat>
 800b48a:	4603      	mov	r3, r0
 800b48c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b48e:	7ffb      	ldrb	r3, [r7, #31]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d001      	beq.n	800b498 <remove_chain+0x4a>
 800b494:	7ffb      	ldrb	r3, [r7, #31]
 800b496:	e03b      	b.n	800b510 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b498:	68b9      	ldr	r1, [r7, #8]
 800b49a:	68f8      	ldr	r0, [r7, #12]
 800b49c:	f7ff fe43 	bl	800b126 <get_fat>
 800b4a0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d031      	beq.n	800b50c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d101      	bne.n	800b4b2 <remove_chain+0x64>
 800b4ae:	2302      	movs	r3, #2
 800b4b0:	e02e      	b.n	800b510 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4b8:	d101      	bne.n	800b4be <remove_chain+0x70>
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e028      	b.n	800b510 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b4be:	2200      	movs	r2, #0
 800b4c0:	68b9      	ldr	r1, [r7, #8]
 800b4c2:	69b8      	ldr	r0, [r7, #24]
 800b4c4:	f7ff fed7 	bl	800b276 <put_fat>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b4cc:	7ffb      	ldrb	r3, [r7, #31]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d001      	beq.n	800b4d6 <remove_chain+0x88>
 800b4d2:	7ffb      	ldrb	r3, [r7, #31]
 800b4d4:	e01c      	b.n	800b510 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b4d6:	69bb      	ldr	r3, [r7, #24]
 800b4d8:	695a      	ldr	r2, [r3, #20]
 800b4da:	69bb      	ldr	r3, [r7, #24]
 800b4dc:	699b      	ldr	r3, [r3, #24]
 800b4de:	3b02      	subs	r3, #2
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d20b      	bcs.n	800b4fc <remove_chain+0xae>
			fs->free_clst++;
 800b4e4:	69bb      	ldr	r3, [r7, #24]
 800b4e6:	695b      	ldr	r3, [r3, #20]
 800b4e8:	1c5a      	adds	r2, r3, #1
 800b4ea:	69bb      	ldr	r3, [r7, #24]
 800b4ec:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800b4ee:	69bb      	ldr	r3, [r7, #24]
 800b4f0:	791b      	ldrb	r3, [r3, #4]
 800b4f2:	f043 0301 	orr.w	r3, r3, #1
 800b4f6:	b2da      	uxtb	r2, r3
 800b4f8:	69bb      	ldr	r3, [r7, #24]
 800b4fa:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b500:	69bb      	ldr	r3, [r7, #24]
 800b502:	699b      	ldr	r3, [r3, #24]
 800b504:	68ba      	ldr	r2, [r7, #8]
 800b506:	429a      	cmp	r2, r3
 800b508:	d3c6      	bcc.n	800b498 <remove_chain+0x4a>
 800b50a:	e000      	b.n	800b50e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b50c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b50e:	2300      	movs	r3, #0
}
 800b510:	4618      	mov	r0, r3
 800b512:	3720      	adds	r7, #32
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b088      	sub	sp, #32
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d10d      	bne.n	800b54a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	691b      	ldr	r3, [r3, #16]
 800b532:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b534:	69bb      	ldr	r3, [r7, #24]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d004      	beq.n	800b544 <create_chain+0x2c>
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	699b      	ldr	r3, [r3, #24]
 800b53e:	69ba      	ldr	r2, [r7, #24]
 800b540:	429a      	cmp	r2, r3
 800b542:	d31b      	bcc.n	800b57c <create_chain+0x64>
 800b544:	2301      	movs	r3, #1
 800b546:	61bb      	str	r3, [r7, #24]
 800b548:	e018      	b.n	800b57c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b54a:	6839      	ldr	r1, [r7, #0]
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f7ff fdea 	bl	800b126 <get_fat>
 800b552:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2b01      	cmp	r3, #1
 800b558:	d801      	bhi.n	800b55e <create_chain+0x46>
 800b55a:	2301      	movs	r3, #1
 800b55c:	e070      	b.n	800b640 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b564:	d101      	bne.n	800b56a <create_chain+0x52>
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	e06a      	b.n	800b640 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	699b      	ldr	r3, [r3, #24]
 800b56e:	68fa      	ldr	r2, [r7, #12]
 800b570:	429a      	cmp	r2, r3
 800b572:	d201      	bcs.n	800b578 <create_chain+0x60>
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	e063      	b.n	800b640 <create_chain+0x128>
		scl = clst;
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b57c:	69bb      	ldr	r3, [r7, #24]
 800b57e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b580:	69fb      	ldr	r3, [r7, #28]
 800b582:	3301      	adds	r3, #1
 800b584:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	699b      	ldr	r3, [r3, #24]
 800b58a:	69fa      	ldr	r2, [r7, #28]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d307      	bcc.n	800b5a0 <create_chain+0x88>
				ncl = 2;
 800b590:	2302      	movs	r3, #2
 800b592:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b594:	69fa      	ldr	r2, [r7, #28]
 800b596:	69bb      	ldr	r3, [r7, #24]
 800b598:	429a      	cmp	r2, r3
 800b59a:	d901      	bls.n	800b5a0 <create_chain+0x88>
 800b59c:	2300      	movs	r3, #0
 800b59e:	e04f      	b.n	800b640 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b5a0:	69f9      	ldr	r1, [r7, #28]
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f7ff fdbf 	bl	800b126 <get_fat>
 800b5a8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d00e      	beq.n	800b5ce <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d003      	beq.n	800b5be <create_chain+0xa6>
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5bc:	d101      	bne.n	800b5c2 <create_chain+0xaa>
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	e03e      	b.n	800b640 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b5c2:	69fa      	ldr	r2, [r7, #28]
 800b5c4:	69bb      	ldr	r3, [r7, #24]
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d1da      	bne.n	800b580 <create_chain+0x68>
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	e038      	b.n	800b640 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b5ce:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b5d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b5d4:	69f9      	ldr	r1, [r7, #28]
 800b5d6:	6938      	ldr	r0, [r7, #16]
 800b5d8:	f7ff fe4d 	bl	800b276 <put_fat>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b5e0:	7dfb      	ldrb	r3, [r7, #23]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d109      	bne.n	800b5fa <create_chain+0xe2>
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d006      	beq.n	800b5fa <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b5ec:	69fa      	ldr	r2, [r7, #28]
 800b5ee:	6839      	ldr	r1, [r7, #0]
 800b5f0:	6938      	ldr	r0, [r7, #16]
 800b5f2:	f7ff fe40 	bl	800b276 <put_fat>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b5fa:	7dfb      	ldrb	r3, [r7, #23]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d116      	bne.n	800b62e <create_chain+0x116>
		fs->last_clst = ncl;
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	69fa      	ldr	r2, [r7, #28]
 800b604:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	695a      	ldr	r2, [r3, #20]
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	699b      	ldr	r3, [r3, #24]
 800b60e:	3b02      	subs	r3, #2
 800b610:	429a      	cmp	r2, r3
 800b612:	d804      	bhi.n	800b61e <create_chain+0x106>
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	695b      	ldr	r3, [r3, #20]
 800b618:	1e5a      	subs	r2, r3, #1
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	791b      	ldrb	r3, [r3, #4]
 800b622:	f043 0301 	orr.w	r3, r3, #1
 800b626:	b2da      	uxtb	r2, r3
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	711a      	strb	r2, [r3, #4]
 800b62c:	e007      	b.n	800b63e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b62e:	7dfb      	ldrb	r3, [r7, #23]
 800b630:	2b01      	cmp	r3, #1
 800b632:	d102      	bne.n	800b63a <create_chain+0x122>
 800b634:	f04f 33ff 	mov.w	r3, #4294967295
 800b638:	e000      	b.n	800b63c <create_chain+0x124>
 800b63a:	2301      	movs	r3, #1
 800b63c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b63e:	69fb      	ldr	r3, [r7, #28]
}
 800b640:	4618      	mov	r0, r3
 800b642:	3720      	adds	r7, #32
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}

0800b648 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b648:	b480      	push	{r7}
 800b64a:	b087      	sub	sp, #28
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b65c:	3304      	adds	r3, #4
 800b65e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	0a5b      	lsrs	r3, r3, #9
 800b664:	68fa      	ldr	r2, [r7, #12]
 800b666:	8952      	ldrh	r2, [r2, #10]
 800b668:	fbb3 f3f2 	udiv	r3, r3, r2
 800b66c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	1d1a      	adds	r2, r3, #4
 800b672:	613a      	str	r2, [r7, #16]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d101      	bne.n	800b682 <clmt_clust+0x3a>
 800b67e:	2300      	movs	r3, #0
 800b680:	e010      	b.n	800b6a4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b682:	697a      	ldr	r2, [r7, #20]
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	429a      	cmp	r2, r3
 800b688:	d307      	bcc.n	800b69a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b68a:	697a      	ldr	r2, [r7, #20]
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	1ad3      	subs	r3, r2, r3
 800b690:	617b      	str	r3, [r7, #20]
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	3304      	adds	r3, #4
 800b696:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b698:	e7e9      	b.n	800b66e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b69a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	681a      	ldr	r2, [r3, #0]
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	4413      	add	r3, r2
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	371c      	adds	r7, #28
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr

0800b6b0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b086      	sub	sp, #24
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b6c6:	d204      	bcs.n	800b6d2 <dir_sdi+0x22>
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	f003 031f 	and.w	r3, r3, #31
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d001      	beq.n	800b6d6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b6d2:	2302      	movs	r3, #2
 800b6d4:	e063      	b.n	800b79e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	683a      	ldr	r2, [r7, #0]
 800b6da:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	689b      	ldr	r3, [r3, #8]
 800b6e0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d106      	bne.n	800b6f6 <dir_sdi+0x46>
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	781b      	ldrb	r3, [r3, #0]
 800b6ec:	2b02      	cmp	r3, #2
 800b6ee:	d902      	bls.n	800b6f6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6f4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d10c      	bne.n	800b716 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	095b      	lsrs	r3, r3, #5
 800b700:	693a      	ldr	r2, [r7, #16]
 800b702:	8912      	ldrh	r2, [r2, #8]
 800b704:	4293      	cmp	r3, r2
 800b706:	d301      	bcc.n	800b70c <dir_sdi+0x5c>
 800b708:	2302      	movs	r3, #2
 800b70a:	e048      	b.n	800b79e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	61da      	str	r2, [r3, #28]
 800b714:	e029      	b.n	800b76a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	895b      	ldrh	r3, [r3, #10]
 800b71a:	025b      	lsls	r3, r3, #9
 800b71c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b71e:	e019      	b.n	800b754 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6979      	ldr	r1, [r7, #20]
 800b724:	4618      	mov	r0, r3
 800b726:	f7ff fcfe 	bl	800b126 <get_fat>
 800b72a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b732:	d101      	bne.n	800b738 <dir_sdi+0x88>
 800b734:	2301      	movs	r3, #1
 800b736:	e032      	b.n	800b79e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	d904      	bls.n	800b748 <dir_sdi+0x98>
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	699b      	ldr	r3, [r3, #24]
 800b742:	697a      	ldr	r2, [r7, #20]
 800b744:	429a      	cmp	r2, r3
 800b746:	d301      	bcc.n	800b74c <dir_sdi+0x9c>
 800b748:	2302      	movs	r3, #2
 800b74a:	e028      	b.n	800b79e <dir_sdi+0xee>
			ofs -= csz;
 800b74c:	683a      	ldr	r2, [r7, #0]
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	1ad3      	subs	r3, r2, r3
 800b752:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b754:	683a      	ldr	r2, [r7, #0]
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d2e1      	bcs.n	800b720 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b75c:	6979      	ldr	r1, [r7, #20]
 800b75e:	6938      	ldr	r0, [r7, #16]
 800b760:	f7ff fcc2 	bl	800b0e8 <clust2sect>
 800b764:	4602      	mov	r2, r0
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	697a      	ldr	r2, [r7, #20]
 800b76e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	69db      	ldr	r3, [r3, #28]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d101      	bne.n	800b77c <dir_sdi+0xcc>
 800b778:	2302      	movs	r3, #2
 800b77a:	e010      	b.n	800b79e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	69da      	ldr	r2, [r3, #28]
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	0a5b      	lsrs	r3, r3, #9
 800b784:	441a      	add	r2, r3
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b796:	441a      	add	r2, r3
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b79c:	2300      	movs	r3, #0
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3718      	adds	r7, #24
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}

0800b7a6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b086      	sub	sp, #24
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
 800b7ae:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	695b      	ldr	r3, [r3, #20]
 800b7ba:	3320      	adds	r3, #32
 800b7bc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	69db      	ldr	r3, [r3, #28]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d003      	beq.n	800b7ce <dir_next+0x28>
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b7cc:	d301      	bcc.n	800b7d2 <dir_next+0x2c>
 800b7ce:	2304      	movs	r3, #4
 800b7d0:	e0aa      	b.n	800b928 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	f040 8098 	bne.w	800b90e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	69db      	ldr	r3, [r3, #28]
 800b7e2:	1c5a      	adds	r2, r3, #1
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	699b      	ldr	r3, [r3, #24]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d10b      	bne.n	800b808 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	095b      	lsrs	r3, r3, #5
 800b7f4:	68fa      	ldr	r2, [r7, #12]
 800b7f6:	8912      	ldrh	r2, [r2, #8]
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	f0c0 8088 	bcc.w	800b90e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2200      	movs	r2, #0
 800b802:	61da      	str	r2, [r3, #28]
 800b804:	2304      	movs	r3, #4
 800b806:	e08f      	b.n	800b928 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	0a5b      	lsrs	r3, r3, #9
 800b80c:	68fa      	ldr	r2, [r7, #12]
 800b80e:	8952      	ldrh	r2, [r2, #10]
 800b810:	3a01      	subs	r2, #1
 800b812:	4013      	ands	r3, r2
 800b814:	2b00      	cmp	r3, #0
 800b816:	d17a      	bne.n	800b90e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b818:	687a      	ldr	r2, [r7, #4]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	699b      	ldr	r3, [r3, #24]
 800b81e:	4619      	mov	r1, r3
 800b820:	4610      	mov	r0, r2
 800b822:	f7ff fc80 	bl	800b126 <get_fat>
 800b826:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	d801      	bhi.n	800b832 <dir_next+0x8c>
 800b82e:	2302      	movs	r3, #2
 800b830:	e07a      	b.n	800b928 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b838:	d101      	bne.n	800b83e <dir_next+0x98>
 800b83a:	2301      	movs	r3, #1
 800b83c:	e074      	b.n	800b928 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	699b      	ldr	r3, [r3, #24]
 800b842:	697a      	ldr	r2, [r7, #20]
 800b844:	429a      	cmp	r2, r3
 800b846:	d358      	bcc.n	800b8fa <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d104      	bne.n	800b858 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2200      	movs	r2, #0
 800b852:	61da      	str	r2, [r3, #28]
 800b854:	2304      	movs	r3, #4
 800b856:	e067      	b.n	800b928 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b858:	687a      	ldr	r2, [r7, #4]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	699b      	ldr	r3, [r3, #24]
 800b85e:	4619      	mov	r1, r3
 800b860:	4610      	mov	r0, r2
 800b862:	f7ff fe59 	bl	800b518 <create_chain>
 800b866:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d101      	bne.n	800b872 <dir_next+0xcc>
 800b86e:	2307      	movs	r3, #7
 800b870:	e05a      	b.n	800b928 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	2b01      	cmp	r3, #1
 800b876:	d101      	bne.n	800b87c <dir_next+0xd6>
 800b878:	2302      	movs	r3, #2
 800b87a:	e055      	b.n	800b928 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b882:	d101      	bne.n	800b888 <dir_next+0xe2>
 800b884:	2301      	movs	r3, #1
 800b886:	e04f      	b.n	800b928 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b888:	68f8      	ldr	r0, [r7, #12]
 800b88a:	f7ff fb4d 	bl	800af28 <sync_window>
 800b88e:	4603      	mov	r3, r0
 800b890:	2b00      	cmp	r3, #0
 800b892:	d001      	beq.n	800b898 <dir_next+0xf2>
 800b894:	2301      	movs	r3, #1
 800b896:	e047      	b.n	800b928 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	3334      	adds	r3, #52	; 0x34
 800b89c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b8a0:	2100      	movs	r1, #0
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7ff f977 	bl	800ab96 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	613b      	str	r3, [r7, #16]
 800b8ac:	6979      	ldr	r1, [r7, #20]
 800b8ae:	68f8      	ldr	r0, [r7, #12]
 800b8b0:	f7ff fc1a 	bl	800b0e8 <clust2sect>
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	631a      	str	r2, [r3, #48]	; 0x30
 800b8ba:	e012      	b.n	800b8e2 <dir_next+0x13c>
						fs->wflag = 1;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2201      	movs	r2, #1
 800b8c0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b8c2:	68f8      	ldr	r0, [r7, #12]
 800b8c4:	f7ff fb30 	bl	800af28 <sync_window>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d001      	beq.n	800b8d2 <dir_next+0x12c>
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	e02a      	b.n	800b928 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	3301      	adds	r3, #1
 800b8d6:	613b      	str	r3, [r7, #16]
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8dc:	1c5a      	adds	r2, r3, #1
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	631a      	str	r2, [r3, #48]	; 0x30
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	895b      	ldrh	r3, [r3, #10]
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d3e6      	bcc.n	800b8bc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	1ad2      	subs	r2, r2, r3
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	697a      	ldr	r2, [r7, #20]
 800b8fe:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b900:	6979      	ldr	r1, [r7, #20]
 800b902:	68f8      	ldr	r0, [r7, #12]
 800b904:	f7ff fbf0 	bl	800b0e8 <clust2sect>
 800b908:	4602      	mov	r2, r0
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	68ba      	ldr	r2, [r7, #8]
 800b912:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b920:	441a      	add	r2, r3
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b926:	2300      	movs	r3, #0
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3718      	adds	r7, #24
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b086      	sub	sp, #24
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b940:	2100      	movs	r1, #0
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f7ff feb4 	bl	800b6b0 <dir_sdi>
 800b948:	4603      	mov	r3, r0
 800b94a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b94c:	7dfb      	ldrb	r3, [r7, #23]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d12b      	bne.n	800b9aa <dir_alloc+0x7a>
		n = 0;
 800b952:	2300      	movs	r3, #0
 800b954:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	69db      	ldr	r3, [r3, #28]
 800b95a:	4619      	mov	r1, r3
 800b95c:	68f8      	ldr	r0, [r7, #12]
 800b95e:	f7ff fb27 	bl	800afb0 <move_window>
 800b962:	4603      	mov	r3, r0
 800b964:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b966:	7dfb      	ldrb	r3, [r7, #23]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d11d      	bne.n	800b9a8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6a1b      	ldr	r3, [r3, #32]
 800b970:	781b      	ldrb	r3, [r3, #0]
 800b972:	2be5      	cmp	r3, #229	; 0xe5
 800b974:	d004      	beq.n	800b980 <dir_alloc+0x50>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6a1b      	ldr	r3, [r3, #32]
 800b97a:	781b      	ldrb	r3, [r3, #0]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d107      	bne.n	800b990 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	3301      	adds	r3, #1
 800b984:	613b      	str	r3, [r7, #16]
 800b986:	693a      	ldr	r2, [r7, #16]
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d102      	bne.n	800b994 <dir_alloc+0x64>
 800b98e:	e00c      	b.n	800b9aa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b990:	2300      	movs	r3, #0
 800b992:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b994:	2101      	movs	r1, #1
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f7ff ff05 	bl	800b7a6 <dir_next>
 800b99c:	4603      	mov	r3, r0
 800b99e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b9a0:	7dfb      	ldrb	r3, [r7, #23]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d0d7      	beq.n	800b956 <dir_alloc+0x26>
 800b9a6:	e000      	b.n	800b9aa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b9a8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b9aa:	7dfb      	ldrb	r3, [r7, #23]
 800b9ac:	2b04      	cmp	r3, #4
 800b9ae:	d101      	bne.n	800b9b4 <dir_alloc+0x84>
 800b9b0:	2307      	movs	r3, #7
 800b9b2:	75fb      	strb	r3, [r7, #23]
	return res;
 800b9b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3718      	adds	r7, #24
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}

0800b9be <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b084      	sub	sp, #16
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
 800b9c6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	331a      	adds	r3, #26
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f7ff f83f 	bl	800aa50 <ld_word>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	2b03      	cmp	r3, #3
 800b9dc:	d109      	bne.n	800b9f2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	3314      	adds	r3, #20
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f7ff f834 	bl	800aa50 <ld_word>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	041b      	lsls	r3, r3, #16
 800b9ec:	68fa      	ldr	r2, [r7, #12]
 800b9ee:	4313      	orrs	r3, r2
 800b9f0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3710      	adds	r7, #16
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b084      	sub	sp, #16
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	60f8      	str	r0, [r7, #12]
 800ba04:	60b9      	str	r1, [r7, #8]
 800ba06:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	331a      	adds	r3, #26
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	b292      	uxth	r2, r2
 800ba10:	4611      	mov	r1, r2
 800ba12:	4618      	mov	r0, r3
 800ba14:	f7ff f857 	bl	800aac6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	781b      	ldrb	r3, [r3, #0]
 800ba1c:	2b03      	cmp	r3, #3
 800ba1e:	d109      	bne.n	800ba34 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	f103 0214 	add.w	r2, r3, #20
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	0c1b      	lsrs	r3, r3, #16
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	4610      	mov	r0, r2
 800ba30:	f7ff f849 	bl	800aac6 <st_word>
	}
}
 800ba34:	bf00      	nop
 800ba36:	3710      	adds	r7, #16
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ba3c:	b590      	push	{r4, r7, lr}
 800ba3e:	b087      	sub	sp, #28
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	331a      	adds	r3, #26
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f7ff f800 	bl	800aa50 <ld_word>
 800ba50:	4603      	mov	r3, r0
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d001      	beq.n	800ba5a <cmp_lfn+0x1e>
 800ba56:	2300      	movs	r3, #0
 800ba58:	e059      	b.n	800bb0e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba62:	1e5a      	subs	r2, r3, #1
 800ba64:	4613      	mov	r3, r2
 800ba66:	005b      	lsls	r3, r3, #1
 800ba68:	4413      	add	r3, r2
 800ba6a:	009b      	lsls	r3, r3, #2
 800ba6c:	4413      	add	r3, r2
 800ba6e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ba70:	2301      	movs	r3, #1
 800ba72:	81fb      	strh	r3, [r7, #14]
 800ba74:	2300      	movs	r3, #0
 800ba76:	613b      	str	r3, [r7, #16]
 800ba78:	e033      	b.n	800bae2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ba7a:	4a27      	ldr	r2, [pc, #156]	; (800bb18 <cmp_lfn+0xdc>)
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	4413      	add	r3, r2
 800ba80:	781b      	ldrb	r3, [r3, #0]
 800ba82:	461a      	mov	r2, r3
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	4413      	add	r3, r2
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f7fe ffe1 	bl	800aa50 <ld_word>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ba92:	89fb      	ldrh	r3, [r7, #14]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d01a      	beq.n	800bace <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	2bfe      	cmp	r3, #254	; 0xfe
 800ba9c:	d812      	bhi.n	800bac4 <cmp_lfn+0x88>
 800ba9e:	89bb      	ldrh	r3, [r7, #12]
 800baa0:	4618      	mov	r0, r3
 800baa2:	f002 fbef 	bl	800e284 <ff_wtoupper>
 800baa6:	4603      	mov	r3, r0
 800baa8:	461c      	mov	r4, r3
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	1c5a      	adds	r2, r3, #1
 800baae:	617a      	str	r2, [r7, #20]
 800bab0:	005b      	lsls	r3, r3, #1
 800bab2:	687a      	ldr	r2, [r7, #4]
 800bab4:	4413      	add	r3, r2
 800bab6:	881b      	ldrh	r3, [r3, #0]
 800bab8:	4618      	mov	r0, r3
 800baba:	f002 fbe3 	bl	800e284 <ff_wtoupper>
 800babe:	4603      	mov	r3, r0
 800bac0:	429c      	cmp	r4, r3
 800bac2:	d001      	beq.n	800bac8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800bac4:	2300      	movs	r3, #0
 800bac6:	e022      	b.n	800bb0e <cmp_lfn+0xd2>
			}
			wc = uc;
 800bac8:	89bb      	ldrh	r3, [r7, #12]
 800baca:	81fb      	strh	r3, [r7, #14]
 800bacc:	e006      	b.n	800badc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bace:	89bb      	ldrh	r3, [r7, #12]
 800bad0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bad4:	4293      	cmp	r3, r2
 800bad6:	d001      	beq.n	800badc <cmp_lfn+0xa0>
 800bad8:	2300      	movs	r3, #0
 800bada:	e018      	b.n	800bb0e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	3301      	adds	r3, #1
 800bae0:	613b      	str	r3, [r7, #16]
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	2b0c      	cmp	r3, #12
 800bae6:	d9c8      	bls.n	800ba7a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	781b      	ldrb	r3, [r3, #0]
 800baec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d00b      	beq.n	800bb0c <cmp_lfn+0xd0>
 800baf4:	89fb      	ldrh	r3, [r7, #14]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d008      	beq.n	800bb0c <cmp_lfn+0xd0>
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	005b      	lsls	r3, r3, #1
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	4413      	add	r3, r2
 800bb02:	881b      	ldrh	r3, [r3, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d001      	beq.n	800bb0c <cmp_lfn+0xd0>
 800bb08:	2300      	movs	r3, #0
 800bb0a:	e000      	b.n	800bb0e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800bb0c:	2301      	movs	r3, #1
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	371c      	adds	r7, #28
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd90      	pop	{r4, r7, pc}
 800bb16:	bf00      	nop
 800bb18:	08010718 	.word	0x08010718

0800bb1c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b086      	sub	sp, #24
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	331a      	adds	r3, #26
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f7fe ff90 	bl	800aa50 <ld_word>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d001      	beq.n	800bb3a <pick_lfn+0x1e>
 800bb36:	2300      	movs	r3, #0
 800bb38:	e04d      	b.n	800bbd6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb42:	1e5a      	subs	r2, r3, #1
 800bb44:	4613      	mov	r3, r2
 800bb46:	005b      	lsls	r3, r3, #1
 800bb48:	4413      	add	r3, r2
 800bb4a:	009b      	lsls	r3, r3, #2
 800bb4c:	4413      	add	r3, r2
 800bb4e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bb50:	2301      	movs	r3, #1
 800bb52:	81fb      	strh	r3, [r7, #14]
 800bb54:	2300      	movs	r3, #0
 800bb56:	613b      	str	r3, [r7, #16]
 800bb58:	e028      	b.n	800bbac <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800bb5a:	4a21      	ldr	r2, [pc, #132]	; (800bbe0 <pick_lfn+0xc4>)
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	4413      	add	r3, r2
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	461a      	mov	r2, r3
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	4413      	add	r3, r2
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f7fe ff71 	bl	800aa50 <ld_word>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800bb72:	89fb      	ldrh	r3, [r7, #14]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d00f      	beq.n	800bb98 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	2bfe      	cmp	r3, #254	; 0xfe
 800bb7c:	d901      	bls.n	800bb82 <pick_lfn+0x66>
 800bb7e:	2300      	movs	r3, #0
 800bb80:	e029      	b.n	800bbd6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bb82:	89bb      	ldrh	r3, [r7, #12]
 800bb84:	81fb      	strh	r3, [r7, #14]
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	1c5a      	adds	r2, r3, #1
 800bb8a:	617a      	str	r2, [r7, #20]
 800bb8c:	005b      	lsls	r3, r3, #1
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	4413      	add	r3, r2
 800bb92:	89fa      	ldrh	r2, [r7, #14]
 800bb94:	801a      	strh	r2, [r3, #0]
 800bb96:	e006      	b.n	800bba6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bb98:	89bb      	ldrh	r3, [r7, #12]
 800bb9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	d001      	beq.n	800bba6 <pick_lfn+0x8a>
 800bba2:	2300      	movs	r3, #0
 800bba4:	e017      	b.n	800bbd6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	613b      	str	r3, [r7, #16]
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	2b0c      	cmp	r3, #12
 800bbb0:	d9d3      	bls.n	800bb5a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d00a      	beq.n	800bbd4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	2bfe      	cmp	r3, #254	; 0xfe
 800bbc2:	d901      	bls.n	800bbc8 <pick_lfn+0xac>
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	e006      	b.n	800bbd6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	005b      	lsls	r3, r3, #1
 800bbcc:	687a      	ldr	r2, [r7, #4]
 800bbce:	4413      	add	r3, r2
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800bbd4:	2301      	movs	r3, #1
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3718      	adds	r7, #24
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
 800bbde:	bf00      	nop
 800bbe0:	08010718 	.word	0x08010718

0800bbe4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b088      	sub	sp, #32
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	60f8      	str	r0, [r7, #12]
 800bbec:	60b9      	str	r1, [r7, #8]
 800bbee:	4611      	mov	r1, r2
 800bbf0:	461a      	mov	r2, r3
 800bbf2:	460b      	mov	r3, r1
 800bbf4:	71fb      	strb	r3, [r7, #7]
 800bbf6:	4613      	mov	r3, r2
 800bbf8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	330d      	adds	r3, #13
 800bbfe:	79ba      	ldrb	r2, [r7, #6]
 800bc00:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	330b      	adds	r3, #11
 800bc06:	220f      	movs	r2, #15
 800bc08:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	330c      	adds	r3, #12
 800bc0e:	2200      	movs	r2, #0
 800bc10:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	331a      	adds	r3, #26
 800bc16:	2100      	movs	r1, #0
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f7fe ff54 	bl	800aac6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800bc1e:	79fb      	ldrb	r3, [r7, #7]
 800bc20:	1e5a      	subs	r2, r3, #1
 800bc22:	4613      	mov	r3, r2
 800bc24:	005b      	lsls	r3, r3, #1
 800bc26:	4413      	add	r3, r2
 800bc28:	009b      	lsls	r3, r3, #2
 800bc2a:	4413      	add	r3, r2
 800bc2c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	82fb      	strh	r3, [r7, #22]
 800bc32:	2300      	movs	r3, #0
 800bc34:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800bc36:	8afb      	ldrh	r3, [r7, #22]
 800bc38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d007      	beq.n	800bc50 <put_lfn+0x6c>
 800bc40:	69fb      	ldr	r3, [r7, #28]
 800bc42:	1c5a      	adds	r2, r3, #1
 800bc44:	61fa      	str	r2, [r7, #28]
 800bc46:	005b      	lsls	r3, r3, #1
 800bc48:	68fa      	ldr	r2, [r7, #12]
 800bc4a:	4413      	add	r3, r2
 800bc4c:	881b      	ldrh	r3, [r3, #0]
 800bc4e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800bc50:	4a17      	ldr	r2, [pc, #92]	; (800bcb0 <put_lfn+0xcc>)
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	4413      	add	r3, r2
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	461a      	mov	r2, r3
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	4413      	add	r3, r2
 800bc5e:	8afa      	ldrh	r2, [r7, #22]
 800bc60:	4611      	mov	r1, r2
 800bc62:	4618      	mov	r0, r3
 800bc64:	f7fe ff2f 	bl	800aac6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800bc68:	8afb      	ldrh	r3, [r7, #22]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d102      	bne.n	800bc74 <put_lfn+0x90>
 800bc6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc72:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800bc74:	69bb      	ldr	r3, [r7, #24]
 800bc76:	3301      	adds	r3, #1
 800bc78:	61bb      	str	r3, [r7, #24]
 800bc7a:	69bb      	ldr	r3, [r7, #24]
 800bc7c:	2b0c      	cmp	r3, #12
 800bc7e:	d9da      	bls.n	800bc36 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800bc80:	8afb      	ldrh	r3, [r7, #22]
 800bc82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d006      	beq.n	800bc98 <put_lfn+0xb4>
 800bc8a:	69fb      	ldr	r3, [r7, #28]
 800bc8c:	005b      	lsls	r3, r3, #1
 800bc8e:	68fa      	ldr	r2, [r7, #12]
 800bc90:	4413      	add	r3, r2
 800bc92:	881b      	ldrh	r3, [r3, #0]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d103      	bne.n	800bca0 <put_lfn+0xbc>
 800bc98:	79fb      	ldrb	r3, [r7, #7]
 800bc9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc9e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	79fa      	ldrb	r2, [r7, #7]
 800bca4:	701a      	strb	r2, [r3, #0]
}
 800bca6:	bf00      	nop
 800bca8:	3720      	adds	r7, #32
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}
 800bcae:	bf00      	nop
 800bcb0:	08010718 	.word	0x08010718

0800bcb4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b08c      	sub	sp, #48	; 0x30
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	60f8      	str	r0, [r7, #12]
 800bcbc:	60b9      	str	r1, [r7, #8]
 800bcbe:	607a      	str	r2, [r7, #4]
 800bcc0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800bcc2:	220b      	movs	r2, #11
 800bcc4:	68b9      	ldr	r1, [r7, #8]
 800bcc6:	68f8      	ldr	r0, [r7, #12]
 800bcc8:	f7fe ff44 	bl	800ab54 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	2b05      	cmp	r3, #5
 800bcd0:	d92b      	bls.n	800bd2a <gen_numname+0x76>
		sr = seq;
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800bcd6:	e022      	b.n	800bd1e <gen_numname+0x6a>
			wc = *lfn++;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	1c9a      	adds	r2, r3, #2
 800bcdc:	607a      	str	r2, [r7, #4]
 800bcde:	881b      	ldrh	r3, [r3, #0]
 800bce0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800bce2:	2300      	movs	r3, #0
 800bce4:	62bb      	str	r3, [r7, #40]	; 0x28
 800bce6:	e017      	b.n	800bd18 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800bce8:	69fb      	ldr	r3, [r7, #28]
 800bcea:	005a      	lsls	r2, r3, #1
 800bcec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bcee:	f003 0301 	and.w	r3, r3, #1
 800bcf2:	4413      	add	r3, r2
 800bcf4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800bcf6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bcf8:	085b      	lsrs	r3, r3, #1
 800bcfa:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800bcfc:	69fb      	ldr	r3, [r7, #28]
 800bcfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d005      	beq.n	800bd12 <gen_numname+0x5e>
 800bd06:	69fb      	ldr	r3, [r7, #28]
 800bd08:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800bd0c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800bd10:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800bd12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd14:	3301      	adds	r3, #1
 800bd16:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1a:	2b0f      	cmp	r3, #15
 800bd1c:	d9e4      	bls.n	800bce8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	881b      	ldrh	r3, [r3, #0]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d1d8      	bne.n	800bcd8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800bd26:	69fb      	ldr	r3, [r7, #28]
 800bd28:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800bd2a:	2307      	movs	r3, #7
 800bd2c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	b2db      	uxtb	r3, r3
 800bd32:	f003 030f 	and.w	r3, r3, #15
 800bd36:	b2db      	uxtb	r3, r3
 800bd38:	3330      	adds	r3, #48	; 0x30
 800bd3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800bd3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd42:	2b39      	cmp	r3, #57	; 0x39
 800bd44:	d904      	bls.n	800bd50 <gen_numname+0x9c>
 800bd46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd4a:	3307      	adds	r3, #7
 800bd4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800bd50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd52:	1e5a      	subs	r2, r3, #1
 800bd54:	62ba      	str	r2, [r7, #40]	; 0x28
 800bd56:	3330      	adds	r3, #48	; 0x30
 800bd58:	443b      	add	r3, r7
 800bd5a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bd5e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	091b      	lsrs	r3, r3, #4
 800bd66:	603b      	str	r3, [r7, #0]
	} while (seq);
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d1df      	bne.n	800bd2e <gen_numname+0x7a>
	ns[i] = '~';
 800bd6e:	f107 0214 	add.w	r2, r7, #20
 800bd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd74:	4413      	add	r3, r2
 800bd76:	227e      	movs	r2, #126	; 0x7e
 800bd78:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	627b      	str	r3, [r7, #36]	; 0x24
 800bd7e:	e002      	b.n	800bd86 <gen_numname+0xd2>
 800bd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd82:	3301      	adds	r3, #1
 800bd84:	627b      	str	r3, [r7, #36]	; 0x24
 800bd86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d205      	bcs.n	800bd9a <gen_numname+0xe6>
 800bd8e:	68fa      	ldr	r2, [r7, #12]
 800bd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd92:	4413      	add	r3, r2
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	2b20      	cmp	r3, #32
 800bd98:	d1f2      	bne.n	800bd80 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800bd9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd9c:	2b07      	cmp	r3, #7
 800bd9e:	d807      	bhi.n	800bdb0 <gen_numname+0xfc>
 800bda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda2:	1c5a      	adds	r2, r3, #1
 800bda4:	62ba      	str	r2, [r7, #40]	; 0x28
 800bda6:	3330      	adds	r3, #48	; 0x30
 800bda8:	443b      	add	r3, r7
 800bdaa:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800bdae:	e000      	b.n	800bdb2 <gen_numname+0xfe>
 800bdb0:	2120      	movs	r1, #32
 800bdb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb4:	1c5a      	adds	r2, r3, #1
 800bdb6:	627a      	str	r2, [r7, #36]	; 0x24
 800bdb8:	68fa      	ldr	r2, [r7, #12]
 800bdba:	4413      	add	r3, r2
 800bdbc:	460a      	mov	r2, r1
 800bdbe:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800bdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc2:	2b07      	cmp	r3, #7
 800bdc4:	d9e9      	bls.n	800bd9a <gen_numname+0xe6>
}
 800bdc6:	bf00      	nop
 800bdc8:	bf00      	nop
 800bdca:	3730      	adds	r7, #48	; 0x30
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}

0800bdd0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b085      	sub	sp, #20
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800bddc:	230b      	movs	r3, #11
 800bdde:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800bde0:	7bfb      	ldrb	r3, [r7, #15]
 800bde2:	b2da      	uxtb	r2, r3
 800bde4:	0852      	lsrs	r2, r2, #1
 800bde6:	01db      	lsls	r3, r3, #7
 800bde8:	4313      	orrs	r3, r2
 800bdea:	b2da      	uxtb	r2, r3
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	1c59      	adds	r1, r3, #1
 800bdf0:	6079      	str	r1, [r7, #4]
 800bdf2:	781b      	ldrb	r3, [r3, #0]
 800bdf4:	4413      	add	r3, r2
 800bdf6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	3b01      	subs	r3, #1
 800bdfc:	60bb      	str	r3, [r7, #8]
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d1ed      	bne.n	800bde0 <sum_sfn+0x10>
	return sum;
 800be04:	7bfb      	ldrb	r3, [r7, #15]
}
 800be06:	4618      	mov	r0, r3
 800be08:	3714      	adds	r7, #20
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr

0800be12 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800be12:	b580      	push	{r7, lr}
 800be14:	b086      	sub	sp, #24
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
 800be1a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800be1c:	2304      	movs	r3, #4
 800be1e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800be26:	23ff      	movs	r3, #255	; 0xff
 800be28:	757b      	strb	r3, [r7, #21]
 800be2a:	23ff      	movs	r3, #255	; 0xff
 800be2c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800be2e:	e081      	b.n	800bf34 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	69db      	ldr	r3, [r3, #28]
 800be34:	4619      	mov	r1, r3
 800be36:	6938      	ldr	r0, [r7, #16]
 800be38:	f7ff f8ba 	bl	800afb0 <move_window>
 800be3c:	4603      	mov	r3, r0
 800be3e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800be40:	7dfb      	ldrb	r3, [r7, #23]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d17c      	bne.n	800bf40 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6a1b      	ldr	r3, [r3, #32]
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800be4e:	7dbb      	ldrb	r3, [r7, #22]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d102      	bne.n	800be5a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800be54:	2304      	movs	r3, #4
 800be56:	75fb      	strb	r3, [r7, #23]
 800be58:	e077      	b.n	800bf4a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6a1b      	ldr	r3, [r3, #32]
 800be5e:	330b      	adds	r3, #11
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be66:	73fb      	strb	r3, [r7, #15]
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	7bfa      	ldrb	r2, [r7, #15]
 800be6c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800be6e:	7dbb      	ldrb	r3, [r7, #22]
 800be70:	2be5      	cmp	r3, #229	; 0xe5
 800be72:	d00e      	beq.n	800be92 <dir_read+0x80>
 800be74:	7dbb      	ldrb	r3, [r7, #22]
 800be76:	2b2e      	cmp	r3, #46	; 0x2e
 800be78:	d00b      	beq.n	800be92 <dir_read+0x80>
 800be7a:	7bfb      	ldrb	r3, [r7, #15]
 800be7c:	f023 0320 	bic.w	r3, r3, #32
 800be80:	2b08      	cmp	r3, #8
 800be82:	bf0c      	ite	eq
 800be84:	2301      	moveq	r3, #1
 800be86:	2300      	movne	r3, #0
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	461a      	mov	r2, r3
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	4293      	cmp	r3, r2
 800be90:	d002      	beq.n	800be98 <dir_read+0x86>
				ord = 0xFF;
 800be92:	23ff      	movs	r3, #255	; 0xff
 800be94:	757b      	strb	r3, [r7, #21]
 800be96:	e044      	b.n	800bf22 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800be98:	7bfb      	ldrb	r3, [r7, #15]
 800be9a:	2b0f      	cmp	r3, #15
 800be9c:	d12f      	bne.n	800befe <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800be9e:	7dbb      	ldrb	r3, [r7, #22]
 800bea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d00d      	beq.n	800bec4 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6a1b      	ldr	r3, [r3, #32]
 800beac:	7b5b      	ldrb	r3, [r3, #13]
 800beae:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800beb0:	7dbb      	ldrb	r3, [r7, #22]
 800beb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800beb6:	75bb      	strb	r3, [r7, #22]
 800beb8:	7dbb      	ldrb	r3, [r7, #22]
 800beba:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	695a      	ldr	r2, [r3, #20]
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bec4:	7dba      	ldrb	r2, [r7, #22]
 800bec6:	7d7b      	ldrb	r3, [r7, #21]
 800bec8:	429a      	cmp	r2, r3
 800beca:	d115      	bne.n	800bef8 <dir_read+0xe6>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6a1b      	ldr	r3, [r3, #32]
 800bed0:	330d      	adds	r3, #13
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	7d3a      	ldrb	r2, [r7, #20]
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d10e      	bne.n	800bef8 <dir_read+0xe6>
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	68da      	ldr	r2, [r3, #12]
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6a1b      	ldr	r3, [r3, #32]
 800bee2:	4619      	mov	r1, r3
 800bee4:	4610      	mov	r0, r2
 800bee6:	f7ff fe19 	bl	800bb1c <pick_lfn>
 800beea:	4603      	mov	r3, r0
 800beec:	2b00      	cmp	r3, #0
 800beee:	d003      	beq.n	800bef8 <dir_read+0xe6>
 800bef0:	7d7b      	ldrb	r3, [r7, #21]
 800bef2:	3b01      	subs	r3, #1
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	e000      	b.n	800befa <dir_read+0xe8>
 800bef8:	23ff      	movs	r3, #255	; 0xff
 800befa:	757b      	strb	r3, [r7, #21]
 800befc:	e011      	b.n	800bf22 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800befe:	7d7b      	ldrb	r3, [r7, #21]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d109      	bne.n	800bf18 <dir_read+0x106>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6a1b      	ldr	r3, [r3, #32]
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f7ff ff61 	bl	800bdd0 <sum_sfn>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	461a      	mov	r2, r3
 800bf12:	7d3b      	ldrb	r3, [r7, #20]
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d015      	beq.n	800bf44 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f04f 32ff 	mov.w	r2, #4294967295
 800bf1e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800bf20:	e010      	b.n	800bf44 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800bf22:	2100      	movs	r1, #0
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f7ff fc3e 	bl	800b7a6 <dir_next>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bf2e:	7dfb      	ldrb	r3, [r7, #23]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d109      	bne.n	800bf48 <dir_read+0x136>
	while (dp->sect) {
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	69db      	ldr	r3, [r3, #28]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	f47f af79 	bne.w	800be30 <dir_read+0x1e>
 800bf3e:	e004      	b.n	800bf4a <dir_read+0x138>
		if (res != FR_OK) break;
 800bf40:	bf00      	nop
 800bf42:	e002      	b.n	800bf4a <dir_read+0x138>
					break;
 800bf44:	bf00      	nop
 800bf46:	e000      	b.n	800bf4a <dir_read+0x138>
		if (res != FR_OK) break;
 800bf48:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800bf4a:	7dfb      	ldrb	r3, [r7, #23]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d002      	beq.n	800bf56 <dir_read+0x144>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2200      	movs	r2, #0
 800bf54:	61da      	str	r2, [r3, #28]
	return res;
 800bf56:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3718      	adds	r7, #24
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b086      	sub	sp, #24
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bf6e:	2100      	movs	r1, #0
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f7ff fb9d 	bl	800b6b0 <dir_sdi>
 800bf76:	4603      	mov	r3, r0
 800bf78:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bf7a:	7dfb      	ldrb	r3, [r7, #23]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d001      	beq.n	800bf84 <dir_find+0x24>
 800bf80:	7dfb      	ldrb	r3, [r7, #23]
 800bf82:	e0a9      	b.n	800c0d8 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bf84:	23ff      	movs	r3, #255	; 0xff
 800bf86:	753b      	strb	r3, [r7, #20]
 800bf88:	7d3b      	ldrb	r3, [r7, #20]
 800bf8a:	757b      	strb	r3, [r7, #21]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf92:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	69db      	ldr	r3, [r3, #28]
 800bf98:	4619      	mov	r1, r3
 800bf9a:	6938      	ldr	r0, [r7, #16]
 800bf9c:	f7ff f808 	bl	800afb0 <move_window>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bfa4:	7dfb      	ldrb	r3, [r7, #23]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	f040 8090 	bne.w	800c0cc <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6a1b      	ldr	r3, [r3, #32]
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bfb4:	7dbb      	ldrb	r3, [r7, #22]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d102      	bne.n	800bfc0 <dir_find+0x60>
 800bfba:	2304      	movs	r3, #4
 800bfbc:	75fb      	strb	r3, [r7, #23]
 800bfbe:	e08a      	b.n	800c0d6 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6a1b      	ldr	r3, [r3, #32]
 800bfc4:	330b      	adds	r3, #11
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bfcc:	73fb      	strb	r3, [r7, #15]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	7bfa      	ldrb	r2, [r7, #15]
 800bfd2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800bfd4:	7dbb      	ldrb	r3, [r7, #22]
 800bfd6:	2be5      	cmp	r3, #229	; 0xe5
 800bfd8:	d007      	beq.n	800bfea <dir_find+0x8a>
 800bfda:	7bfb      	ldrb	r3, [r7, #15]
 800bfdc:	f003 0308 	and.w	r3, r3, #8
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d009      	beq.n	800bff8 <dir_find+0x98>
 800bfe4:	7bfb      	ldrb	r3, [r7, #15]
 800bfe6:	2b0f      	cmp	r3, #15
 800bfe8:	d006      	beq.n	800bff8 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bfea:	23ff      	movs	r3, #255	; 0xff
 800bfec:	757b      	strb	r3, [r7, #21]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f04f 32ff 	mov.w	r2, #4294967295
 800bff4:	631a      	str	r2, [r3, #48]	; 0x30
 800bff6:	e05e      	b.n	800c0b6 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800bff8:	7bfb      	ldrb	r3, [r7, #15]
 800bffa:	2b0f      	cmp	r3, #15
 800bffc:	d136      	bne.n	800c06c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d154      	bne.n	800c0b6 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c00c:	7dbb      	ldrb	r3, [r7, #22]
 800c00e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c012:	2b00      	cmp	r3, #0
 800c014:	d00d      	beq.n	800c032 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6a1b      	ldr	r3, [r3, #32]
 800c01a:	7b5b      	ldrb	r3, [r3, #13]
 800c01c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c01e:	7dbb      	ldrb	r3, [r7, #22]
 800c020:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c024:	75bb      	strb	r3, [r7, #22]
 800c026:	7dbb      	ldrb	r3, [r7, #22]
 800c028:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	695a      	ldr	r2, [r3, #20]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c032:	7dba      	ldrb	r2, [r7, #22]
 800c034:	7d7b      	ldrb	r3, [r7, #21]
 800c036:	429a      	cmp	r2, r3
 800c038:	d115      	bne.n	800c066 <dir_find+0x106>
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6a1b      	ldr	r3, [r3, #32]
 800c03e:	330d      	adds	r3, #13
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	7d3a      	ldrb	r2, [r7, #20]
 800c044:	429a      	cmp	r2, r3
 800c046:	d10e      	bne.n	800c066 <dir_find+0x106>
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	68da      	ldr	r2, [r3, #12]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6a1b      	ldr	r3, [r3, #32]
 800c050:	4619      	mov	r1, r3
 800c052:	4610      	mov	r0, r2
 800c054:	f7ff fcf2 	bl	800ba3c <cmp_lfn>
 800c058:	4603      	mov	r3, r0
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d003      	beq.n	800c066 <dir_find+0x106>
 800c05e:	7d7b      	ldrb	r3, [r7, #21]
 800c060:	3b01      	subs	r3, #1
 800c062:	b2db      	uxtb	r3, r3
 800c064:	e000      	b.n	800c068 <dir_find+0x108>
 800c066:	23ff      	movs	r3, #255	; 0xff
 800c068:	757b      	strb	r3, [r7, #21]
 800c06a:	e024      	b.n	800c0b6 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c06c:	7d7b      	ldrb	r3, [r7, #21]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d109      	bne.n	800c086 <dir_find+0x126>
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6a1b      	ldr	r3, [r3, #32]
 800c076:	4618      	mov	r0, r3
 800c078:	f7ff feaa 	bl	800bdd0 <sum_sfn>
 800c07c:	4603      	mov	r3, r0
 800c07e:	461a      	mov	r2, r3
 800c080:	7d3b      	ldrb	r3, [r7, #20]
 800c082:	4293      	cmp	r3, r2
 800c084:	d024      	beq.n	800c0d0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c08c:	f003 0301 	and.w	r3, r3, #1
 800c090:	2b00      	cmp	r3, #0
 800c092:	d10a      	bne.n	800c0aa <dir_find+0x14a>
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6a18      	ldr	r0, [r3, #32]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	3324      	adds	r3, #36	; 0x24
 800c09c:	220b      	movs	r2, #11
 800c09e:	4619      	mov	r1, r3
 800c0a0:	f7fe fd94 	bl	800abcc <mem_cmp>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d014      	beq.n	800c0d4 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c0aa:	23ff      	movs	r3, #255	; 0xff
 800c0ac:	757b      	strb	r3, [r7, #21]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c0b4:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c0b6:	2100      	movs	r1, #0
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f7ff fb74 	bl	800b7a6 <dir_next>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c0c2:	7dfb      	ldrb	r3, [r7, #23]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	f43f af65 	beq.w	800bf94 <dir_find+0x34>
 800c0ca:	e004      	b.n	800c0d6 <dir_find+0x176>
		if (res != FR_OK) break;
 800c0cc:	bf00      	nop
 800c0ce:	e002      	b.n	800c0d6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c0d0:	bf00      	nop
 800c0d2:	e000      	b.n	800c0d6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c0d4:	bf00      	nop

	return res;
 800c0d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3718      	adds	r7, #24
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}

0800c0e0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b08c      	sub	sp, #48	; 0x30
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c0f4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d001      	beq.n	800c100 <dir_register+0x20>
 800c0fc:	2306      	movs	r3, #6
 800c0fe:	e0e0      	b.n	800c2c2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c100:	2300      	movs	r3, #0
 800c102:	627b      	str	r3, [r7, #36]	; 0x24
 800c104:	e002      	b.n	800c10c <dir_register+0x2c>
 800c106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c108:	3301      	adds	r3, #1
 800c10a:	627b      	str	r3, [r7, #36]	; 0x24
 800c10c:	69fb      	ldr	r3, [r7, #28]
 800c10e:	68da      	ldr	r2, [r3, #12]
 800c110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c112:	005b      	lsls	r3, r3, #1
 800c114:	4413      	add	r3, r2
 800c116:	881b      	ldrh	r3, [r3, #0]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d1f4      	bne.n	800c106 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800c122:	f107 030c 	add.w	r3, r7, #12
 800c126:	220c      	movs	r2, #12
 800c128:	4618      	mov	r0, r3
 800c12a:	f7fe fd13 	bl	800ab54 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c12e:	7dfb      	ldrb	r3, [r7, #23]
 800c130:	f003 0301 	and.w	r3, r3, #1
 800c134:	2b00      	cmp	r3, #0
 800c136:	d032      	beq.n	800c19e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2240      	movs	r2, #64	; 0x40
 800c13c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800c140:	2301      	movs	r3, #1
 800c142:	62bb      	str	r3, [r7, #40]	; 0x28
 800c144:	e016      	b.n	800c174 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800c14c:	69fb      	ldr	r3, [r7, #28]
 800c14e:	68da      	ldr	r2, [r3, #12]
 800c150:	f107 010c 	add.w	r1, r7, #12
 800c154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c156:	f7ff fdad 	bl	800bcb4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f7ff ff00 	bl	800bf60 <dir_find>
 800c160:	4603      	mov	r3, r0
 800c162:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800c166:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d106      	bne.n	800c17c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800c16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c170:	3301      	adds	r3, #1
 800c172:	62bb      	str	r3, [r7, #40]	; 0x28
 800c174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c176:	2b63      	cmp	r3, #99	; 0x63
 800c178:	d9e5      	bls.n	800c146 <dir_register+0x66>
 800c17a:	e000      	b.n	800c17e <dir_register+0x9e>
			if (res != FR_OK) break;
 800c17c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c180:	2b64      	cmp	r3, #100	; 0x64
 800c182:	d101      	bne.n	800c188 <dir_register+0xa8>
 800c184:	2307      	movs	r3, #7
 800c186:	e09c      	b.n	800c2c2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c188:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c18c:	2b04      	cmp	r3, #4
 800c18e:	d002      	beq.n	800c196 <dir_register+0xb6>
 800c190:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c194:	e095      	b.n	800c2c2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c196:	7dfa      	ldrb	r2, [r7, #23]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c19e:	7dfb      	ldrb	r3, [r7, #23]
 800c1a0:	f003 0302 	and.w	r3, r3, #2
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d007      	beq.n	800c1b8 <dir_register+0xd8>
 800c1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1aa:	330c      	adds	r3, #12
 800c1ac:	4a47      	ldr	r2, [pc, #284]	; (800c2cc <dir_register+0x1ec>)
 800c1ae:	fba2 2303 	umull	r2, r3, r2, r3
 800c1b2:	089b      	lsrs	r3, r3, #2
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	e000      	b.n	800c1ba <dir_register+0xda>
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c1bc:	6a39      	ldr	r1, [r7, #32]
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f7ff fbb6 	bl	800b930 <dir_alloc>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c1ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d148      	bne.n	800c264 <dir_register+0x184>
 800c1d2:	6a3b      	ldr	r3, [r7, #32]
 800c1d4:	3b01      	subs	r3, #1
 800c1d6:	623b      	str	r3, [r7, #32]
 800c1d8:	6a3b      	ldr	r3, [r7, #32]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d042      	beq.n	800c264 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	695a      	ldr	r2, [r3, #20]
 800c1e2:	6a3b      	ldr	r3, [r7, #32]
 800c1e4:	015b      	lsls	r3, r3, #5
 800c1e6:	1ad3      	subs	r3, r2, r3
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f7ff fa60 	bl	800b6b0 <dir_sdi>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c1f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d132      	bne.n	800c264 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	3324      	adds	r3, #36	; 0x24
 800c202:	4618      	mov	r0, r3
 800c204:	f7ff fde4 	bl	800bdd0 <sum_sfn>
 800c208:	4603      	mov	r3, r0
 800c20a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	69db      	ldr	r3, [r3, #28]
 800c210:	4619      	mov	r1, r3
 800c212:	69f8      	ldr	r0, [r7, #28]
 800c214:	f7fe fecc 	bl	800afb0 <move_window>
 800c218:	4603      	mov	r3, r0
 800c21a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800c21e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c222:	2b00      	cmp	r3, #0
 800c224:	d11d      	bne.n	800c262 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c226:	69fb      	ldr	r3, [r7, #28]
 800c228:	68d8      	ldr	r0, [r3, #12]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6a19      	ldr	r1, [r3, #32]
 800c22e:	6a3b      	ldr	r3, [r7, #32]
 800c230:	b2da      	uxtb	r2, r3
 800c232:	7efb      	ldrb	r3, [r7, #27]
 800c234:	f7ff fcd6 	bl	800bbe4 <put_lfn>
				fs->wflag = 1;
 800c238:	69fb      	ldr	r3, [r7, #28]
 800c23a:	2201      	movs	r2, #1
 800c23c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c23e:	2100      	movs	r1, #0
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f7ff fab0 	bl	800b7a6 <dir_next>
 800c246:	4603      	mov	r3, r0
 800c248:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800c24c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c250:	2b00      	cmp	r3, #0
 800c252:	d107      	bne.n	800c264 <dir_register+0x184>
 800c254:	6a3b      	ldr	r3, [r7, #32]
 800c256:	3b01      	subs	r3, #1
 800c258:	623b      	str	r3, [r7, #32]
 800c25a:	6a3b      	ldr	r3, [r7, #32]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d1d5      	bne.n	800c20c <dir_register+0x12c>
 800c260:	e000      	b.n	800c264 <dir_register+0x184>
				if (res != FR_OK) break;
 800c262:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c264:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d128      	bne.n	800c2be <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	69db      	ldr	r3, [r3, #28]
 800c270:	4619      	mov	r1, r3
 800c272:	69f8      	ldr	r0, [r7, #28]
 800c274:	f7fe fe9c 	bl	800afb0 <move_window>
 800c278:	4603      	mov	r3, r0
 800c27a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c27e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c282:	2b00      	cmp	r3, #0
 800c284:	d11b      	bne.n	800c2be <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6a1b      	ldr	r3, [r3, #32]
 800c28a:	2220      	movs	r2, #32
 800c28c:	2100      	movs	r1, #0
 800c28e:	4618      	mov	r0, r3
 800c290:	f7fe fc81 	bl	800ab96 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6a18      	ldr	r0, [r3, #32]
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	3324      	adds	r3, #36	; 0x24
 800c29c:	220b      	movs	r2, #11
 800c29e:	4619      	mov	r1, r3
 800c2a0:	f7fe fc58 	bl	800ab54 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6a1b      	ldr	r3, [r3, #32]
 800c2ae:	330c      	adds	r3, #12
 800c2b0:	f002 0218 	and.w	r2, r2, #24
 800c2b4:	b2d2      	uxtb	r2, r2
 800c2b6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c2b8:	69fb      	ldr	r3, [r7, #28]
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c2be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3730      	adds	r7, #48	; 0x30
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	4ec4ec4f 	.word	0x4ec4ec4f

0800c2d0 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b086      	sub	sp, #24
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	695b      	ldr	r3, [r3, #20]
 800c2e2:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ec:	d007      	beq.n	800c2fe <dir_remove+0x2e>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f7ff f9db 	bl	800b6b0 <dir_sdi>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	e000      	b.n	800c300 <dir_remove+0x30>
 800c2fe:	2300      	movs	r3, #0
 800c300:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c302:	7dfb      	ldrb	r3, [r7, #23]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d128      	bne.n	800c35a <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	69db      	ldr	r3, [r3, #28]
 800c30c:	4619      	mov	r1, r3
 800c30e:	6938      	ldr	r0, [r7, #16]
 800c310:	f7fe fe4e 	bl	800afb0 <move_window>
 800c314:	4603      	mov	r3, r0
 800c316:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c318:	7dfb      	ldrb	r3, [r7, #23]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d115      	bne.n	800c34a <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6a1b      	ldr	r3, [r3, #32]
 800c322:	22e5      	movs	r2, #229	; 0xe5
 800c324:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	2201      	movs	r2, #1
 800c32a:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	695b      	ldr	r3, [r3, #20]
 800c330:	68fa      	ldr	r2, [r7, #12]
 800c332:	429a      	cmp	r2, r3
 800c334:	d90b      	bls.n	800c34e <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800c336:	2100      	movs	r1, #0
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f7ff fa34 	bl	800b7a6 <dir_next>
 800c33e:	4603      	mov	r3, r0
 800c340:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800c342:	7dfb      	ldrb	r3, [r7, #23]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d0df      	beq.n	800c308 <dir_remove+0x38>
 800c348:	e002      	b.n	800c350 <dir_remove+0x80>
			if (res != FR_OK) break;
 800c34a:	bf00      	nop
 800c34c:	e000      	b.n	800c350 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800c34e:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800c350:	7dfb      	ldrb	r3, [r7, #23]
 800c352:	2b04      	cmp	r3, #4
 800c354:	d101      	bne.n	800c35a <dir_remove+0x8a>
 800c356:	2302      	movs	r3, #2
 800c358:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800c35a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3718      	adds	r7, #24
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b088      	sub	sp, #32
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	2200      	movs	r2, #0
 800c378:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	69db      	ldr	r3, [r3, #28]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	f000 80c9 	beq.w	800c516 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c38c:	d032      	beq.n	800c3f4 <get_fileinfo+0x90>
			i = j = 0;
 800c38e:	2300      	movs	r3, #0
 800c390:	61bb      	str	r3, [r7, #24]
 800c392:	69bb      	ldr	r3, [r7, #24]
 800c394:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c396:	e01b      	b.n	800c3d0 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800c398:	89fb      	ldrh	r3, [r7, #14]
 800c39a:	2100      	movs	r1, #0
 800c39c:	4618      	mov	r0, r3
 800c39e:	f001 ff35 	bl	800e20c <ff_convert>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800c3a6:	89fb      	ldrh	r3, [r7, #14]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d102      	bne.n	800c3b2 <get_fileinfo+0x4e>
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	61fb      	str	r3, [r7, #28]
 800c3b0:	e01a      	b.n	800c3e8 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800c3b2:	69fb      	ldr	r3, [r7, #28]
 800c3b4:	2bfe      	cmp	r3, #254	; 0xfe
 800c3b6:	d902      	bls.n	800c3be <get_fileinfo+0x5a>
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	61fb      	str	r3, [r7, #28]
 800c3bc:	e014      	b.n	800c3e8 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800c3be:	69fb      	ldr	r3, [r7, #28]
 800c3c0:	1c5a      	adds	r2, r3, #1
 800c3c2:	61fa      	str	r2, [r7, #28]
 800c3c4:	89fa      	ldrh	r2, [r7, #14]
 800c3c6:	b2d1      	uxtb	r1, r2
 800c3c8:	683a      	ldr	r2, [r7, #0]
 800c3ca:	4413      	add	r3, r2
 800c3cc:	460a      	mov	r2, r1
 800c3ce:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	68da      	ldr	r2, [r3, #12]
 800c3d4:	69bb      	ldr	r3, [r7, #24]
 800c3d6:	1c59      	adds	r1, r3, #1
 800c3d8:	61b9      	str	r1, [r7, #24]
 800c3da:	005b      	lsls	r3, r3, #1
 800c3dc:	4413      	add	r3, r2
 800c3de:	881b      	ldrh	r3, [r3, #0]
 800c3e0:	81fb      	strh	r3, [r7, #14]
 800c3e2:	89fb      	ldrh	r3, [r7, #14]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d1d7      	bne.n	800c398 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800c3e8:	683a      	ldr	r2, [r7, #0]
 800c3ea:	69fb      	ldr	r3, [r7, #28]
 800c3ec:	4413      	add	r3, r2
 800c3ee:	3316      	adds	r3, #22
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	61bb      	str	r3, [r7, #24]
 800c3f8:	69bb      	ldr	r3, [r7, #24]
 800c3fa:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800c3fc:	683a      	ldr	r2, [r7, #0]
 800c3fe:	69fb      	ldr	r3, [r7, #28]
 800c400:	4413      	add	r3, r2
 800c402:	3316      	adds	r3, #22
 800c404:	781b      	ldrb	r3, [r3, #0]
 800c406:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800c408:	e04c      	b.n	800c4a4 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6a1a      	ldr	r2, [r3, #32]
 800c40e:	69fb      	ldr	r3, [r7, #28]
 800c410:	1c59      	adds	r1, r3, #1
 800c412:	61f9      	str	r1, [r7, #28]
 800c414:	4413      	add	r3, r2
 800c416:	781b      	ldrb	r3, [r3, #0]
 800c418:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800c41a:	7dfb      	ldrb	r3, [r7, #23]
 800c41c:	2b20      	cmp	r3, #32
 800c41e:	d100      	bne.n	800c422 <get_fileinfo+0xbe>
 800c420:	e040      	b.n	800c4a4 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800c422:	7dfb      	ldrb	r3, [r7, #23]
 800c424:	2b05      	cmp	r3, #5
 800c426:	d101      	bne.n	800c42c <get_fileinfo+0xc8>
 800c428:	23e5      	movs	r3, #229	; 0xe5
 800c42a:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800c42c:	69fb      	ldr	r3, [r7, #28]
 800c42e:	2b09      	cmp	r3, #9
 800c430:	d10f      	bne.n	800c452 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800c432:	89bb      	ldrh	r3, [r7, #12]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d105      	bne.n	800c444 <get_fileinfo+0xe0>
 800c438:	683a      	ldr	r2, [r7, #0]
 800c43a:	69bb      	ldr	r3, [r7, #24]
 800c43c:	4413      	add	r3, r2
 800c43e:	3316      	adds	r3, #22
 800c440:	222e      	movs	r2, #46	; 0x2e
 800c442:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800c444:	69bb      	ldr	r3, [r7, #24]
 800c446:	1c5a      	adds	r2, r3, #1
 800c448:	61ba      	str	r2, [r7, #24]
 800c44a:	683a      	ldr	r2, [r7, #0]
 800c44c:	4413      	add	r3, r2
 800c44e:	222e      	movs	r2, #46	; 0x2e
 800c450:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800c452:	683a      	ldr	r2, [r7, #0]
 800c454:	69bb      	ldr	r3, [r7, #24]
 800c456:	4413      	add	r3, r2
 800c458:	3309      	adds	r3, #9
 800c45a:	7dfa      	ldrb	r2, [r7, #23]
 800c45c:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800c45e:	89bb      	ldrh	r3, [r7, #12]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d11c      	bne.n	800c49e <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800c464:	7dfb      	ldrb	r3, [r7, #23]
 800c466:	2b40      	cmp	r3, #64	; 0x40
 800c468:	d913      	bls.n	800c492 <get_fileinfo+0x12e>
 800c46a:	7dfb      	ldrb	r3, [r7, #23]
 800c46c:	2b5a      	cmp	r3, #90	; 0x5a
 800c46e:	d810      	bhi.n	800c492 <get_fileinfo+0x12e>
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6a1b      	ldr	r3, [r3, #32]
 800c474:	330c      	adds	r3, #12
 800c476:	781b      	ldrb	r3, [r3, #0]
 800c478:	461a      	mov	r2, r3
 800c47a:	69fb      	ldr	r3, [r7, #28]
 800c47c:	2b08      	cmp	r3, #8
 800c47e:	d901      	bls.n	800c484 <get_fileinfo+0x120>
 800c480:	2310      	movs	r3, #16
 800c482:	e000      	b.n	800c486 <get_fileinfo+0x122>
 800c484:	2308      	movs	r3, #8
 800c486:	4013      	ands	r3, r2
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d002      	beq.n	800c492 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800c48c:	7dfb      	ldrb	r3, [r7, #23]
 800c48e:	3320      	adds	r3, #32
 800c490:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800c492:	683a      	ldr	r2, [r7, #0]
 800c494:	69bb      	ldr	r3, [r7, #24]
 800c496:	4413      	add	r3, r2
 800c498:	3316      	adds	r3, #22
 800c49a:	7dfa      	ldrb	r2, [r7, #23]
 800c49c:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800c49e:	69bb      	ldr	r3, [r7, #24]
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800c4a4:	69fb      	ldr	r3, [r7, #28]
 800c4a6:	2b0a      	cmp	r3, #10
 800c4a8:	d9af      	bls.n	800c40a <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800c4aa:	89bb      	ldrh	r3, [r7, #12]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d10d      	bne.n	800c4cc <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800c4b0:	683a      	ldr	r2, [r7, #0]
 800c4b2:	69bb      	ldr	r3, [r7, #24]
 800c4b4:	4413      	add	r3, r2
 800c4b6:	3316      	adds	r3, #22
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6a1b      	ldr	r3, [r3, #32]
 800c4c0:	330c      	adds	r3, #12
 800c4c2:	781b      	ldrb	r3, [r3, #0]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d101      	bne.n	800c4cc <get_fileinfo+0x168>
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800c4cc:	683a      	ldr	r2, [r7, #0]
 800c4ce:	69bb      	ldr	r3, [r7, #24]
 800c4d0:	4413      	add	r3, r2
 800c4d2:	3309      	adds	r3, #9
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6a1b      	ldr	r3, [r3, #32]
 800c4dc:	7ada      	ldrb	r2, [r3, #11]
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6a1b      	ldr	r3, [r3, #32]
 800c4e6:	331c      	adds	r3, #28
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f7fe fac9 	bl	800aa80 <ld_dword>
 800c4ee:	4602      	mov	r2, r0
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6a1b      	ldr	r3, [r3, #32]
 800c4f8:	3316      	adds	r3, #22
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f7fe fac0 	bl	800aa80 <ld_dword>
 800c500:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	b29a      	uxth	r2, r3
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	80da      	strh	r2, [r3, #6]
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	0c1b      	lsrs	r3, r3, #16
 800c50e:	b29a      	uxth	r2, r3
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	809a      	strh	r2, [r3, #4]
 800c514:	e000      	b.n	800c518 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c516:	bf00      	nop
}
 800c518:	3720      	adds	r7, #32
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
	...

0800c520 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b08a      	sub	sp, #40	; 0x28
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	613b      	str	r3, [r7, #16]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	68db      	ldr	r3, [r3, #12]
 800c536:	60fb      	str	r3, [r7, #12]
 800c538:	2300      	movs	r3, #0
 800c53a:	617b      	str	r3, [r7, #20]
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c540:	69bb      	ldr	r3, [r7, #24]
 800c542:	1c5a      	adds	r2, r3, #1
 800c544:	61ba      	str	r2, [r7, #24]
 800c546:	693a      	ldr	r2, [r7, #16]
 800c548:	4413      	add	r3, r2
 800c54a:	781b      	ldrb	r3, [r3, #0]
 800c54c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c54e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c550:	2b1f      	cmp	r3, #31
 800c552:	d940      	bls.n	800c5d6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c554:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c556:	2b2f      	cmp	r3, #47	; 0x2f
 800c558:	d006      	beq.n	800c568 <create_name+0x48>
 800c55a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c55c:	2b5c      	cmp	r3, #92	; 0x5c
 800c55e:	d110      	bne.n	800c582 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c560:	e002      	b.n	800c568 <create_name+0x48>
 800c562:	69bb      	ldr	r3, [r7, #24]
 800c564:	3301      	adds	r3, #1
 800c566:	61bb      	str	r3, [r7, #24]
 800c568:	693a      	ldr	r2, [r7, #16]
 800c56a:	69bb      	ldr	r3, [r7, #24]
 800c56c:	4413      	add	r3, r2
 800c56e:	781b      	ldrb	r3, [r3, #0]
 800c570:	2b2f      	cmp	r3, #47	; 0x2f
 800c572:	d0f6      	beq.n	800c562 <create_name+0x42>
 800c574:	693a      	ldr	r2, [r7, #16]
 800c576:	69bb      	ldr	r3, [r7, #24]
 800c578:	4413      	add	r3, r2
 800c57a:	781b      	ldrb	r3, [r3, #0]
 800c57c:	2b5c      	cmp	r3, #92	; 0x5c
 800c57e:	d0f0      	beq.n	800c562 <create_name+0x42>
			break;
 800c580:	e02a      	b.n	800c5d8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	2bfe      	cmp	r3, #254	; 0xfe
 800c586:	d901      	bls.n	800c58c <create_name+0x6c>
 800c588:	2306      	movs	r3, #6
 800c58a:	e17d      	b.n	800c888 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c58c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c58e:	b2db      	uxtb	r3, r3
 800c590:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c592:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c594:	2101      	movs	r1, #1
 800c596:	4618      	mov	r0, r3
 800c598:	f001 fe38 	bl	800e20c <ff_convert>
 800c59c:	4603      	mov	r3, r0
 800c59e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c5a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d101      	bne.n	800c5aa <create_name+0x8a>
 800c5a6:	2306      	movs	r3, #6
 800c5a8:	e16e      	b.n	800c888 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c5aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5ac:	2b7f      	cmp	r3, #127	; 0x7f
 800c5ae:	d809      	bhi.n	800c5c4 <create_name+0xa4>
 800c5b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	488d      	ldr	r0, [pc, #564]	; (800c7ec <create_name+0x2cc>)
 800c5b6:	f7fe fb30 	bl	800ac1a <chk_chr>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d001      	beq.n	800c5c4 <create_name+0xa4>
 800c5c0:	2306      	movs	r3, #6
 800c5c2:	e161      	b.n	800c888 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	1c5a      	adds	r2, r3, #1
 800c5c8:	617a      	str	r2, [r7, #20]
 800c5ca:	005b      	lsls	r3, r3, #1
 800c5cc:	68fa      	ldr	r2, [r7, #12]
 800c5ce:	4413      	add	r3, r2
 800c5d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c5d2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c5d4:	e7b4      	b.n	800c540 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c5d6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c5d8:	693a      	ldr	r2, [r7, #16]
 800c5da:	69bb      	ldr	r3, [r7, #24]
 800c5dc:	441a      	add	r2, r3
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c5e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5e4:	2b1f      	cmp	r3, #31
 800c5e6:	d801      	bhi.n	800c5ec <create_name+0xcc>
 800c5e8:	2304      	movs	r3, #4
 800c5ea:	e000      	b.n	800c5ee <create_name+0xce>
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c5f2:	e011      	b.n	800c618 <create_name+0xf8>
		w = lfn[di - 1];
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c5fa:	3b01      	subs	r3, #1
 800c5fc:	005b      	lsls	r3, r3, #1
 800c5fe:	68fa      	ldr	r2, [r7, #12]
 800c600:	4413      	add	r3, r2
 800c602:	881b      	ldrh	r3, [r3, #0]
 800c604:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c606:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c608:	2b20      	cmp	r3, #32
 800c60a:	d002      	beq.n	800c612 <create_name+0xf2>
 800c60c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c60e:	2b2e      	cmp	r3, #46	; 0x2e
 800c610:	d106      	bne.n	800c620 <create_name+0x100>
		di--;
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	3b01      	subs	r3, #1
 800c616:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d1ea      	bne.n	800c5f4 <create_name+0xd4>
 800c61e:	e000      	b.n	800c622 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c620:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	005b      	lsls	r3, r3, #1
 800c626:	68fa      	ldr	r2, [r7, #12]
 800c628:	4413      	add	r3, r2
 800c62a:	2200      	movs	r2, #0
 800c62c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d101      	bne.n	800c638 <create_name+0x118>
 800c634:	2306      	movs	r3, #6
 800c636:	e127      	b.n	800c888 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	3324      	adds	r3, #36	; 0x24
 800c63c:	220b      	movs	r2, #11
 800c63e:	2120      	movs	r1, #32
 800c640:	4618      	mov	r0, r3
 800c642:	f7fe faa8 	bl	800ab96 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c646:	2300      	movs	r3, #0
 800c648:	61bb      	str	r3, [r7, #24]
 800c64a:	e002      	b.n	800c652 <create_name+0x132>
 800c64c:	69bb      	ldr	r3, [r7, #24]
 800c64e:	3301      	adds	r3, #1
 800c650:	61bb      	str	r3, [r7, #24]
 800c652:	69bb      	ldr	r3, [r7, #24]
 800c654:	005b      	lsls	r3, r3, #1
 800c656:	68fa      	ldr	r2, [r7, #12]
 800c658:	4413      	add	r3, r2
 800c65a:	881b      	ldrh	r3, [r3, #0]
 800c65c:	2b20      	cmp	r3, #32
 800c65e:	d0f5      	beq.n	800c64c <create_name+0x12c>
 800c660:	69bb      	ldr	r3, [r7, #24]
 800c662:	005b      	lsls	r3, r3, #1
 800c664:	68fa      	ldr	r2, [r7, #12]
 800c666:	4413      	add	r3, r2
 800c668:	881b      	ldrh	r3, [r3, #0]
 800c66a:	2b2e      	cmp	r3, #46	; 0x2e
 800c66c:	d0ee      	beq.n	800c64c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c66e:	69bb      	ldr	r3, [r7, #24]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d009      	beq.n	800c688 <create_name+0x168>
 800c674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c678:	f043 0303 	orr.w	r3, r3, #3
 800c67c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c680:	e002      	b.n	800c688 <create_name+0x168>
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	3b01      	subs	r3, #1
 800c686:	617b      	str	r3, [r7, #20]
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d009      	beq.n	800c6a2 <create_name+0x182>
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c694:	3b01      	subs	r3, #1
 800c696:	005b      	lsls	r3, r3, #1
 800c698:	68fa      	ldr	r2, [r7, #12]
 800c69a:	4413      	add	r3, r2
 800c69c:	881b      	ldrh	r3, [r3, #0]
 800c69e:	2b2e      	cmp	r3, #46	; 0x2e
 800c6a0:	d1ef      	bne.n	800c682 <create_name+0x162>

	i = b = 0; ni = 8;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	623b      	str	r3, [r7, #32]
 800c6ac:	2308      	movs	r3, #8
 800c6ae:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c6b0:	69bb      	ldr	r3, [r7, #24]
 800c6b2:	1c5a      	adds	r2, r3, #1
 800c6b4:	61ba      	str	r2, [r7, #24]
 800c6b6:	005b      	lsls	r3, r3, #1
 800c6b8:	68fa      	ldr	r2, [r7, #12]
 800c6ba:	4413      	add	r3, r2
 800c6bc:	881b      	ldrh	r3, [r3, #0]
 800c6be:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c6c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	f000 8090 	beq.w	800c7e8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c6c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6ca:	2b20      	cmp	r3, #32
 800c6cc:	d006      	beq.n	800c6dc <create_name+0x1bc>
 800c6ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6d0:	2b2e      	cmp	r3, #46	; 0x2e
 800c6d2:	d10a      	bne.n	800c6ea <create_name+0x1ca>
 800c6d4:	69ba      	ldr	r2, [r7, #24]
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d006      	beq.n	800c6ea <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c6dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6e0:	f043 0303 	orr.w	r3, r3, #3
 800c6e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c6e8:	e07d      	b.n	800c7e6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c6ea:	6a3a      	ldr	r2, [r7, #32]
 800c6ec:	69fb      	ldr	r3, [r7, #28]
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	d203      	bcs.n	800c6fa <create_name+0x1da>
 800c6f2:	69ba      	ldr	r2, [r7, #24]
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	429a      	cmp	r2, r3
 800c6f8:	d123      	bne.n	800c742 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c6fa:	69fb      	ldr	r3, [r7, #28]
 800c6fc:	2b0b      	cmp	r3, #11
 800c6fe:	d106      	bne.n	800c70e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c704:	f043 0303 	orr.w	r3, r3, #3
 800c708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c70c:	e075      	b.n	800c7fa <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c70e:	69ba      	ldr	r2, [r7, #24]
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	429a      	cmp	r2, r3
 800c714:	d005      	beq.n	800c722 <create_name+0x202>
 800c716:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c71a:	f043 0303 	orr.w	r3, r3, #3
 800c71e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c722:	69ba      	ldr	r2, [r7, #24]
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	429a      	cmp	r2, r3
 800c728:	d866      	bhi.n	800c7f8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	61bb      	str	r3, [r7, #24]
 800c72e:	2308      	movs	r3, #8
 800c730:	623b      	str	r3, [r7, #32]
 800c732:	230b      	movs	r3, #11
 800c734:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c736:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c73a:	009b      	lsls	r3, r3, #2
 800c73c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c740:	e051      	b.n	800c7e6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c742:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c744:	2b7f      	cmp	r3, #127	; 0x7f
 800c746:	d914      	bls.n	800c772 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c748:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c74a:	2100      	movs	r1, #0
 800c74c:	4618      	mov	r0, r3
 800c74e:	f001 fd5d 	bl	800e20c <ff_convert>
 800c752:	4603      	mov	r3, r0
 800c754:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c756:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d004      	beq.n	800c766 <create_name+0x246>
 800c75c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c75e:	3b80      	subs	r3, #128	; 0x80
 800c760:	4a23      	ldr	r2, [pc, #140]	; (800c7f0 <create_name+0x2d0>)
 800c762:	5cd3      	ldrb	r3, [r2, r3]
 800c764:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c766:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c76a:	f043 0302 	orr.w	r3, r3, #2
 800c76e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c772:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c774:	2b00      	cmp	r3, #0
 800c776:	d007      	beq.n	800c788 <create_name+0x268>
 800c778:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c77a:	4619      	mov	r1, r3
 800c77c:	481d      	ldr	r0, [pc, #116]	; (800c7f4 <create_name+0x2d4>)
 800c77e:	f7fe fa4c 	bl	800ac1a <chk_chr>
 800c782:	4603      	mov	r3, r0
 800c784:	2b00      	cmp	r3, #0
 800c786:	d008      	beq.n	800c79a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c788:	235f      	movs	r3, #95	; 0x5f
 800c78a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c78c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c790:	f043 0303 	orr.w	r3, r3, #3
 800c794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c798:	e01b      	b.n	800c7d2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c79a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c79c:	2b40      	cmp	r3, #64	; 0x40
 800c79e:	d909      	bls.n	800c7b4 <create_name+0x294>
 800c7a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c7a2:	2b5a      	cmp	r3, #90	; 0x5a
 800c7a4:	d806      	bhi.n	800c7b4 <create_name+0x294>
					b |= 2;
 800c7a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c7aa:	f043 0302 	orr.w	r3, r3, #2
 800c7ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c7b2:	e00e      	b.n	800c7d2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c7b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c7b6:	2b60      	cmp	r3, #96	; 0x60
 800c7b8:	d90b      	bls.n	800c7d2 <create_name+0x2b2>
 800c7ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c7bc:	2b7a      	cmp	r3, #122	; 0x7a
 800c7be:	d808      	bhi.n	800c7d2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c7c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c7c4:	f043 0301 	orr.w	r3, r3, #1
 800c7c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c7cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c7ce:	3b20      	subs	r3, #32
 800c7d0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c7d2:	6a3b      	ldr	r3, [r7, #32]
 800c7d4:	1c5a      	adds	r2, r3, #1
 800c7d6:	623a      	str	r2, [r7, #32]
 800c7d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c7da:	b2d1      	uxtb	r1, r2
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	4413      	add	r3, r2
 800c7e0:	460a      	mov	r2, r1
 800c7e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c7e6:	e763      	b.n	800c6b0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c7e8:	bf00      	nop
 800c7ea:	e006      	b.n	800c7fa <create_name+0x2da>
 800c7ec:	08010610 	.word	0x08010610
 800c7f0:	08010698 	.word	0x08010698
 800c7f4:	0801061c 	.word	0x0801061c
			if (si > di) break;			/* No extension */
 800c7f8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c800:	2be5      	cmp	r3, #229	; 0xe5
 800c802:	d103      	bne.n	800c80c <create_name+0x2ec>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2205      	movs	r2, #5
 800c808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800c80c:	69fb      	ldr	r3, [r7, #28]
 800c80e:	2b08      	cmp	r3, #8
 800c810:	d104      	bne.n	800c81c <create_name+0x2fc>
 800c812:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c816:	009b      	lsls	r3, r3, #2
 800c818:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c81c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c820:	f003 030c 	and.w	r3, r3, #12
 800c824:	2b0c      	cmp	r3, #12
 800c826:	d005      	beq.n	800c834 <create_name+0x314>
 800c828:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c82c:	f003 0303 	and.w	r3, r3, #3
 800c830:	2b03      	cmp	r3, #3
 800c832:	d105      	bne.n	800c840 <create_name+0x320>
 800c834:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c838:	f043 0302 	orr.w	r3, r3, #2
 800c83c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c844:	f003 0302 	and.w	r3, r3, #2
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d117      	bne.n	800c87c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c84c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c850:	f003 0303 	and.w	r3, r3, #3
 800c854:	2b01      	cmp	r3, #1
 800c856:	d105      	bne.n	800c864 <create_name+0x344>
 800c858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c85c:	f043 0310 	orr.w	r3, r3, #16
 800c860:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c864:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c868:	f003 030c 	and.w	r3, r3, #12
 800c86c:	2b04      	cmp	r3, #4
 800c86e:	d105      	bne.n	800c87c <create_name+0x35c>
 800c870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c874:	f043 0308 	orr.w	r3, r3, #8
 800c878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c882:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800c886:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c888:	4618      	mov	r0, r3
 800c88a:	3728      	adds	r7, #40	; 0x28
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b086      	sub	sp, #24
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c8a4:	e002      	b.n	800c8ac <follow_path+0x1c>
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	3301      	adds	r3, #1
 800c8aa:	603b      	str	r3, [r7, #0]
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	781b      	ldrb	r3, [r3, #0]
 800c8b0:	2b2f      	cmp	r3, #47	; 0x2f
 800c8b2:	d0f8      	beq.n	800c8a6 <follow_path+0x16>
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	781b      	ldrb	r3, [r3, #0]
 800c8b8:	2b5c      	cmp	r3, #92	; 0x5c
 800c8ba:	d0f4      	beq.n	800c8a6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	2b1f      	cmp	r3, #31
 800c8c8:	d80a      	bhi.n	800c8e0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2280      	movs	r2, #128	; 0x80
 800c8ce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c8d2:	2100      	movs	r1, #0
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f7fe feeb 	bl	800b6b0 <dir_sdi>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	75fb      	strb	r3, [r7, #23]
 800c8de:	e043      	b.n	800c968 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c8e0:	463b      	mov	r3, r7
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f7ff fe1b 	bl	800c520 <create_name>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c8ee:	7dfb      	ldrb	r3, [r7, #23]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d134      	bne.n	800c95e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f7ff fb33 	bl	800bf60 <dir_find>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c904:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c906:	7dfb      	ldrb	r3, [r7, #23]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d00a      	beq.n	800c922 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c90c:	7dfb      	ldrb	r3, [r7, #23]
 800c90e:	2b04      	cmp	r3, #4
 800c910:	d127      	bne.n	800c962 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c912:	7afb      	ldrb	r3, [r7, #11]
 800c914:	f003 0304 	and.w	r3, r3, #4
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d122      	bne.n	800c962 <follow_path+0xd2>
 800c91c:	2305      	movs	r3, #5
 800c91e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c920:	e01f      	b.n	800c962 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c922:	7afb      	ldrb	r3, [r7, #11]
 800c924:	f003 0304 	and.w	r3, r3, #4
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d11c      	bne.n	800c966 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	799b      	ldrb	r3, [r3, #6]
 800c930:	f003 0310 	and.w	r3, r3, #16
 800c934:	2b00      	cmp	r3, #0
 800c936:	d102      	bne.n	800c93e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c938:	2305      	movs	r3, #5
 800c93a:	75fb      	strb	r3, [r7, #23]
 800c93c:	e014      	b.n	800c968 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	695b      	ldr	r3, [r3, #20]
 800c948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c94c:	4413      	add	r3, r2
 800c94e:	4619      	mov	r1, r3
 800c950:	68f8      	ldr	r0, [r7, #12]
 800c952:	f7ff f834 	bl	800b9be <ld_clust>
 800c956:	4602      	mov	r2, r0
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c95c:	e7c0      	b.n	800c8e0 <follow_path+0x50>
			if (res != FR_OK) break;
 800c95e:	bf00      	nop
 800c960:	e002      	b.n	800c968 <follow_path+0xd8>
				break;
 800c962:	bf00      	nop
 800c964:	e000      	b.n	800c968 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c966:	bf00      	nop
			}
		}
	}

	return res;
 800c968:	7dfb      	ldrb	r3, [r7, #23]
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3718      	adds	r7, #24
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}

0800c972 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c972:	b480      	push	{r7}
 800c974:	b087      	sub	sp, #28
 800c976:	af00      	add	r7, sp, #0
 800c978:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c97a:	f04f 33ff 	mov.w	r3, #4294967295
 800c97e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d031      	beq.n	800c9ec <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	617b      	str	r3, [r7, #20]
 800c98e:	e002      	b.n	800c996 <get_ldnumber+0x24>
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	3301      	adds	r3, #1
 800c994:	617b      	str	r3, [r7, #20]
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	781b      	ldrb	r3, [r3, #0]
 800c99a:	2b1f      	cmp	r3, #31
 800c99c:	d903      	bls.n	800c9a6 <get_ldnumber+0x34>
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	2b3a      	cmp	r3, #58	; 0x3a
 800c9a4:	d1f4      	bne.n	800c990 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	2b3a      	cmp	r3, #58	; 0x3a
 800c9ac:	d11c      	bne.n	800c9e8 <get_ldnumber+0x76>
			tp = *path;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	1c5a      	adds	r2, r3, #1
 800c9b8:	60fa      	str	r2, [r7, #12]
 800c9ba:	781b      	ldrb	r3, [r3, #0]
 800c9bc:	3b30      	subs	r3, #48	; 0x30
 800c9be:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	2b09      	cmp	r3, #9
 800c9c4:	d80e      	bhi.n	800c9e4 <get_ldnumber+0x72>
 800c9c6:	68fa      	ldr	r2, [r7, #12]
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d10a      	bne.n	800c9e4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d107      	bne.n	800c9e4 <get_ldnumber+0x72>
					vol = (int)i;
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	3301      	adds	r3, #1
 800c9dc:	617b      	str	r3, [r7, #20]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	697a      	ldr	r2, [r7, #20]
 800c9e2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	e002      	b.n	800c9ee <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c9ec:	693b      	ldr	r3, [r7, #16]
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	371c      	adds	r7, #28
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f8:	4770      	bx	lr
	...

0800c9fc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b082      	sub	sp, #8
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
 800ca04:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	70da      	strb	r2, [r3, #3]
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ca12:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ca14:	6839      	ldr	r1, [r7, #0]
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f7fe faca 	bl	800afb0 <move_window>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d001      	beq.n	800ca26 <check_fs+0x2a>
 800ca22:	2304      	movs	r3, #4
 800ca24:	e038      	b.n	800ca98 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	3334      	adds	r3, #52	; 0x34
 800ca2a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7fe f80e 	bl	800aa50 <ld_word>
 800ca34:	4603      	mov	r3, r0
 800ca36:	461a      	mov	r2, r3
 800ca38:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	d001      	beq.n	800ca44 <check_fs+0x48>
 800ca40:	2303      	movs	r3, #3
 800ca42:	e029      	b.n	800ca98 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ca4a:	2be9      	cmp	r3, #233	; 0xe9
 800ca4c:	d009      	beq.n	800ca62 <check_fs+0x66>
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ca54:	2beb      	cmp	r3, #235	; 0xeb
 800ca56:	d11e      	bne.n	800ca96 <check_fs+0x9a>
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800ca5e:	2b90      	cmp	r3, #144	; 0x90
 800ca60:	d119      	bne.n	800ca96 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	3334      	adds	r3, #52	; 0x34
 800ca66:	3336      	adds	r3, #54	; 0x36
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f7fe f809 	bl	800aa80 <ld_dword>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ca74:	4a0a      	ldr	r2, [pc, #40]	; (800caa0 <check_fs+0xa4>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d101      	bne.n	800ca7e <check_fs+0x82>
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	e00c      	b.n	800ca98 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	3334      	adds	r3, #52	; 0x34
 800ca82:	3352      	adds	r3, #82	; 0x52
 800ca84:	4618      	mov	r0, r3
 800ca86:	f7fd fffb 	bl	800aa80 <ld_dword>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	4a05      	ldr	r2, [pc, #20]	; (800caa4 <check_fs+0xa8>)
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	d101      	bne.n	800ca96 <check_fs+0x9a>
 800ca92:	2300      	movs	r3, #0
 800ca94:	e000      	b.n	800ca98 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ca96:	2302      	movs	r3, #2
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3708      	adds	r7, #8
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}
 800caa0:	00544146 	.word	0x00544146
 800caa4:	33544146 	.word	0x33544146

0800caa8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b096      	sub	sp, #88	; 0x58
 800caac:	af00      	add	r7, sp, #0
 800caae:	60f8      	str	r0, [r7, #12]
 800cab0:	60b9      	str	r1, [r7, #8]
 800cab2:	4613      	mov	r3, r2
 800cab4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	2200      	movs	r2, #0
 800caba:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cabc:	68f8      	ldr	r0, [r7, #12]
 800cabe:	f7ff ff58 	bl	800c972 <get_ldnumber>
 800cac2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	da01      	bge.n	800cace <find_volume+0x26>
 800caca:	230b      	movs	r3, #11
 800cacc:	e22d      	b.n	800cf2a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cace:	4aa1      	ldr	r2, [pc, #644]	; (800cd54 <find_volume+0x2ac>)
 800cad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cad6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d101      	bne.n	800cae2 <find_volume+0x3a>
 800cade:	230c      	movs	r3, #12
 800cae0:	e223      	b.n	800cf2a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cae6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cae8:	79fb      	ldrb	r3, [r7, #7]
 800caea:	f023 0301 	bic.w	r3, r3, #1
 800caee:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800caf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d01a      	beq.n	800cb2e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800caf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cafa:	785b      	ldrb	r3, [r3, #1]
 800cafc:	4618      	mov	r0, r3
 800cafe:	f7fd ff09 	bl	800a914 <disk_status>
 800cb02:	4603      	mov	r3, r0
 800cb04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cb08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cb0c:	f003 0301 	and.w	r3, r3, #1
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d10c      	bne.n	800cb2e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cb14:	79fb      	ldrb	r3, [r7, #7]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d007      	beq.n	800cb2a <find_volume+0x82>
 800cb1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cb1e:	f003 0304 	and.w	r3, r3, #4
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d001      	beq.n	800cb2a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800cb26:	230a      	movs	r3, #10
 800cb28:	e1ff      	b.n	800cf2a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	e1fd      	b.n	800cf2a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cb2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb30:	2200      	movs	r2, #0
 800cb32:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cb34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb36:	b2da      	uxtb	r2, r3
 800cb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb3a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cb3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb3e:	785b      	ldrb	r3, [r3, #1]
 800cb40:	4618      	mov	r0, r3
 800cb42:	f7fd ff01 	bl	800a948 <disk_initialize>
 800cb46:	4603      	mov	r3, r0
 800cb48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cb4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cb50:	f003 0301 	and.w	r3, r3, #1
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d001      	beq.n	800cb5c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cb58:	2303      	movs	r3, #3
 800cb5a:	e1e6      	b.n	800cf2a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cb5c:	79fb      	ldrb	r3, [r7, #7]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d007      	beq.n	800cb72 <find_volume+0xca>
 800cb62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cb66:	f003 0304 	and.w	r3, r3, #4
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d001      	beq.n	800cb72 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800cb6e:	230a      	movs	r3, #10
 800cb70:	e1db      	b.n	800cf2a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cb72:	2300      	movs	r3, #0
 800cb74:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cb76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cb78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cb7a:	f7ff ff3f 	bl	800c9fc <check_fs>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cb84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb88:	2b02      	cmp	r3, #2
 800cb8a:	d149      	bne.n	800cc20 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	643b      	str	r3, [r7, #64]	; 0x40
 800cb90:	e01e      	b.n	800cbd0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cb92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb94:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cb98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb9a:	011b      	lsls	r3, r3, #4
 800cb9c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800cba0:	4413      	add	r3, r2
 800cba2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba6:	3304      	adds	r3, #4
 800cba8:	781b      	ldrb	r3, [r3, #0]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d006      	beq.n	800cbbc <find_volume+0x114>
 800cbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb0:	3308      	adds	r3, #8
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7fd ff64 	bl	800aa80 <ld_dword>
 800cbb8:	4602      	mov	r2, r0
 800cbba:	e000      	b.n	800cbbe <find_volume+0x116>
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbc0:	009b      	lsls	r3, r3, #2
 800cbc2:	3358      	adds	r3, #88	; 0x58
 800cbc4:	443b      	add	r3, r7
 800cbc6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cbca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbcc:	3301      	adds	r3, #1
 800cbce:	643b      	str	r3, [r7, #64]	; 0x40
 800cbd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbd2:	2b03      	cmp	r3, #3
 800cbd4:	d9dd      	bls.n	800cb92 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800cbda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d002      	beq.n	800cbe6 <find_volume+0x13e>
 800cbe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbe2:	3b01      	subs	r3, #1
 800cbe4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cbe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbe8:	009b      	lsls	r3, r3, #2
 800cbea:	3358      	adds	r3, #88	; 0x58
 800cbec:	443b      	add	r3, r7
 800cbee:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cbf2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cbf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d005      	beq.n	800cc06 <find_volume+0x15e>
 800cbfa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cbfc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cbfe:	f7ff fefd 	bl	800c9fc <check_fs>
 800cc02:	4603      	mov	r3, r0
 800cc04:	e000      	b.n	800cc08 <find_volume+0x160>
 800cc06:	2303      	movs	r3, #3
 800cc08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cc0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc10:	2b01      	cmp	r3, #1
 800cc12:	d905      	bls.n	800cc20 <find_volume+0x178>
 800cc14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc16:	3301      	adds	r3, #1
 800cc18:	643b      	str	r3, [r7, #64]	; 0x40
 800cc1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc1c:	2b03      	cmp	r3, #3
 800cc1e:	d9e2      	bls.n	800cbe6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cc20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc24:	2b04      	cmp	r3, #4
 800cc26:	d101      	bne.n	800cc2c <find_volume+0x184>
 800cc28:	2301      	movs	r3, #1
 800cc2a:	e17e      	b.n	800cf2a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cc2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc30:	2b01      	cmp	r3, #1
 800cc32:	d901      	bls.n	800cc38 <find_volume+0x190>
 800cc34:	230d      	movs	r3, #13
 800cc36:	e178      	b.n	800cf2a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3a:	3334      	adds	r3, #52	; 0x34
 800cc3c:	330b      	adds	r3, #11
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7fd ff06 	bl	800aa50 <ld_word>
 800cc44:	4603      	mov	r3, r0
 800cc46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc4a:	d001      	beq.n	800cc50 <find_volume+0x1a8>
 800cc4c:	230d      	movs	r3, #13
 800cc4e:	e16c      	b.n	800cf2a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cc50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc52:	3334      	adds	r3, #52	; 0x34
 800cc54:	3316      	adds	r3, #22
 800cc56:	4618      	mov	r0, r3
 800cc58:	f7fd fefa 	bl	800aa50 <ld_word>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cc60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d106      	bne.n	800cc74 <find_volume+0x1cc>
 800cc66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc68:	3334      	adds	r3, #52	; 0x34
 800cc6a:	3324      	adds	r3, #36	; 0x24
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f7fd ff07 	bl	800aa80 <ld_dword>
 800cc72:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800cc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cc78:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cc7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800cc80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc82:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cc84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc86:	789b      	ldrb	r3, [r3, #2]
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	d005      	beq.n	800cc98 <find_volume+0x1f0>
 800cc8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc8e:	789b      	ldrb	r3, [r3, #2]
 800cc90:	2b02      	cmp	r3, #2
 800cc92:	d001      	beq.n	800cc98 <find_volume+0x1f0>
 800cc94:	230d      	movs	r3, #13
 800cc96:	e148      	b.n	800cf2a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc9a:	789b      	ldrb	r3, [r3, #2]
 800cc9c:	461a      	mov	r2, r3
 800cc9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cca0:	fb02 f303 	mul.w	r3, r2, r3
 800cca4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ccac:	b29a      	uxth	r2, r3
 800ccae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ccb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb4:	895b      	ldrh	r3, [r3, #10]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d008      	beq.n	800cccc <find_volume+0x224>
 800ccba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccbc:	895b      	ldrh	r3, [r3, #10]
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc2:	895b      	ldrh	r3, [r3, #10]
 800ccc4:	3b01      	subs	r3, #1
 800ccc6:	4013      	ands	r3, r2
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d001      	beq.n	800ccd0 <find_volume+0x228>
 800cccc:	230d      	movs	r3, #13
 800ccce:	e12c      	b.n	800cf2a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ccd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd2:	3334      	adds	r3, #52	; 0x34
 800ccd4:	3311      	adds	r3, #17
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7fd feba 	bl	800aa50 <ld_word>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	461a      	mov	r2, r3
 800cce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce6:	891b      	ldrh	r3, [r3, #8]
 800cce8:	f003 030f 	and.w	r3, r3, #15
 800ccec:	b29b      	uxth	r3, r3
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d001      	beq.n	800ccf6 <find_volume+0x24e>
 800ccf2:	230d      	movs	r3, #13
 800ccf4:	e119      	b.n	800cf2a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ccf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf8:	3334      	adds	r3, #52	; 0x34
 800ccfa:	3313      	adds	r3, #19
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f7fd fea7 	bl	800aa50 <ld_word>
 800cd02:	4603      	mov	r3, r0
 800cd04:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cd06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d106      	bne.n	800cd1a <find_volume+0x272>
 800cd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0e:	3334      	adds	r3, #52	; 0x34
 800cd10:	3320      	adds	r3, #32
 800cd12:	4618      	mov	r0, r3
 800cd14:	f7fd feb4 	bl	800aa80 <ld_dword>
 800cd18:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cd1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd1c:	3334      	adds	r3, #52	; 0x34
 800cd1e:	330e      	adds	r3, #14
 800cd20:	4618      	mov	r0, r3
 800cd22:	f7fd fe95 	bl	800aa50 <ld_word>
 800cd26:	4603      	mov	r3, r0
 800cd28:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cd2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d101      	bne.n	800cd34 <find_volume+0x28c>
 800cd30:	230d      	movs	r3, #13
 800cd32:	e0fa      	b.n	800cf2a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cd34:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cd36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd38:	4413      	add	r3, r2
 800cd3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd3c:	8912      	ldrh	r2, [r2, #8]
 800cd3e:	0912      	lsrs	r2, r2, #4
 800cd40:	b292      	uxth	r2, r2
 800cd42:	4413      	add	r3, r2
 800cd44:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cd46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd4a:	429a      	cmp	r2, r3
 800cd4c:	d204      	bcs.n	800cd58 <find_volume+0x2b0>
 800cd4e:	230d      	movs	r3, #13
 800cd50:	e0eb      	b.n	800cf2a <find_volume+0x482>
 800cd52:	bf00      	nop
 800cd54:	20000eb4 	.word	0x20000eb4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cd58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd5c:	1ad3      	subs	r3, r2, r3
 800cd5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd60:	8952      	ldrh	r2, [r2, #10]
 800cd62:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd66:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d101      	bne.n	800cd72 <find_volume+0x2ca>
 800cd6e:	230d      	movs	r3, #13
 800cd70:	e0db      	b.n	800cf2a <find_volume+0x482>
		fmt = FS_FAT32;
 800cd72:	2303      	movs	r3, #3
 800cd74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	d802      	bhi.n	800cd88 <find_volume+0x2e0>
 800cd82:	2302      	movs	r3, #2
 800cd84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cd88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd8a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d802      	bhi.n	800cd98 <find_volume+0x2f0>
 800cd92:	2301      	movs	r3, #1
 800cd94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cd98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd9a:	1c9a      	adds	r2, r3, #2
 800cd9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd9e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800cda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cda4:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cda6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cda8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdaa:	441a      	add	r2, r3
 800cdac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdae:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800cdb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cdb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb4:	441a      	add	r2, r3
 800cdb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb8:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800cdba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cdbe:	2b03      	cmp	r3, #3
 800cdc0:	d11e      	bne.n	800ce00 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cdc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc4:	3334      	adds	r3, #52	; 0x34
 800cdc6:	332a      	adds	r3, #42	; 0x2a
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f7fd fe41 	bl	800aa50 <ld_word>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d001      	beq.n	800cdd8 <find_volume+0x330>
 800cdd4:	230d      	movs	r3, #13
 800cdd6:	e0a8      	b.n	800cf2a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cdd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdda:	891b      	ldrh	r3, [r3, #8]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d001      	beq.n	800cde4 <find_volume+0x33c>
 800cde0:	230d      	movs	r3, #13
 800cde2:	e0a2      	b.n	800cf2a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde6:	3334      	adds	r3, #52	; 0x34
 800cde8:	332c      	adds	r3, #44	; 0x2c
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7fd fe48 	bl	800aa80 <ld_dword>
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cdf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf8:	699b      	ldr	r3, [r3, #24]
 800cdfa:	009b      	lsls	r3, r3, #2
 800cdfc:	647b      	str	r3, [r7, #68]	; 0x44
 800cdfe:	e01f      	b.n	800ce40 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ce00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce02:	891b      	ldrh	r3, [r3, #8]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d101      	bne.n	800ce0c <find_volume+0x364>
 800ce08:	230d      	movs	r3, #13
 800ce0a:	e08e      	b.n	800cf2a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ce0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce12:	441a      	add	r2, r3
 800ce14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce16:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ce18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ce1c:	2b02      	cmp	r3, #2
 800ce1e:	d103      	bne.n	800ce28 <find_volume+0x380>
 800ce20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce22:	699b      	ldr	r3, [r3, #24]
 800ce24:	005b      	lsls	r3, r3, #1
 800ce26:	e00a      	b.n	800ce3e <find_volume+0x396>
 800ce28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce2a:	699a      	ldr	r2, [r3, #24]
 800ce2c:	4613      	mov	r3, r2
 800ce2e:	005b      	lsls	r3, r3, #1
 800ce30:	4413      	add	r3, r2
 800ce32:	085a      	lsrs	r2, r3, #1
 800ce34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce36:	699b      	ldr	r3, [r3, #24]
 800ce38:	f003 0301 	and.w	r3, r3, #1
 800ce3c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ce3e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ce40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce42:	69da      	ldr	r2, [r3, #28]
 800ce44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce46:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ce4a:	0a5b      	lsrs	r3, r3, #9
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d201      	bcs.n	800ce54 <find_volume+0x3ac>
 800ce50:	230d      	movs	r3, #13
 800ce52:	e06a      	b.n	800cf2a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ce54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce56:	f04f 32ff 	mov.w	r2, #4294967295
 800ce5a:	615a      	str	r2, [r3, #20]
 800ce5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce5e:	695a      	ldr	r2, [r3, #20]
 800ce60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce62:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800ce64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce66:	2280      	movs	r2, #128	; 0x80
 800ce68:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ce6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ce6e:	2b03      	cmp	r3, #3
 800ce70:	d149      	bne.n	800cf06 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ce72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce74:	3334      	adds	r3, #52	; 0x34
 800ce76:	3330      	adds	r3, #48	; 0x30
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f7fd fde9 	bl	800aa50 <ld_word>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	2b01      	cmp	r3, #1
 800ce82:	d140      	bne.n	800cf06 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ce84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce86:	3301      	adds	r3, #1
 800ce88:	4619      	mov	r1, r3
 800ce8a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ce8c:	f7fe f890 	bl	800afb0 <move_window>
 800ce90:	4603      	mov	r3, r0
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d137      	bne.n	800cf06 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800ce96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce98:	2200      	movs	r2, #0
 800ce9a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ce9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce9e:	3334      	adds	r3, #52	; 0x34
 800cea0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cea4:	4618      	mov	r0, r3
 800cea6:	f7fd fdd3 	bl	800aa50 <ld_word>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	461a      	mov	r2, r3
 800ceae:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d127      	bne.n	800cf06 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ceb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceb8:	3334      	adds	r3, #52	; 0x34
 800ceba:	4618      	mov	r0, r3
 800cebc:	f7fd fde0 	bl	800aa80 <ld_dword>
 800cec0:	4603      	mov	r3, r0
 800cec2:	4a1c      	ldr	r2, [pc, #112]	; (800cf34 <find_volume+0x48c>)
 800cec4:	4293      	cmp	r3, r2
 800cec6:	d11e      	bne.n	800cf06 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceca:	3334      	adds	r3, #52	; 0x34
 800cecc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ced0:	4618      	mov	r0, r3
 800ced2:	f7fd fdd5 	bl	800aa80 <ld_dword>
 800ced6:	4603      	mov	r3, r0
 800ced8:	4a17      	ldr	r2, [pc, #92]	; (800cf38 <find_volume+0x490>)
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d113      	bne.n	800cf06 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cee0:	3334      	adds	r3, #52	; 0x34
 800cee2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cee6:	4618      	mov	r0, r3
 800cee8:	f7fd fdca 	bl	800aa80 <ld_dword>
 800ceec:	4602      	mov	r2, r0
 800ceee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef4:	3334      	adds	r3, #52	; 0x34
 800cef6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cefa:	4618      	mov	r0, r3
 800cefc:	f7fd fdc0 	bl	800aa80 <ld_dword>
 800cf00:	4602      	mov	r2, r0
 800cf02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf04:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cf06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf08:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cf0c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cf0e:	4b0b      	ldr	r3, [pc, #44]	; (800cf3c <find_volume+0x494>)
 800cf10:	881b      	ldrh	r3, [r3, #0]
 800cf12:	3301      	adds	r3, #1
 800cf14:	b29a      	uxth	r2, r3
 800cf16:	4b09      	ldr	r3, [pc, #36]	; (800cf3c <find_volume+0x494>)
 800cf18:	801a      	strh	r2, [r3, #0]
 800cf1a:	4b08      	ldr	r3, [pc, #32]	; (800cf3c <find_volume+0x494>)
 800cf1c:	881a      	ldrh	r2, [r3, #0]
 800cf1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf20:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cf22:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cf24:	f7fd ffdc 	bl	800aee0 <clear_lock>
#endif
	return FR_OK;
 800cf28:	2300      	movs	r3, #0
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3758      	adds	r7, #88	; 0x58
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}
 800cf32:	bf00      	nop
 800cf34:	41615252 	.word	0x41615252
 800cf38:	61417272 	.word	0x61417272
 800cf3c:	20000eb8 	.word	0x20000eb8

0800cf40 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b084      	sub	sp, #16
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
 800cf48:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cf4a:	2309      	movs	r3, #9
 800cf4c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d01c      	beq.n	800cf8e <validate+0x4e>
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d018      	beq.n	800cf8e <validate+0x4e>
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	781b      	ldrb	r3, [r3, #0]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d013      	beq.n	800cf8e <validate+0x4e>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	889a      	ldrh	r2, [r3, #4]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	88db      	ldrh	r3, [r3, #6]
 800cf70:	429a      	cmp	r2, r3
 800cf72:	d10c      	bne.n	800cf8e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	785b      	ldrb	r3, [r3, #1]
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f7fd fcca 	bl	800a914 <disk_status>
 800cf80:	4603      	mov	r3, r0
 800cf82:	f003 0301 	and.w	r3, r3, #1
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d101      	bne.n	800cf8e <validate+0x4e>
			res = FR_OK;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cf8e:	7bfb      	ldrb	r3, [r7, #15]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d102      	bne.n	800cf9a <validate+0x5a>
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	e000      	b.n	800cf9c <validate+0x5c>
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	683a      	ldr	r2, [r7, #0]
 800cf9e:	6013      	str	r3, [r2, #0]
	return res;
 800cfa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3710      	adds	r7, #16
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
	...

0800cfac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b088      	sub	sp, #32
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	60f8      	str	r0, [r7, #12]
 800cfb4:	60b9      	str	r1, [r7, #8]
 800cfb6:	4613      	mov	r3, r2
 800cfb8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cfbe:	f107 0310 	add.w	r3, r7, #16
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f7ff fcd5 	bl	800c972 <get_ldnumber>
 800cfc8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cfca:	69fb      	ldr	r3, [r7, #28]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	da01      	bge.n	800cfd4 <f_mount+0x28>
 800cfd0:	230b      	movs	r3, #11
 800cfd2:	e02b      	b.n	800d02c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cfd4:	4a17      	ldr	r2, [pc, #92]	; (800d034 <f_mount+0x88>)
 800cfd6:	69fb      	ldr	r3, [r7, #28]
 800cfd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfdc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cfde:	69bb      	ldr	r3, [r7, #24]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d005      	beq.n	800cff0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cfe4:	69b8      	ldr	r0, [r7, #24]
 800cfe6:	f7fd ff7b 	bl	800aee0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cfea:	69bb      	ldr	r3, [r7, #24]
 800cfec:	2200      	movs	r2, #0
 800cfee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d002      	beq.n	800cffc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	2200      	movs	r2, #0
 800cffa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cffc:	68fa      	ldr	r2, [r7, #12]
 800cffe:	490d      	ldr	r1, [pc, #52]	; (800d034 <f_mount+0x88>)
 800d000:	69fb      	ldr	r3, [r7, #28]
 800d002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d002      	beq.n	800d012 <f_mount+0x66>
 800d00c:	79fb      	ldrb	r3, [r7, #7]
 800d00e:	2b01      	cmp	r3, #1
 800d010:	d001      	beq.n	800d016 <f_mount+0x6a>
 800d012:	2300      	movs	r3, #0
 800d014:	e00a      	b.n	800d02c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d016:	f107 010c 	add.w	r1, r7, #12
 800d01a:	f107 0308 	add.w	r3, r7, #8
 800d01e:	2200      	movs	r2, #0
 800d020:	4618      	mov	r0, r3
 800d022:	f7ff fd41 	bl	800caa8 <find_volume>
 800d026:	4603      	mov	r3, r0
 800d028:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d02a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d02c:	4618      	mov	r0, r3
 800d02e:	3720      	adds	r7, #32
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}
 800d034:	20000eb4 	.word	0x20000eb4

0800d038 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b09a      	sub	sp, #104	; 0x68
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	60f8      	str	r0, [r7, #12]
 800d040:	60b9      	str	r1, [r7, #8]
 800d042:	4613      	mov	r3, r2
 800d044:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d101      	bne.n	800d050 <f_open+0x18>
 800d04c:	2309      	movs	r3, #9
 800d04e:	e1bd      	b.n	800d3cc <f_open+0x394>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d050:	79fb      	ldrb	r3, [r7, #7]
 800d052:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d056:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d058:	79fa      	ldrb	r2, [r7, #7]
 800d05a:	f107 0110 	add.w	r1, r7, #16
 800d05e:	f107 0308 	add.w	r3, r7, #8
 800d062:	4618      	mov	r0, r3
 800d064:	f7ff fd20 	bl	800caa8 <find_volume>
 800d068:	4603      	mov	r3, r0
 800d06a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800d06e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d072:	2b00      	cmp	r3, #0
 800d074:	f040 81a1 	bne.w	800d3ba <f_open+0x382>
		dj.obj.fs = fs;
 800d078:	693b      	ldr	r3, [r7, #16]
 800d07a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800d07c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d080:	f001 f98a 	bl	800e398 <ff_memalloc>
 800d084:	65b8      	str	r0, [r7, #88]	; 0x58
 800d086:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d101      	bne.n	800d090 <f_open+0x58>
 800d08c:	2311      	movs	r3, #17
 800d08e:	e19d      	b.n	800d3cc <f_open+0x394>
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d094:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800d096:	68ba      	ldr	r2, [r7, #8]
 800d098:	f107 0314 	add.w	r3, r7, #20
 800d09c:	4611      	mov	r1, r2
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f7ff fbf6 	bl	800c890 <follow_path>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d0aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d11a      	bne.n	800d0e8 <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d0b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d0b6:	b25b      	sxtb	r3, r3
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	da03      	bge.n	800d0c4 <f_open+0x8c>
				res = FR_INVALID_NAME;
 800d0bc:	2306      	movs	r3, #6
 800d0be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d0c2:	e011      	b.n	800d0e8 <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d0c4:	79fb      	ldrb	r3, [r7, #7]
 800d0c6:	f023 0301 	bic.w	r3, r3, #1
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	bf14      	ite	ne
 800d0ce:	2301      	movne	r3, #1
 800d0d0:	2300      	moveq	r3, #0
 800d0d2:	b2db      	uxtb	r3, r3
 800d0d4:	461a      	mov	r2, r3
 800d0d6:	f107 0314 	add.w	r3, r7, #20
 800d0da:	4611      	mov	r1, r2
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f7fd fdb7 	bl	800ac50 <chk_lock>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d0e8:	79fb      	ldrb	r3, [r7, #7]
 800d0ea:	f003 031c 	and.w	r3, r3, #28
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d07f      	beq.n	800d1f2 <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 800d0f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d017      	beq.n	800d12a <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d0fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d0fe:	2b04      	cmp	r3, #4
 800d100:	d10e      	bne.n	800d120 <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d102:	f7fd fe01 	bl	800ad08 <enq_lock>
 800d106:	4603      	mov	r3, r0
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d006      	beq.n	800d11a <f_open+0xe2>
 800d10c:	f107 0314 	add.w	r3, r7, #20
 800d110:	4618      	mov	r0, r3
 800d112:	f7fe ffe5 	bl	800c0e0 <dir_register>
 800d116:	4603      	mov	r3, r0
 800d118:	e000      	b.n	800d11c <f_open+0xe4>
 800d11a:	2312      	movs	r3, #18
 800d11c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d120:	79fb      	ldrb	r3, [r7, #7]
 800d122:	f043 0308 	orr.w	r3, r3, #8
 800d126:	71fb      	strb	r3, [r7, #7]
 800d128:	e010      	b.n	800d14c <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d12a:	7ebb      	ldrb	r3, [r7, #26]
 800d12c:	f003 0311 	and.w	r3, r3, #17
 800d130:	2b00      	cmp	r3, #0
 800d132:	d003      	beq.n	800d13c <f_open+0x104>
					res = FR_DENIED;
 800d134:	2307      	movs	r3, #7
 800d136:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d13a:	e007      	b.n	800d14c <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d13c:	79fb      	ldrb	r3, [r7, #7]
 800d13e:	f003 0304 	and.w	r3, r3, #4
 800d142:	2b00      	cmp	r3, #0
 800d144:	d002      	beq.n	800d14c <f_open+0x114>
 800d146:	2308      	movs	r3, #8
 800d148:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d14c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d150:	2b00      	cmp	r3, #0
 800d152:	d168      	bne.n	800d226 <f_open+0x1ee>
 800d154:	79fb      	ldrb	r3, [r7, #7]
 800d156:	f003 0308 	and.w	r3, r3, #8
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d063      	beq.n	800d226 <f_open+0x1ee>
				dw = GET_FATTIME();
 800d15e:	f7fc fea1 	bl	8009ea4 <get_fattime>
 800d162:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d166:	330e      	adds	r3, #14
 800d168:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d16a:	4618      	mov	r0, r3
 800d16c:	f7fd fcc6 	bl	800aafc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d172:	3316      	adds	r3, #22
 800d174:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d176:	4618      	mov	r0, r3
 800d178:	f7fd fcc0 	bl	800aafc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d17c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d17e:	330b      	adds	r3, #11
 800d180:	2220      	movs	r2, #32
 800d182:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d188:	4611      	mov	r1, r2
 800d18a:	4618      	mov	r0, r3
 800d18c:	f7fe fc17 	bl	800b9be <ld_clust>
 800d190:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d192:	693b      	ldr	r3, [r7, #16]
 800d194:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d196:	2200      	movs	r2, #0
 800d198:	4618      	mov	r0, r3
 800d19a:	f7fe fc2f 	bl	800b9fc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1a0:	331c      	adds	r3, #28
 800d1a2:	2100      	movs	r1, #0
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f7fd fca9 	bl	800aafc <st_dword>
					fs->wflag = 1;
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	2201      	movs	r2, #1
 800d1ae:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d1b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d037      	beq.n	800d226 <f_open+0x1ee>
						dw = fs->winsect;
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1ba:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800d1bc:	f107 0314 	add.w	r3, r7, #20
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f7fe f942 	bl	800b44e <remove_chain>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800d1d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d126      	bne.n	800d226 <f_open+0x1ee>
							res = move_window(fs, dw);
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f7fd fee7 	bl	800afb0 <move_window>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d1ec:	3a01      	subs	r2, #1
 800d1ee:	611a      	str	r2, [r3, #16]
 800d1f0:	e019      	b.n	800d226 <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d1f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d115      	bne.n	800d226 <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d1fa:	7ebb      	ldrb	r3, [r7, #26]
 800d1fc:	f003 0310 	and.w	r3, r3, #16
 800d200:	2b00      	cmp	r3, #0
 800d202:	d003      	beq.n	800d20c <f_open+0x1d4>
					res = FR_NO_FILE;
 800d204:	2304      	movs	r3, #4
 800d206:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d20a:	e00c      	b.n	800d226 <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d20c:	79fb      	ldrb	r3, [r7, #7]
 800d20e:	f003 0302 	and.w	r3, r3, #2
 800d212:	2b00      	cmp	r3, #0
 800d214:	d007      	beq.n	800d226 <f_open+0x1ee>
 800d216:	7ebb      	ldrb	r3, [r7, #26]
 800d218:	f003 0301 	and.w	r3, r3, #1
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d002      	beq.n	800d226 <f_open+0x1ee>
						res = FR_DENIED;
 800d220:	2307      	movs	r3, #7
 800d222:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800d226:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d128      	bne.n	800d280 <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d22e:	79fb      	ldrb	r3, [r7, #7]
 800d230:	f003 0308 	and.w	r3, r3, #8
 800d234:	2b00      	cmp	r3, #0
 800d236:	d003      	beq.n	800d240 <f_open+0x208>
				mode |= FA_MODIFIED;
 800d238:	79fb      	ldrb	r3, [r7, #7]
 800d23a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d23e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d248:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d24e:	79fb      	ldrb	r3, [r7, #7]
 800d250:	f023 0301 	bic.w	r3, r3, #1
 800d254:	2b00      	cmp	r3, #0
 800d256:	bf14      	ite	ne
 800d258:	2301      	movne	r3, #1
 800d25a:	2300      	moveq	r3, #0
 800d25c:	b2db      	uxtb	r3, r3
 800d25e:	461a      	mov	r2, r3
 800d260:	f107 0314 	add.w	r3, r7, #20
 800d264:	4611      	mov	r1, r2
 800d266:	4618      	mov	r0, r3
 800d268:	f7fd fd70 	bl	800ad4c <inc_lock>
 800d26c:	4602      	mov	r2, r0
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	691b      	ldr	r3, [r3, #16]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d102      	bne.n	800d280 <f_open+0x248>
 800d27a:	2302      	movs	r3, #2
 800d27c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d280:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d284:	2b00      	cmp	r3, #0
 800d286:	f040 8095 	bne.w	800d3b4 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d28a:	693b      	ldr	r3, [r7, #16]
 800d28c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d28e:	4611      	mov	r1, r2
 800d290:	4618      	mov	r0, r3
 800d292:	f7fe fb94 	bl	800b9be <ld_clust>
 800d296:	4602      	mov	r2, r0
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d29c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d29e:	331c      	adds	r3, #28
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f7fd fbed 	bl	800aa80 <ld_dword>
 800d2a6:	4602      	mov	r2, r0
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d2b2:	693a      	ldr	r2, [r7, #16]
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	88da      	ldrh	r2, [r3, #6]
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	79fa      	ldrb	r2, [r7, #7]
 800d2c4:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	3330      	adds	r3, #48	; 0x30
 800d2dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d2e0:	2100      	movs	r1, #0
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f7fd fc57 	bl	800ab96 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d2e8:	79fb      	ldrb	r3, [r7, #7]
 800d2ea:	f003 0320 	and.w	r3, r3, #32
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d060      	beq.n	800d3b4 <f_open+0x37c>
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	68db      	ldr	r3, [r3, #12]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d05c      	beq.n	800d3b4 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	68da      	ldr	r2, [r3, #12]
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d302:	693b      	ldr	r3, [r7, #16]
 800d304:	895b      	ldrh	r3, [r3, #10]
 800d306:	025b      	lsls	r3, r3, #9
 800d308:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	689b      	ldr	r3, [r3, #8]
 800d30e:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	68db      	ldr	r3, [r3, #12]
 800d314:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d316:	e016      	b.n	800d346 <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d31c:	4618      	mov	r0, r3
 800d31e:	f7fd ff02 	bl	800b126 <get_fat>
 800d322:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800d324:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d326:	2b01      	cmp	r3, #1
 800d328:	d802      	bhi.n	800d330 <f_open+0x2f8>
 800d32a:	2302      	movs	r3, #2
 800d32c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d330:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d332:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d336:	d102      	bne.n	800d33e <f_open+0x306>
 800d338:	2301      	movs	r3, #1
 800d33a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d33e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d342:	1ad3      	subs	r3, r2, r3
 800d344:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d346:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d103      	bne.n	800d356 <f_open+0x31e>
 800d34e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d352:	429a      	cmp	r2, r3
 800d354:	d8e0      	bhi.n	800d318 <f_open+0x2e0>
				}
				fp->clust = clst;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d35a:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d35c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d360:	2b00      	cmp	r3, #0
 800d362:	d127      	bne.n	800d3b4 <f_open+0x37c>
 800d364:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d022      	beq.n	800d3b4 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d372:	4618      	mov	r0, r3
 800d374:	f7fd feb8 	bl	800b0e8 <clust2sect>
 800d378:	64b8      	str	r0, [r7, #72]	; 0x48
 800d37a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d103      	bne.n	800d388 <f_open+0x350>
						res = FR_INT_ERR;
 800d380:	2302      	movs	r3, #2
 800d382:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d386:	e015      	b.n	800d3b4 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d388:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d38a:	0a5a      	lsrs	r2, r3, #9
 800d38c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d38e:	441a      	add	r2, r3
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	7858      	ldrb	r0, [r3, #1]
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	6a1a      	ldr	r2, [r3, #32]
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	f7fd faf6 	bl	800a994 <disk_read>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d002      	beq.n	800d3b4 <f_open+0x37c>
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800d3b4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d3b6:	f000 fffb 	bl	800e3b0 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d3ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d002      	beq.n	800d3c8 <f_open+0x390>
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d3c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3768      	adds	r7, #104	; 0x68
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b08e      	sub	sp, #56	; 0x38
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	60f8      	str	r0, [r7, #12]
 800d3dc:	60b9      	str	r1, [r7, #8]
 800d3de:	607a      	str	r2, [r7, #4]
 800d3e0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	f107 0214 	add.w	r2, r7, #20
 800d3f2:	4611      	mov	r1, r2
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f7ff fda3 	bl	800cf40 <validate>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d400:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d404:	2b00      	cmp	r3, #0
 800d406:	d107      	bne.n	800d418 <f_read+0x44>
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	7d5b      	ldrb	r3, [r3, #21]
 800d40c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d410:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d414:	2b00      	cmp	r3, #0
 800d416:	d002      	beq.n	800d41e <f_read+0x4a>
 800d418:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d41c:	e115      	b.n	800d64a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	7d1b      	ldrb	r3, [r3, #20]
 800d422:	f003 0301 	and.w	r3, r3, #1
 800d426:	2b00      	cmp	r3, #0
 800d428:	d101      	bne.n	800d42e <f_read+0x5a>
 800d42a:	2307      	movs	r3, #7
 800d42c:	e10d      	b.n	800d64a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	68da      	ldr	r2, [r3, #12]
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	699b      	ldr	r3, [r3, #24]
 800d436:	1ad3      	subs	r3, r2, r3
 800d438:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d43a:	687a      	ldr	r2, [r7, #4]
 800d43c:	6a3b      	ldr	r3, [r7, #32]
 800d43e:	429a      	cmp	r2, r3
 800d440:	f240 80fe 	bls.w	800d640 <f_read+0x26c>
 800d444:	6a3b      	ldr	r3, [r7, #32]
 800d446:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d448:	e0fa      	b.n	800d640 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	699b      	ldr	r3, [r3, #24]
 800d44e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d452:	2b00      	cmp	r3, #0
 800d454:	f040 80c6 	bne.w	800d5e4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	699b      	ldr	r3, [r3, #24]
 800d45c:	0a5b      	lsrs	r3, r3, #9
 800d45e:	697a      	ldr	r2, [r7, #20]
 800d460:	8952      	ldrh	r2, [r2, #10]
 800d462:	3a01      	subs	r2, #1
 800d464:	4013      	ands	r3, r2
 800d466:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d468:	69fb      	ldr	r3, [r7, #28]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d12f      	bne.n	800d4ce <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	699b      	ldr	r3, [r3, #24]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d103      	bne.n	800d47e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	689b      	ldr	r3, [r3, #8]
 800d47a:	633b      	str	r3, [r7, #48]	; 0x30
 800d47c:	e013      	b.n	800d4a6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d482:	2b00      	cmp	r3, #0
 800d484:	d007      	beq.n	800d496 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	699b      	ldr	r3, [r3, #24]
 800d48a:	4619      	mov	r1, r3
 800d48c:	68f8      	ldr	r0, [r7, #12]
 800d48e:	f7fe f8db 	bl	800b648 <clmt_clust>
 800d492:	6338      	str	r0, [r7, #48]	; 0x30
 800d494:	e007      	b.n	800d4a6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d496:	68fa      	ldr	r2, [r7, #12]
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	69db      	ldr	r3, [r3, #28]
 800d49c:	4619      	mov	r1, r3
 800d49e:	4610      	mov	r0, r2
 800d4a0:	f7fd fe41 	bl	800b126 <get_fat>
 800d4a4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a8:	2b01      	cmp	r3, #1
 800d4aa:	d804      	bhi.n	800d4b6 <f_read+0xe2>
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	2202      	movs	r2, #2
 800d4b0:	755a      	strb	r2, [r3, #21]
 800d4b2:	2302      	movs	r3, #2
 800d4b4:	e0c9      	b.n	800d64a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4bc:	d104      	bne.n	800d4c8 <f_read+0xf4>
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	755a      	strb	r2, [r3, #21]
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	e0c0      	b.n	800d64a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4cc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d4ce:	697a      	ldr	r2, [r7, #20]
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	69db      	ldr	r3, [r3, #28]
 800d4d4:	4619      	mov	r1, r3
 800d4d6:	4610      	mov	r0, r2
 800d4d8:	f7fd fe06 	bl	800b0e8 <clust2sect>
 800d4dc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d4de:	69bb      	ldr	r3, [r7, #24]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d104      	bne.n	800d4ee <f_read+0x11a>
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	2202      	movs	r2, #2
 800d4e8:	755a      	strb	r2, [r3, #21]
 800d4ea:	2302      	movs	r3, #2
 800d4ec:	e0ad      	b.n	800d64a <f_read+0x276>
			sect += csect;
 800d4ee:	69ba      	ldr	r2, [r7, #24]
 800d4f0:	69fb      	ldr	r3, [r7, #28]
 800d4f2:	4413      	add	r3, r2
 800d4f4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	0a5b      	lsrs	r3, r3, #9
 800d4fa:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d039      	beq.n	800d576 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d502:	69fa      	ldr	r2, [r7, #28]
 800d504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d506:	4413      	add	r3, r2
 800d508:	697a      	ldr	r2, [r7, #20]
 800d50a:	8952      	ldrh	r2, [r2, #10]
 800d50c:	4293      	cmp	r3, r2
 800d50e:	d905      	bls.n	800d51c <f_read+0x148>
					cc = fs->csize - csect;
 800d510:	697b      	ldr	r3, [r7, #20]
 800d512:	895b      	ldrh	r3, [r3, #10]
 800d514:	461a      	mov	r2, r3
 800d516:	69fb      	ldr	r3, [r7, #28]
 800d518:	1ad3      	subs	r3, r2, r3
 800d51a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	7858      	ldrb	r0, [r3, #1]
 800d520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d522:	69ba      	ldr	r2, [r7, #24]
 800d524:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d526:	f7fd fa35 	bl	800a994 <disk_read>
 800d52a:	4603      	mov	r3, r0
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d004      	beq.n	800d53a <f_read+0x166>
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	2201      	movs	r2, #1
 800d534:	755a      	strb	r2, [r3, #21]
 800d536:	2301      	movs	r3, #1
 800d538:	e087      	b.n	800d64a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	7d1b      	ldrb	r3, [r3, #20]
 800d53e:	b25b      	sxtb	r3, r3
 800d540:	2b00      	cmp	r3, #0
 800d542:	da14      	bge.n	800d56e <f_read+0x19a>
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	6a1a      	ldr	r2, [r3, #32]
 800d548:	69bb      	ldr	r3, [r7, #24]
 800d54a:	1ad3      	subs	r3, r2, r3
 800d54c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d54e:	429a      	cmp	r2, r3
 800d550:	d90d      	bls.n	800d56e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	6a1a      	ldr	r2, [r3, #32]
 800d556:	69bb      	ldr	r3, [r7, #24]
 800d558:	1ad3      	subs	r3, r2, r3
 800d55a:	025b      	lsls	r3, r3, #9
 800d55c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d55e:	18d0      	adds	r0, r2, r3
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	3330      	adds	r3, #48	; 0x30
 800d564:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d568:	4619      	mov	r1, r3
 800d56a:	f7fd faf3 	bl	800ab54 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d570:	025b      	lsls	r3, r3, #9
 800d572:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d574:	e050      	b.n	800d618 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	6a1b      	ldr	r3, [r3, #32]
 800d57a:	69ba      	ldr	r2, [r7, #24]
 800d57c:	429a      	cmp	r2, r3
 800d57e:	d02e      	beq.n	800d5de <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	7d1b      	ldrb	r3, [r3, #20]
 800d584:	b25b      	sxtb	r3, r3
 800d586:	2b00      	cmp	r3, #0
 800d588:	da18      	bge.n	800d5bc <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	7858      	ldrb	r0, [r3, #1]
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	6a1a      	ldr	r2, [r3, #32]
 800d598:	2301      	movs	r3, #1
 800d59a:	f7fd fa1b 	bl	800a9d4 <disk_write>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d004      	beq.n	800d5ae <f_read+0x1da>
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	2201      	movs	r2, #1
 800d5a8:	755a      	strb	r2, [r3, #21]
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	e04d      	b.n	800d64a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	7d1b      	ldrb	r3, [r3, #20]
 800d5b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5b6:	b2da      	uxtb	r2, r3
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	7858      	ldrb	r0, [r3, #1]
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	69ba      	ldr	r2, [r7, #24]
 800d5ca:	f7fd f9e3 	bl	800a994 <disk_read>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d004      	beq.n	800d5de <f_read+0x20a>
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	755a      	strb	r2, [r3, #21]
 800d5da:	2301      	movs	r3, #1
 800d5dc:	e035      	b.n	800d64a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	69ba      	ldr	r2, [r7, #24]
 800d5e2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	699b      	ldr	r3, [r3, #24]
 800d5e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5ec:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d5f0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d5f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d901      	bls.n	800d5fe <f_read+0x22a>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	699b      	ldr	r3, [r3, #24]
 800d608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d60c:	4413      	add	r3, r2
 800d60e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d610:	4619      	mov	r1, r3
 800d612:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d614:	f7fd fa9e 	bl	800ab54 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d61c:	4413      	add	r3, r2
 800d61e:	627b      	str	r3, [r7, #36]	; 0x24
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	699a      	ldr	r2, [r3, #24]
 800d624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d626:	441a      	add	r2, r3
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	619a      	str	r2, [r3, #24]
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	681a      	ldr	r2, [r3, #0]
 800d630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d632:	441a      	add	r2, r3
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	601a      	str	r2, [r3, #0]
 800d638:	687a      	ldr	r2, [r7, #4]
 800d63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d63c:	1ad3      	subs	r3, r2, r3
 800d63e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2b00      	cmp	r3, #0
 800d644:	f47f af01 	bne.w	800d44a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d648:	2300      	movs	r3, #0
}
 800d64a:	4618      	mov	r0, r3
 800d64c:	3738      	adds	r7, #56	; 0x38
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}

0800d652 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d652:	b580      	push	{r7, lr}
 800d654:	b08c      	sub	sp, #48	; 0x30
 800d656:	af00      	add	r7, sp, #0
 800d658:	60f8      	str	r0, [r7, #12]
 800d65a:	60b9      	str	r1, [r7, #8]
 800d65c:	607a      	str	r2, [r7, #4]
 800d65e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	2200      	movs	r2, #0
 800d668:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	f107 0210 	add.w	r2, r7, #16
 800d670:	4611      	mov	r1, r2
 800d672:	4618      	mov	r0, r3
 800d674:	f7ff fc64 	bl	800cf40 <validate>
 800d678:	4603      	mov	r3, r0
 800d67a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d67e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d682:	2b00      	cmp	r3, #0
 800d684:	d107      	bne.n	800d696 <f_write+0x44>
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	7d5b      	ldrb	r3, [r3, #21]
 800d68a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d68e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d692:	2b00      	cmp	r3, #0
 800d694:	d002      	beq.n	800d69c <f_write+0x4a>
 800d696:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d69a:	e14b      	b.n	800d934 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	7d1b      	ldrb	r3, [r3, #20]
 800d6a0:	f003 0302 	and.w	r3, r3, #2
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d101      	bne.n	800d6ac <f_write+0x5a>
 800d6a8:	2307      	movs	r3, #7
 800d6aa:	e143      	b.n	800d934 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	699a      	ldr	r2, [r3, #24]
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	441a      	add	r2, r3
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	699b      	ldr	r3, [r3, #24]
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	f080 812d 	bcs.w	800d918 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	699b      	ldr	r3, [r3, #24]
 800d6c2:	43db      	mvns	r3, r3
 800d6c4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d6c6:	e127      	b.n	800d918 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	699b      	ldr	r3, [r3, #24]
 800d6cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	f040 80e3 	bne.w	800d89c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	699b      	ldr	r3, [r3, #24]
 800d6da:	0a5b      	lsrs	r3, r3, #9
 800d6dc:	693a      	ldr	r2, [r7, #16]
 800d6de:	8952      	ldrh	r2, [r2, #10]
 800d6e0:	3a01      	subs	r2, #1
 800d6e2:	4013      	ands	r3, r2
 800d6e4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d6e6:	69bb      	ldr	r3, [r7, #24]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d143      	bne.n	800d774 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	699b      	ldr	r3, [r3, #24]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d10c      	bne.n	800d70e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	689b      	ldr	r3, [r3, #8]
 800d6f8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d11a      	bne.n	800d736 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	2100      	movs	r1, #0
 800d704:	4618      	mov	r0, r3
 800d706:	f7fd ff07 	bl	800b518 <create_chain>
 800d70a:	62b8      	str	r0, [r7, #40]	; 0x28
 800d70c:	e013      	b.n	800d736 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d712:	2b00      	cmp	r3, #0
 800d714:	d007      	beq.n	800d726 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	699b      	ldr	r3, [r3, #24]
 800d71a:	4619      	mov	r1, r3
 800d71c:	68f8      	ldr	r0, [r7, #12]
 800d71e:	f7fd ff93 	bl	800b648 <clmt_clust>
 800d722:	62b8      	str	r0, [r7, #40]	; 0x28
 800d724:	e007      	b.n	800d736 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d726:	68fa      	ldr	r2, [r7, #12]
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	69db      	ldr	r3, [r3, #28]
 800d72c:	4619      	mov	r1, r3
 800d72e:	4610      	mov	r0, r2
 800d730:	f7fd fef2 	bl	800b518 <create_chain>
 800d734:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d738:	2b00      	cmp	r3, #0
 800d73a:	f000 80f2 	beq.w	800d922 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d740:	2b01      	cmp	r3, #1
 800d742:	d104      	bne.n	800d74e <f_write+0xfc>
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	2202      	movs	r2, #2
 800d748:	755a      	strb	r2, [r3, #21]
 800d74a:	2302      	movs	r3, #2
 800d74c:	e0f2      	b.n	800d934 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d750:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d754:	d104      	bne.n	800d760 <f_write+0x10e>
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	2201      	movs	r2, #1
 800d75a:	755a      	strb	r2, [r3, #21]
 800d75c:	2301      	movs	r3, #1
 800d75e:	e0e9      	b.n	800d934 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d764:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	689b      	ldr	r3, [r3, #8]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d102      	bne.n	800d774 <f_write+0x122>
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d772:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	7d1b      	ldrb	r3, [r3, #20]
 800d778:	b25b      	sxtb	r3, r3
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	da18      	bge.n	800d7b0 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	7858      	ldrb	r0, [r3, #1]
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	6a1a      	ldr	r2, [r3, #32]
 800d78c:	2301      	movs	r3, #1
 800d78e:	f7fd f921 	bl	800a9d4 <disk_write>
 800d792:	4603      	mov	r3, r0
 800d794:	2b00      	cmp	r3, #0
 800d796:	d004      	beq.n	800d7a2 <f_write+0x150>
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	2201      	movs	r2, #1
 800d79c:	755a      	strb	r2, [r3, #21]
 800d79e:	2301      	movs	r3, #1
 800d7a0:	e0c8      	b.n	800d934 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	7d1b      	ldrb	r3, [r3, #20]
 800d7a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7aa:	b2da      	uxtb	r2, r3
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d7b0:	693a      	ldr	r2, [r7, #16]
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	69db      	ldr	r3, [r3, #28]
 800d7b6:	4619      	mov	r1, r3
 800d7b8:	4610      	mov	r0, r2
 800d7ba:	f7fd fc95 	bl	800b0e8 <clust2sect>
 800d7be:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d104      	bne.n	800d7d0 <f_write+0x17e>
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	2202      	movs	r2, #2
 800d7ca:	755a      	strb	r2, [r3, #21]
 800d7cc:	2302      	movs	r3, #2
 800d7ce:	e0b1      	b.n	800d934 <f_write+0x2e2>
			sect += csect;
 800d7d0:	697a      	ldr	r2, [r7, #20]
 800d7d2:	69bb      	ldr	r3, [r7, #24]
 800d7d4:	4413      	add	r3, r2
 800d7d6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	0a5b      	lsrs	r3, r3, #9
 800d7dc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d7de:	6a3b      	ldr	r3, [r7, #32]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d03c      	beq.n	800d85e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d7e4:	69ba      	ldr	r2, [r7, #24]
 800d7e6:	6a3b      	ldr	r3, [r7, #32]
 800d7e8:	4413      	add	r3, r2
 800d7ea:	693a      	ldr	r2, [r7, #16]
 800d7ec:	8952      	ldrh	r2, [r2, #10]
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	d905      	bls.n	800d7fe <f_write+0x1ac>
					cc = fs->csize - csect;
 800d7f2:	693b      	ldr	r3, [r7, #16]
 800d7f4:	895b      	ldrh	r3, [r3, #10]
 800d7f6:	461a      	mov	r2, r3
 800d7f8:	69bb      	ldr	r3, [r7, #24]
 800d7fa:	1ad3      	subs	r3, r2, r3
 800d7fc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d7fe:	693b      	ldr	r3, [r7, #16]
 800d800:	7858      	ldrb	r0, [r3, #1]
 800d802:	6a3b      	ldr	r3, [r7, #32]
 800d804:	697a      	ldr	r2, [r7, #20]
 800d806:	69f9      	ldr	r1, [r7, #28]
 800d808:	f7fd f8e4 	bl	800a9d4 <disk_write>
 800d80c:	4603      	mov	r3, r0
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d004      	beq.n	800d81c <f_write+0x1ca>
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	2201      	movs	r2, #1
 800d816:	755a      	strb	r2, [r3, #21]
 800d818:	2301      	movs	r3, #1
 800d81a:	e08b      	b.n	800d934 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	6a1a      	ldr	r2, [r3, #32]
 800d820:	697b      	ldr	r3, [r7, #20]
 800d822:	1ad3      	subs	r3, r2, r3
 800d824:	6a3a      	ldr	r2, [r7, #32]
 800d826:	429a      	cmp	r2, r3
 800d828:	d915      	bls.n	800d856 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	6a1a      	ldr	r2, [r3, #32]
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	1ad3      	subs	r3, r2, r3
 800d838:	025b      	lsls	r3, r3, #9
 800d83a:	69fa      	ldr	r2, [r7, #28]
 800d83c:	4413      	add	r3, r2
 800d83e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d842:	4619      	mov	r1, r3
 800d844:	f7fd f986 	bl	800ab54 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	7d1b      	ldrb	r3, [r3, #20]
 800d84c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d850:	b2da      	uxtb	r2, r3
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d856:	6a3b      	ldr	r3, [r7, #32]
 800d858:	025b      	lsls	r3, r3, #9
 800d85a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d85c:	e03f      	b.n	800d8de <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	6a1b      	ldr	r3, [r3, #32]
 800d862:	697a      	ldr	r2, [r7, #20]
 800d864:	429a      	cmp	r2, r3
 800d866:	d016      	beq.n	800d896 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	699a      	ldr	r2, [r3, #24]
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d870:	429a      	cmp	r2, r3
 800d872:	d210      	bcs.n	800d896 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d874:	693b      	ldr	r3, [r7, #16]
 800d876:	7858      	ldrb	r0, [r3, #1]
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d87e:	2301      	movs	r3, #1
 800d880:	697a      	ldr	r2, [r7, #20]
 800d882:	f7fd f887 	bl	800a994 <disk_read>
 800d886:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d004      	beq.n	800d896 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	2201      	movs	r2, #1
 800d890:	755a      	strb	r2, [r3, #21]
 800d892:	2301      	movs	r3, #1
 800d894:	e04e      	b.n	800d934 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	697a      	ldr	r2, [r7, #20]
 800d89a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	699b      	ldr	r3, [r3, #24]
 800d8a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8a4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d8a8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d8aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	429a      	cmp	r2, r3
 800d8b0:	d901      	bls.n	800d8b6 <f_write+0x264>
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	699b      	ldr	r3, [r3, #24]
 800d8c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8c4:	4413      	add	r3, r2
 800d8c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8c8:	69f9      	ldr	r1, [r7, #28]
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f7fd f942 	bl	800ab54 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	7d1b      	ldrb	r3, [r3, #20]
 800d8d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d8d8:	b2da      	uxtb	r2, r3
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d8de:	69fa      	ldr	r2, [r7, #28]
 800d8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e2:	4413      	add	r3, r2
 800d8e4:	61fb      	str	r3, [r7, #28]
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	699a      	ldr	r2, [r3, #24]
 800d8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ec:	441a      	add	r2, r3
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	619a      	str	r2, [r3, #24]
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	68da      	ldr	r2, [r3, #12]
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	699b      	ldr	r3, [r3, #24]
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	bf38      	it	cc
 800d8fe:	461a      	movcc	r2, r3
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	60da      	str	r2, [r3, #12]
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	681a      	ldr	r2, [r3, #0]
 800d908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90a:	441a      	add	r2, r3
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	601a      	str	r2, [r3, #0]
 800d910:	687a      	ldr	r2, [r7, #4]
 800d912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d914:	1ad3      	subs	r3, r2, r3
 800d916:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	f47f aed4 	bne.w	800d6c8 <f_write+0x76>
 800d920:	e000      	b.n	800d924 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d922:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	7d1b      	ldrb	r3, [r3, #20]
 800d928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d92c:	b2da      	uxtb	r2, r3
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d932:	2300      	movs	r3, #0
}
 800d934:	4618      	mov	r0, r3
 800d936:	3730      	adds	r7, #48	; 0x30
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}

0800d93c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b086      	sub	sp, #24
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f107 0208 	add.w	r2, r7, #8
 800d94a:	4611      	mov	r1, r2
 800d94c:	4618      	mov	r0, r3
 800d94e:	f7ff faf7 	bl	800cf40 <validate>
 800d952:	4603      	mov	r3, r0
 800d954:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d956:	7dfb      	ldrb	r3, [r7, #23]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d168      	bne.n	800da2e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	7d1b      	ldrb	r3, [r3, #20]
 800d960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d964:	2b00      	cmp	r3, #0
 800d966:	d062      	beq.n	800da2e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	7d1b      	ldrb	r3, [r3, #20]
 800d96c:	b25b      	sxtb	r3, r3
 800d96e:	2b00      	cmp	r3, #0
 800d970:	da15      	bge.n	800d99e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	7858      	ldrb	r0, [r3, #1]
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	6a1a      	ldr	r2, [r3, #32]
 800d980:	2301      	movs	r3, #1
 800d982:	f7fd f827 	bl	800a9d4 <disk_write>
 800d986:	4603      	mov	r3, r0
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d001      	beq.n	800d990 <f_sync+0x54>
 800d98c:	2301      	movs	r3, #1
 800d98e:	e04f      	b.n	800da30 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	7d1b      	ldrb	r3, [r3, #20]
 800d994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d998:	b2da      	uxtb	r2, r3
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d99e:	f7fc fa81 	bl	8009ea4 <get_fattime>
 800d9a2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d9a4:	68ba      	ldr	r2, [r7, #8]
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9aa:	4619      	mov	r1, r3
 800d9ac:	4610      	mov	r0, r2
 800d9ae:	f7fd faff 	bl	800afb0 <move_window>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d9b6:	7dfb      	ldrb	r3, [r7, #23]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d138      	bne.n	800da2e <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9c0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	330b      	adds	r3, #11
 800d9c6:	781a      	ldrb	r2, [r3, #0]
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	330b      	adds	r3, #11
 800d9cc:	f042 0220 	orr.w	r2, r2, #32
 800d9d0:	b2d2      	uxtb	r2, r2
 800d9d2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6818      	ldr	r0, [r3, #0]
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	689b      	ldr	r3, [r3, #8]
 800d9dc:	461a      	mov	r2, r3
 800d9de:	68f9      	ldr	r1, [r7, #12]
 800d9e0:	f7fe f80c 	bl	800b9fc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	f103 021c 	add.w	r2, r3, #28
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	68db      	ldr	r3, [r3, #12]
 800d9ee:	4619      	mov	r1, r3
 800d9f0:	4610      	mov	r0, r2
 800d9f2:	f7fd f883 	bl	800aafc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	3316      	adds	r3, #22
 800d9fa:	6939      	ldr	r1, [r7, #16]
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f7fd f87d 	bl	800aafc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	3312      	adds	r3, #18
 800da06:	2100      	movs	r1, #0
 800da08:	4618      	mov	r0, r3
 800da0a:	f7fd f85c 	bl	800aac6 <st_word>
					fs->wflag = 1;
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	2201      	movs	r2, #1
 800da12:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	4618      	mov	r0, r3
 800da18:	f7fd faf8 	bl	800b00c <sync_fs>
 800da1c:	4603      	mov	r3, r0
 800da1e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	7d1b      	ldrb	r3, [r3, #20]
 800da24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da28:	b2da      	uxtb	r2, r3
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800da2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800da30:	4618      	mov	r0, r3
 800da32:	3718      	adds	r7, #24
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}

0800da38 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b084      	sub	sp, #16
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f7ff ff7b 	bl	800d93c <f_sync>
 800da46:	4603      	mov	r3, r0
 800da48:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800da4a:	7bfb      	ldrb	r3, [r7, #15]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d118      	bne.n	800da82 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f107 0208 	add.w	r2, r7, #8
 800da56:	4611      	mov	r1, r2
 800da58:	4618      	mov	r0, r3
 800da5a:	f7ff fa71 	bl	800cf40 <validate>
 800da5e:	4603      	mov	r3, r0
 800da60:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800da62:	7bfb      	ldrb	r3, [r7, #15]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d10c      	bne.n	800da82 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	691b      	ldr	r3, [r3, #16]
 800da6c:	4618      	mov	r0, r3
 800da6e:	f7fd f9fb 	bl	800ae68 <dec_lock>
 800da72:	4603      	mov	r3, r0
 800da74:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800da76:	7bfb      	ldrb	r3, [r7, #15]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d102      	bne.n	800da82 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2200      	movs	r2, #0
 800da80:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800da82:	7bfb      	ldrb	r3, [r7, #15]
}
 800da84:	4618      	mov	r0, r3
 800da86:	3710      	adds	r7, #16
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}

0800da8c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b086      	sub	sp, #24
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d101      	bne.n	800daa0 <f_opendir+0x14>
 800da9c:	2309      	movs	r3, #9
 800da9e:	e074      	b.n	800db8a <f_opendir+0xfe>

	/* Get logical drive */
	obj = &dp->obj;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800daa4:	f107 0108 	add.w	r1, r7, #8
 800daa8:	463b      	mov	r3, r7
 800daaa:	2200      	movs	r2, #0
 800daac:	4618      	mov	r0, r3
 800daae:	f7fe fffb 	bl	800caa8 <find_volume>
 800dab2:	4603      	mov	r3, r0
 800dab4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dab6:	7dfb      	ldrb	r3, [r7, #23]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d15f      	bne.n	800db7c <f_opendir+0xf0>
		obj->fs = fs;
 800dabc:	68ba      	ldr	r2, [r7, #8]
 800dabe:	693b      	ldr	r3, [r7, #16]
 800dac0:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 800dac2:	f44f 7000 	mov.w	r0, #512	; 0x200
 800dac6:	f000 fc67 	bl	800e398 <ff_memalloc>
 800daca:	60f8      	str	r0, [r7, #12]
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d101      	bne.n	800dad6 <f_opendir+0x4a>
 800dad2:	2311      	movs	r3, #17
 800dad4:	e059      	b.n	800db8a <f_opendir+0xfe>
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	68fa      	ldr	r2, [r7, #12]
 800dada:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	4619      	mov	r1, r3
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f7fe fed5 	bl	800c890 <follow_path>
 800dae6:	4603      	mov	r3, r0
 800dae8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800daea:	7dfb      	ldrb	r3, [r7, #23]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d13d      	bne.n	800db6c <f_opendir+0xe0>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800daf6:	b25b      	sxtb	r3, r3
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	db12      	blt.n	800db22 <f_opendir+0x96>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800dafc:	693b      	ldr	r3, [r7, #16]
 800dafe:	799b      	ldrb	r3, [r3, #6]
 800db00:	f003 0310 	and.w	r3, r3, #16
 800db04:	2b00      	cmp	r3, #0
 800db06:	d00a      	beq.n	800db1e <f_opendir+0x92>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800db08:	68ba      	ldr	r2, [r7, #8]
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6a1b      	ldr	r3, [r3, #32]
 800db0e:	4619      	mov	r1, r3
 800db10:	4610      	mov	r0, r2
 800db12:	f7fd ff54 	bl	800b9be <ld_clust>
 800db16:	4602      	mov	r2, r0
 800db18:	693b      	ldr	r3, [r7, #16]
 800db1a:	609a      	str	r2, [r3, #8]
 800db1c:	e001      	b.n	800db22 <f_opendir+0x96>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800db1e:	2305      	movs	r3, #5
 800db20:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800db22:	7dfb      	ldrb	r3, [r7, #23]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d121      	bne.n	800db6c <f_opendir+0xe0>
				obj->id = fs->id;
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	88da      	ldrh	r2, [r3, #6]
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800db30:	2100      	movs	r1, #0
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f7fd fdbc 	bl	800b6b0 <dir_sdi>
 800db38:	4603      	mov	r3, r0
 800db3a:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800db3c:	7dfb      	ldrb	r3, [r7, #23]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d114      	bne.n	800db6c <f_opendir+0xe0>
					if (obj->sclust) {
 800db42:	693b      	ldr	r3, [r7, #16]
 800db44:	689b      	ldr	r3, [r3, #8]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d00d      	beq.n	800db66 <f_opendir+0xda>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800db4a:	2100      	movs	r1, #0
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f7fd f8fd 	bl	800ad4c <inc_lock>
 800db52:	4602      	mov	r2, r0
 800db54:	693b      	ldr	r3, [r7, #16]
 800db56:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800db58:	693b      	ldr	r3, [r7, #16]
 800db5a:	691b      	ldr	r3, [r3, #16]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d105      	bne.n	800db6c <f_opendir+0xe0>
 800db60:	2312      	movs	r3, #18
 800db62:	75fb      	strb	r3, [r7, #23]
 800db64:	e002      	b.n	800db6c <f_opendir+0xe0>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800db66:	693b      	ldr	r3, [r7, #16]
 800db68:	2200      	movs	r2, #0
 800db6a:	611a      	str	r2, [r3, #16]
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 800db6c:	68f8      	ldr	r0, [r7, #12]
 800db6e:	f000 fc1f 	bl	800e3b0 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800db72:	7dfb      	ldrb	r3, [r7, #23]
 800db74:	2b04      	cmp	r3, #4
 800db76:	d101      	bne.n	800db7c <f_opendir+0xf0>
 800db78:	2305      	movs	r3, #5
 800db7a:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800db7c:	7dfb      	ldrb	r3, [r7, #23]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d002      	beq.n	800db88 <f_opendir+0xfc>
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	2200      	movs	r2, #0
 800db86:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800db88:	7dfb      	ldrb	r3, [r7, #23]
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3718      	adds	r7, #24
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}

0800db92 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800db92:	b580      	push	{r7, lr}
 800db94:	b084      	sub	sp, #16
 800db96:	af00      	add	r7, sp, #0
 800db98:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	f107 0208 	add.w	r2, r7, #8
 800dba0:	4611      	mov	r1, r2
 800dba2:	4618      	mov	r0, r3
 800dba4:	f7ff f9cc 	bl	800cf40 <validate>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800dbac:	7bfb      	ldrb	r3, [r7, #15]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d110      	bne.n	800dbd4 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	691b      	ldr	r3, [r3, #16]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d006      	beq.n	800dbc8 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	691b      	ldr	r3, [r3, #16]
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f7fd f952 	bl	800ae68 <dec_lock>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800dbc8:	7bfb      	ldrb	r3, [r7, #15]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d102      	bne.n	800dbd4 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800dbd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3710      	adds	r7, #16
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}

0800dbde <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800dbde:	b580      	push	{r7, lr}
 800dbe0:	b086      	sub	sp, #24
 800dbe2:	af00      	add	r7, sp, #0
 800dbe4:	6078      	str	r0, [r7, #4]
 800dbe6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f107 020c 	add.w	r2, r7, #12
 800dbee:	4611      	mov	r1, r2
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f7ff f9a5 	bl	800cf40 <validate>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dbfa:	7dfb      	ldrb	r3, [r7, #23]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d136      	bne.n	800dc6e <f_readdir+0x90>
		if (!fno) {
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d106      	bne.n	800dc14 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800dc06:	2100      	movs	r1, #0
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f7fd fd51 	bl	800b6b0 <dir_sdi>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	75fb      	strb	r3, [r7, #23]
 800dc12:	e02c      	b.n	800dc6e <f_readdir+0x90>
		} else {
			INIT_NAMBUF(fs);
 800dc14:	f44f 7000 	mov.w	r0, #512	; 0x200
 800dc18:	f000 fbbe 	bl	800e398 <ff_memalloc>
 800dc1c:	6138      	str	r0, [r7, #16]
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d101      	bne.n	800dc28 <f_readdir+0x4a>
 800dc24:	2311      	movs	r3, #17
 800dc26:	e023      	b.n	800dc70 <f_readdir+0x92>
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	693a      	ldr	r2, [r7, #16]
 800dc2c:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 800dc2e:	2100      	movs	r1, #0
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f7fe f8ee 	bl	800be12 <dir_read>
 800dc36:	4603      	mov	r3, r0
 800dc38:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800dc3a:	7dfb      	ldrb	r3, [r7, #23]
 800dc3c:	2b04      	cmp	r3, #4
 800dc3e:	d101      	bne.n	800dc44 <f_readdir+0x66>
 800dc40:	2300      	movs	r3, #0
 800dc42:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 800dc44:	7dfb      	ldrb	r3, [r7, #23]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d10e      	bne.n	800dc68 <f_readdir+0x8a>
				get_fileinfo(dp, fno);		/* Get the object information */
 800dc4a:	6839      	ldr	r1, [r7, #0]
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f7fe fb89 	bl	800c364 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800dc52:	2100      	movs	r1, #0
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f7fd fda6 	bl	800b7a6 <dir_next>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800dc5e:	7dfb      	ldrb	r3, [r7, #23]
 800dc60:	2b04      	cmp	r3, #4
 800dc62:	d101      	bne.n	800dc68 <f_readdir+0x8a>
 800dc64:	2300      	movs	r3, #0
 800dc66:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 800dc68:	6938      	ldr	r0, [r7, #16]
 800dc6a:	f000 fba1 	bl	800e3b0 <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 800dc6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	3718      	adds	r7, #24
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd80      	pop	{r7, pc}

0800dc78 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b0a0      	sub	sp, #128	; 0x80
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800dc80:	2300      	movs	r3, #0
 800dc82:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800dc84:	f107 0108 	add.w	r1, r7, #8
 800dc88:	1d3b      	adds	r3, r7, #4
 800dc8a:	2202      	movs	r2, #2
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f7fe ff0b 	bl	800caa8 <find_volume>
 800dc92:	4603      	mov	r3, r0
 800dc94:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 800dc98:	68bb      	ldr	r3, [r7, #8]
 800dc9a:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 800dc9c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	f040 809e 	bne.w	800dde2 <f_unlink+0x16a>
		INIT_NAMBUF(fs);
 800dca6:	f44f 7000 	mov.w	r0, #512	; 0x200
 800dcaa:	f000 fb75 	bl	800e398 <ff_memalloc>
 800dcae:	6778      	str	r0, [r7, #116]	; 0x74
 800dcb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d101      	bne.n	800dcba <f_unlink+0x42>
 800dcb6:	2311      	movs	r3, #17
 800dcb8:	e095      	b.n	800dde6 <f_unlink+0x16e>
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800dcbe:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);		/* Follow the file path */
 800dcc0:	687a      	ldr	r2, [r7, #4]
 800dcc2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800dcc6:	4611      	mov	r1, r2
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f7fe fde1 	bl	800c890 <follow_path>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800dcd4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d108      	bne.n	800dcee <f_unlink+0x76>
 800dcdc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800dce0:	2102      	movs	r1, #2
 800dce2:	4618      	mov	r0, r3
 800dce4:	f7fc ffb4 	bl	800ac50 <chk_lock>
 800dce8:	4603      	mov	r3, r0
 800dcea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800dcee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d172      	bne.n	800dddc <f_unlink+0x164>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800dcf6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800dcfa:	b25b      	sxtb	r3, r3
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	da03      	bge.n	800dd08 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800dd00:	2306      	movs	r3, #6
 800dd02:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800dd06:	e008      	b.n	800dd1a <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800dd08:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800dd0c:	f003 0301 	and.w	r3, r3, #1
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d002      	beq.n	800dd1a <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800dd14:	2307      	movs	r3, #7
 800dd16:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 800dd1a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d134      	bne.n	800dd8c <f_unlink+0x114>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dd26:	4611      	mov	r1, r2
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f7fd fe48 	bl	800b9be <ld_clust>
 800dd2e:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800dd30:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800dd34:	f003 0310 	and.w	r3, r3, #16
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d027      	beq.n	800dd8c <f_unlink+0x114>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	60fb      	str	r3, [r7, #12]
						sdj.obj.sclust = dclst;
 800dd40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd42:	617b      	str	r3, [r7, #20]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800dd44:	f107 030c 	add.w	r3, r7, #12
 800dd48:	2100      	movs	r1, #0
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f7fd fcb0 	bl	800b6b0 <dir_sdi>
 800dd50:	4603      	mov	r3, r0
 800dd52:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 800dd56:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d116      	bne.n	800dd8c <f_unlink+0x114>
							res = dir_read(&sdj, 0);			/* Read an item */
 800dd5e:	f107 030c 	add.w	r3, r7, #12
 800dd62:	2100      	movs	r1, #0
 800dd64:	4618      	mov	r0, r3
 800dd66:	f7fe f854 	bl	800be12 <dir_read>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800dd70:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d102      	bne.n	800dd7e <f_unlink+0x106>
 800dd78:	2307      	movs	r3, #7
 800dd7a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800dd7e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dd82:	2b04      	cmp	r3, #4
 800dd84:	d102      	bne.n	800dd8c <f_unlink+0x114>
 800dd86:	2300      	movs	r3, #0
 800dd88:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 800dd8c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d123      	bne.n	800dddc <f_unlink+0x164>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800dd94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f7fe fa99 	bl	800c2d0 <dir_remove>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800dda4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d10c      	bne.n	800ddc6 <f_unlink+0x14e>
 800ddac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d009      	beq.n	800ddc6 <f_unlink+0x14e>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800ddb2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f7fd fb47 	bl	800b44e <remove_chain>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800ddc6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d106      	bne.n	800dddc <f_unlink+0x164>
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f7fd f91b 	bl	800b00c <sync_fs>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
 800dddc:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800ddde:	f000 fae7 	bl	800e3b0 <ff_memfree>
	}

	LEAVE_FF(fs, res);
 800dde2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800dde6:	4618      	mov	r0, r3
 800dde8:	3780      	adds	r7, #128	; 0x80
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd80      	pop	{r7, pc}

0800ddee <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800ddee:	b580      	push	{r7, lr}
 800ddf0:	b098      	sub	sp, #96	; 0x60
 800ddf2:	af00      	add	r7, sp, #0
 800ddf4:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800ddf6:	f107 0108 	add.w	r1, r7, #8
 800ddfa:	1d3b      	adds	r3, r7, #4
 800ddfc:	2202      	movs	r2, #2
 800ddfe:	4618      	mov	r0, r3
 800de00:	f7fe fe52 	bl	800caa8 <find_volume>
 800de04:	4603      	mov	r3, r0
 800de06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800de0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de12:	2b00      	cmp	r3, #0
 800de14:	f040 80fc 	bne.w	800e010 <f_mkdir+0x222>
		INIT_NAMBUF(fs);
 800de18:	f44f 7000 	mov.w	r0, #512	; 0x200
 800de1c:	f000 fabc 	bl	800e398 <ff_memalloc>
 800de20:	64f8      	str	r0, [r7, #76]	; 0x4c
 800de22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de24:	2b00      	cmp	r3, #0
 800de26:	d101      	bne.n	800de2c <f_mkdir+0x3e>
 800de28:	2311      	movs	r3, #17
 800de2a:	e0f3      	b.n	800e014 <f_mkdir+0x226>
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800de30:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);			/* Follow the file path */
 800de32:	687a      	ldr	r2, [r7, #4]
 800de34:	f107 030c 	add.w	r3, r7, #12
 800de38:	4611      	mov	r1, r2
 800de3a:	4618      	mov	r0, r3
 800de3c:	f7fe fd28 	bl	800c890 <follow_path>
 800de40:	4603      	mov	r3, r0
 800de42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800de46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d102      	bne.n	800de54 <f_mkdir+0x66>
 800de4e:	2308      	movs	r3, #8
 800de50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800de54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de58:	2b04      	cmp	r3, #4
 800de5a:	f040 80d6 	bne.w	800e00a <f_mkdir+0x21c>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800de5e:	f107 030c 	add.w	r3, r7, #12
 800de62:	2100      	movs	r1, #0
 800de64:	4618      	mov	r0, r3
 800de66:	f7fd fb57 	bl	800b518 <create_chain>
 800de6a:	64b8      	str	r0, [r7, #72]	; 0x48
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	895b      	ldrh	r3, [r3, #10]
 800de70:	025b      	lsls	r3, r3, #9
 800de72:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800de74:	2300      	movs	r3, #0
 800de76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800de7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d102      	bne.n	800de86 <f_mkdir+0x98>
 800de80:	2307      	movs	r3, #7
 800de82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 800de86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de88:	2b01      	cmp	r3, #1
 800de8a:	d102      	bne.n	800de92 <f_mkdir+0xa4>
 800de8c:	2302      	movs	r3, #2
 800de8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800de92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de98:	d102      	bne.n	800dea0 <f_mkdir+0xb2>
 800de9a:	2301      	movs	r3, #1
 800de9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800dea0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d106      	bne.n	800deb6 <f_mkdir+0xc8>
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	4618      	mov	r0, r3
 800deac:	f7fd f83c 	bl	800af28 <sync_window>
 800deb0:	4603      	mov	r3, r0
 800deb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 800deb6:	f7fb fff5 	bl	8009ea4 <get_fattime>
 800deba:	6478      	str	r0, [r7, #68]	; 0x44
			if (res == FR_OK) {					/* Initialize the new directory table */
 800debc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d16a      	bne.n	800df9a <f_mkdir+0x1ac>
				dsc = clust2sect(fs, dcl);
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dec8:	4618      	mov	r0, r3
 800deca:	f7fd f90d 	bl	800b0e8 <clust2sect>
 800dece:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 800ded0:	68bb      	ldr	r3, [r7, #8]
 800ded2:	3334      	adds	r3, #52	; 0x34
 800ded4:	643b      	str	r3, [r7, #64]	; 0x40
				mem_set(dir, 0, SS(fs));
 800ded6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800deda:	2100      	movs	r1, #0
 800dedc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800dede:	f7fc fe5a 	bl	800ab96 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800dee2:	220b      	movs	r2, #11
 800dee4:	2120      	movs	r1, #32
 800dee6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800dee8:	f7fc fe55 	bl	800ab96 <mem_set>
					dir[DIR_Name] = '.';
 800deec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800deee:	222e      	movs	r2, #46	; 0x2e
 800def0:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800def2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800def4:	330b      	adds	r3, #11
 800def6:	2210      	movs	r2, #16
 800def8:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800defa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800defc:	3316      	adds	r3, #22
 800defe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df00:	4618      	mov	r0, r3
 800df02:	f7fc fdfb 	bl	800aafc <st_dword>
					st_clust(fs, dir, dcl);
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800df0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800df0c:	4618      	mov	r0, r3
 800df0e:	f7fd fd75 	bl	800b9fc <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800df12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df14:	3320      	adds	r3, #32
 800df16:	2220      	movs	r2, #32
 800df18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800df1a:	4618      	mov	r0, r3
 800df1c:	f7fc fe1a 	bl	800ab54 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800df20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df22:	3321      	adds	r3, #33	; 0x21
 800df24:	222e      	movs	r2, #46	; 0x2e
 800df26:	701a      	strb	r2, [r3, #0]
 800df28:	697b      	ldr	r3, [r7, #20]
 800df2a:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	781b      	ldrb	r3, [r3, #0]
 800df30:	2b03      	cmp	r3, #3
 800df32:	d106      	bne.n	800df42 <f_mkdir+0x154>
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df38:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800df3a:	429a      	cmp	r2, r3
 800df3c:	d101      	bne.n	800df42 <f_mkdir+0x154>
 800df3e:	2300      	movs	r3, #0
 800df40:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 800df42:	68b8      	ldr	r0, [r7, #8]
 800df44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df46:	3320      	adds	r3, #32
 800df48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800df4a:	4619      	mov	r1, r3
 800df4c:	f7fd fd56 	bl	800b9fc <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800df50:	68bb      	ldr	r3, [r7, #8]
 800df52:	895b      	ldrh	r3, [r3, #10]
 800df54:	65bb      	str	r3, [r7, #88]	; 0x58
 800df56:	e01b      	b.n	800df90 <f_mkdir+0x1a2>
					fs->winsect = dsc++;
 800df58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df5a:	1c5a      	adds	r2, r3, #1
 800df5c:	657a      	str	r2, [r7, #84]	; 0x54
 800df5e:	68ba      	ldr	r2, [r7, #8]
 800df60:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	2201      	movs	r2, #1
 800df66:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	4618      	mov	r0, r3
 800df6c:	f7fc ffdc 	bl	800af28 <sync_window>
 800df70:	4603      	mov	r3, r0
 800df72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 800df76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d10c      	bne.n	800df98 <f_mkdir+0x1aa>
					mem_set(dir, 0, SS(fs));
 800df7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df82:	2100      	movs	r1, #0
 800df84:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800df86:	f7fc fe06 	bl	800ab96 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800df8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df8c:	3b01      	subs	r3, #1
 800df8e:	65bb      	str	r3, [r7, #88]	; 0x58
 800df90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df92:	2b00      	cmp	r3, #0
 800df94:	d1e0      	bne.n	800df58 <f_mkdir+0x16a>
 800df96:	e000      	b.n	800df9a <f_mkdir+0x1ac>
					if (res != FR_OK) break;
 800df98:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800df9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d107      	bne.n	800dfb2 <f_mkdir+0x1c4>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800dfa2:	f107 030c 	add.w	r3, r7, #12
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f7fe f89a 	bl	800c0e0 <dir_register>
 800dfac:	4603      	mov	r3, r0
 800dfae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 800dfb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d120      	bne.n	800dffc <f_mkdir+0x20e>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800dfba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfbc:	643b      	str	r3, [r7, #64]	; 0x40
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800dfbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dfc0:	3316      	adds	r3, #22
 800dfc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f7fc fd99 	bl	800aafc <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dfce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f7fd fd13 	bl	800b9fc <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800dfd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dfd8:	330b      	adds	r3, #11
 800dfda:	2210      	movs	r2, #16
 800dfdc:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	2201      	movs	r2, #1
 800dfe2:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800dfe4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d10e      	bne.n	800e00a <f_mkdir+0x21c>
					res = sync_fs(fs);
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	4618      	mov	r0, r3
 800dff0:	f7fd f80c 	bl	800b00c <sync_fs>
 800dff4:	4603      	mov	r3, r0
 800dff6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dffa:	e006      	b.n	800e00a <f_mkdir+0x21c>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800dffc:	f107 030c 	add.w	r3, r7, #12
 800e000:	2200      	movs	r2, #0
 800e002:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e004:	4618      	mov	r0, r3
 800e006:	f7fd fa22 	bl	800b44e <remove_chain>
			}
		}
		FREE_NAMBUF();
 800e00a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e00c:	f000 f9d0 	bl	800e3b0 <ff_memfree>
	}

	LEAVE_FF(fs, res);
 800e010:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800e014:	4618      	mov	r0, r3
 800e016:	3760      	adds	r7, #96	; 0x60
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}

0800e01c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b084      	sub	sp, #16
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
 800e024:	460b      	mov	r3, r1
 800e026:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800e028:	78fb      	ldrb	r3, [r7, #3]
 800e02a:	2b0a      	cmp	r3, #10
 800e02c:	d103      	bne.n	800e036 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800e02e:	210d      	movs	r1, #13
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f7ff fff3 	bl	800e01c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	685b      	ldr	r3, [r3, #4]
 800e03a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	db25      	blt.n	800e08e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	1c5a      	adds	r2, r3, #1
 800e046:	60fa      	str	r2, [r7, #12]
 800e048:	687a      	ldr	r2, [r7, #4]
 800e04a:	4413      	add	r3, r2
 800e04c:	78fa      	ldrb	r2, [r7, #3]
 800e04e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	2b3c      	cmp	r3, #60	; 0x3c
 800e054:	dd12      	ble.n	800e07c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6818      	ldr	r0, [r3, #0]
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f103 010c 	add.w	r1, r3, #12
 800e060:	68fa      	ldr	r2, [r7, #12]
 800e062:	f107 0308 	add.w	r3, r7, #8
 800e066:	f7ff faf4 	bl	800d652 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800e06a:	68ba      	ldr	r2, [r7, #8]
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	429a      	cmp	r2, r3
 800e070:	d101      	bne.n	800e076 <putc_bfd+0x5a>
 800e072:	2300      	movs	r3, #0
 800e074:	e001      	b.n	800e07a <putc_bfd+0x5e>
 800e076:	f04f 33ff 	mov.w	r3, #4294967295
 800e07a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	68fa      	ldr	r2, [r7, #12]
 800e080:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	689b      	ldr	r3, [r3, #8]
 800e086:	1c5a      	adds	r2, r3, #1
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	609a      	str	r2, [r3, #8]
 800e08c:	e000      	b.n	800e090 <putc_bfd+0x74>
	if (i < 0) return;
 800e08e:	bf00      	nop
}
 800e090:	3710      	adds	r7, #16
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}

0800e096 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800e096:	b580      	push	{r7, lr}
 800e098:	b084      	sub	sp, #16
 800e09a:	af00      	add	r7, sp, #0
 800e09c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	685b      	ldr	r3, [r3, #4]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	db16      	blt.n	800e0d4 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6818      	ldr	r0, [r3, #0]
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	f103 010c 	add.w	r1, r3, #12
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	685b      	ldr	r3, [r3, #4]
 800e0b4:	461a      	mov	r2, r3
 800e0b6:	f107 030c 	add.w	r3, r7, #12
 800e0ba:	f7ff faca 	bl	800d652 <f_write>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d107      	bne.n	800e0d4 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	685b      	ldr	r3, [r3, #4]
 800e0c8:	68fa      	ldr	r2, [r7, #12]
 800e0ca:	4293      	cmp	r3, r2
 800e0cc:	d102      	bne.n	800e0d4 <putc_flush+0x3e>
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	689b      	ldr	r3, [r3, #8]
 800e0d2:	e001      	b.n	800e0d8 <putc_flush+0x42>
	return EOF;
 800e0d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3710      	adds	r7, #16
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}

0800e0e0 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800e0e0:	b480      	push	{r7}
 800e0e2:	b083      	sub	sp, #12
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
 800e0e8:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	683a      	ldr	r2, [r7, #0]
 800e0ee:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	605a      	str	r2, [r3, #4]
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	685a      	ldr	r2, [r3, #4]
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	609a      	str	r2, [r3, #8]
}
 800e0fe:	bf00      	nop
 800e100:	370c      	adds	r7, #12
 800e102:	46bd      	mov	sp, r7
 800e104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e108:	4770      	bx	lr

0800e10a <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800e10a:	b580      	push	{r7, lr}
 800e10c:	b096      	sub	sp, #88	; 0x58
 800e10e:	af00      	add	r7, sp, #0
 800e110:	6078      	str	r0, [r7, #4]
 800e112:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800e114:	f107 030c 	add.w	r3, r7, #12
 800e118:	6839      	ldr	r1, [r7, #0]
 800e11a:	4618      	mov	r0, r3
 800e11c:	f7ff ffe0 	bl	800e0e0 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800e120:	e009      	b.n	800e136 <f_puts+0x2c>
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	1c5a      	adds	r2, r3, #1
 800e126:	607a      	str	r2, [r7, #4]
 800e128:	781a      	ldrb	r2, [r3, #0]
 800e12a:	f107 030c 	add.w	r3, r7, #12
 800e12e:	4611      	mov	r1, r2
 800e130:	4618      	mov	r0, r3
 800e132:	f7ff ff73 	bl	800e01c <putc_bfd>
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	781b      	ldrb	r3, [r3, #0]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d1f1      	bne.n	800e122 <f_puts+0x18>
	return putc_flush(&pb);
 800e13e:	f107 030c 	add.w	r3, r7, #12
 800e142:	4618      	mov	r0, r3
 800e144:	f7ff ffa7 	bl	800e096 <putc_flush>
 800e148:	4603      	mov	r3, r0
}
 800e14a:	4618      	mov	r0, r3
 800e14c:	3758      	adds	r7, #88	; 0x58
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}
	...

0800e154 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e154:	b480      	push	{r7}
 800e156:	b087      	sub	sp, #28
 800e158:	af00      	add	r7, sp, #0
 800e15a:	60f8      	str	r0, [r7, #12]
 800e15c:	60b9      	str	r1, [r7, #8]
 800e15e:	4613      	mov	r3, r2
 800e160:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e162:	2301      	movs	r3, #1
 800e164:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e166:	2300      	movs	r3, #0
 800e168:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e16a:	4b1f      	ldr	r3, [pc, #124]	; (800e1e8 <FATFS_LinkDriverEx+0x94>)
 800e16c:	7a5b      	ldrb	r3, [r3, #9]
 800e16e:	b2db      	uxtb	r3, r3
 800e170:	2b00      	cmp	r3, #0
 800e172:	d131      	bne.n	800e1d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e174:	4b1c      	ldr	r3, [pc, #112]	; (800e1e8 <FATFS_LinkDriverEx+0x94>)
 800e176:	7a5b      	ldrb	r3, [r3, #9]
 800e178:	b2db      	uxtb	r3, r3
 800e17a:	461a      	mov	r2, r3
 800e17c:	4b1a      	ldr	r3, [pc, #104]	; (800e1e8 <FATFS_LinkDriverEx+0x94>)
 800e17e:	2100      	movs	r1, #0
 800e180:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e182:	4b19      	ldr	r3, [pc, #100]	; (800e1e8 <FATFS_LinkDriverEx+0x94>)
 800e184:	7a5b      	ldrb	r3, [r3, #9]
 800e186:	b2db      	uxtb	r3, r3
 800e188:	4a17      	ldr	r2, [pc, #92]	; (800e1e8 <FATFS_LinkDriverEx+0x94>)
 800e18a:	009b      	lsls	r3, r3, #2
 800e18c:	4413      	add	r3, r2
 800e18e:	68fa      	ldr	r2, [r7, #12]
 800e190:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e192:	4b15      	ldr	r3, [pc, #84]	; (800e1e8 <FATFS_LinkDriverEx+0x94>)
 800e194:	7a5b      	ldrb	r3, [r3, #9]
 800e196:	b2db      	uxtb	r3, r3
 800e198:	461a      	mov	r2, r3
 800e19a:	4b13      	ldr	r3, [pc, #76]	; (800e1e8 <FATFS_LinkDriverEx+0x94>)
 800e19c:	4413      	add	r3, r2
 800e19e:	79fa      	ldrb	r2, [r7, #7]
 800e1a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e1a2:	4b11      	ldr	r3, [pc, #68]	; (800e1e8 <FATFS_LinkDriverEx+0x94>)
 800e1a4:	7a5b      	ldrb	r3, [r3, #9]
 800e1a6:	b2db      	uxtb	r3, r3
 800e1a8:	1c5a      	adds	r2, r3, #1
 800e1aa:	b2d1      	uxtb	r1, r2
 800e1ac:	4a0e      	ldr	r2, [pc, #56]	; (800e1e8 <FATFS_LinkDriverEx+0x94>)
 800e1ae:	7251      	strb	r1, [r2, #9]
 800e1b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e1b2:	7dbb      	ldrb	r3, [r7, #22]
 800e1b4:	3330      	adds	r3, #48	; 0x30
 800e1b6:	b2da      	uxtb	r2, r3
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e1bc:	68bb      	ldr	r3, [r7, #8]
 800e1be:	3301      	adds	r3, #1
 800e1c0:	223a      	movs	r2, #58	; 0x3a
 800e1c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e1c4:	68bb      	ldr	r3, [r7, #8]
 800e1c6:	3302      	adds	r3, #2
 800e1c8:	222f      	movs	r2, #47	; 0x2f
 800e1ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e1cc:	68bb      	ldr	r3, [r7, #8]
 800e1ce:	3303      	adds	r3, #3
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e1d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1da:	4618      	mov	r0, r3
 800e1dc:	371c      	adds	r7, #28
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e4:	4770      	bx	lr
 800e1e6:	bf00      	nop
 800e1e8:	20000edc 	.word	0x20000edc

0800e1ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b082      	sub	sp, #8
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	6839      	ldr	r1, [r7, #0]
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f7ff ffaa 	bl	800e154 <FATFS_LinkDriverEx>
 800e200:	4603      	mov	r3, r0
}
 800e202:	4618      	mov	r0, r3
 800e204:	3708      	adds	r7, #8
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}
	...

0800e20c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800e20c:	b480      	push	{r7}
 800e20e:	b085      	sub	sp, #20
 800e210:	af00      	add	r7, sp, #0
 800e212:	4603      	mov	r3, r0
 800e214:	6039      	str	r1, [r7, #0]
 800e216:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e218:	88fb      	ldrh	r3, [r7, #6]
 800e21a:	2b7f      	cmp	r3, #127	; 0x7f
 800e21c:	d802      	bhi.n	800e224 <ff_convert+0x18>
		c = chr;
 800e21e:	88fb      	ldrh	r3, [r7, #6]
 800e220:	81fb      	strh	r3, [r7, #14]
 800e222:	e025      	b.n	800e270 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d00b      	beq.n	800e242 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e22a:	88fb      	ldrh	r3, [r7, #6]
 800e22c:	2bff      	cmp	r3, #255	; 0xff
 800e22e:	d805      	bhi.n	800e23c <ff_convert+0x30>
 800e230:	88fb      	ldrh	r3, [r7, #6]
 800e232:	3b80      	subs	r3, #128	; 0x80
 800e234:	4a12      	ldr	r2, [pc, #72]	; (800e280 <ff_convert+0x74>)
 800e236:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e23a:	e000      	b.n	800e23e <ff_convert+0x32>
 800e23c:	2300      	movs	r3, #0
 800e23e:	81fb      	strh	r3, [r7, #14]
 800e240:	e016      	b.n	800e270 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800e242:	2300      	movs	r3, #0
 800e244:	81fb      	strh	r3, [r7, #14]
 800e246:	e009      	b.n	800e25c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e248:	89fb      	ldrh	r3, [r7, #14]
 800e24a:	4a0d      	ldr	r2, [pc, #52]	; (800e280 <ff_convert+0x74>)
 800e24c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e250:	88fa      	ldrh	r2, [r7, #6]
 800e252:	429a      	cmp	r2, r3
 800e254:	d006      	beq.n	800e264 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e256:	89fb      	ldrh	r3, [r7, #14]
 800e258:	3301      	adds	r3, #1
 800e25a:	81fb      	strh	r3, [r7, #14]
 800e25c:	89fb      	ldrh	r3, [r7, #14]
 800e25e:	2b7f      	cmp	r3, #127	; 0x7f
 800e260:	d9f2      	bls.n	800e248 <ff_convert+0x3c>
 800e262:	e000      	b.n	800e266 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e264:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e266:	89fb      	ldrh	r3, [r7, #14]
 800e268:	3380      	adds	r3, #128	; 0x80
 800e26a:	b29b      	uxth	r3, r3
 800e26c:	b2db      	uxtb	r3, r3
 800e26e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e270:	89fb      	ldrh	r3, [r7, #14]
}
 800e272:	4618      	mov	r0, r3
 800e274:	3714      	adds	r7, #20
 800e276:	46bd      	mov	sp, r7
 800e278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27c:	4770      	bx	lr
 800e27e:	bf00      	nop
 800e280:	08010728 	.word	0x08010728

0800e284 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e284:	b480      	push	{r7}
 800e286:	b087      	sub	sp, #28
 800e288:	af00      	add	r7, sp, #0
 800e28a:	4603      	mov	r3, r0
 800e28c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e28e:	88fb      	ldrh	r3, [r7, #6]
 800e290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e294:	d201      	bcs.n	800e29a <ff_wtoupper+0x16>
 800e296:	4b3e      	ldr	r3, [pc, #248]	; (800e390 <ff_wtoupper+0x10c>)
 800e298:	e000      	b.n	800e29c <ff_wtoupper+0x18>
 800e29a:	4b3e      	ldr	r3, [pc, #248]	; (800e394 <ff_wtoupper+0x110>)
 800e29c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800e29e:	697b      	ldr	r3, [r7, #20]
 800e2a0:	1c9a      	adds	r2, r3, #2
 800e2a2:	617a      	str	r2, [r7, #20]
 800e2a4:	881b      	ldrh	r3, [r3, #0]
 800e2a6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800e2a8:	8a7b      	ldrh	r3, [r7, #18]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d068      	beq.n	800e380 <ff_wtoupper+0xfc>
 800e2ae:	88fa      	ldrh	r2, [r7, #6]
 800e2b0:	8a7b      	ldrh	r3, [r7, #18]
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	d364      	bcc.n	800e380 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	1c9a      	adds	r2, r3, #2
 800e2ba:	617a      	str	r2, [r7, #20]
 800e2bc:	881b      	ldrh	r3, [r3, #0]
 800e2be:	823b      	strh	r3, [r7, #16]
 800e2c0:	8a3b      	ldrh	r3, [r7, #16]
 800e2c2:	0a1b      	lsrs	r3, r3, #8
 800e2c4:	81fb      	strh	r3, [r7, #14]
 800e2c6:	8a3b      	ldrh	r3, [r7, #16]
 800e2c8:	b2db      	uxtb	r3, r3
 800e2ca:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800e2cc:	88fa      	ldrh	r2, [r7, #6]
 800e2ce:	8a79      	ldrh	r1, [r7, #18]
 800e2d0:	8a3b      	ldrh	r3, [r7, #16]
 800e2d2:	440b      	add	r3, r1
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	da49      	bge.n	800e36c <ff_wtoupper+0xe8>
			switch (cmd) {
 800e2d8:	89fb      	ldrh	r3, [r7, #14]
 800e2da:	2b08      	cmp	r3, #8
 800e2dc:	d84f      	bhi.n	800e37e <ff_wtoupper+0xfa>
 800e2de:	a201      	add	r2, pc, #4	; (adr r2, 800e2e4 <ff_wtoupper+0x60>)
 800e2e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2e4:	0800e309 	.word	0x0800e309
 800e2e8:	0800e31b 	.word	0x0800e31b
 800e2ec:	0800e331 	.word	0x0800e331
 800e2f0:	0800e339 	.word	0x0800e339
 800e2f4:	0800e341 	.word	0x0800e341
 800e2f8:	0800e349 	.word	0x0800e349
 800e2fc:	0800e351 	.word	0x0800e351
 800e300:	0800e359 	.word	0x0800e359
 800e304:	0800e361 	.word	0x0800e361
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e308:	88fa      	ldrh	r2, [r7, #6]
 800e30a:	8a7b      	ldrh	r3, [r7, #18]
 800e30c:	1ad3      	subs	r3, r2, r3
 800e30e:	005b      	lsls	r3, r3, #1
 800e310:	697a      	ldr	r2, [r7, #20]
 800e312:	4413      	add	r3, r2
 800e314:	881b      	ldrh	r3, [r3, #0]
 800e316:	80fb      	strh	r3, [r7, #6]
 800e318:	e027      	b.n	800e36a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e31a:	88fa      	ldrh	r2, [r7, #6]
 800e31c:	8a7b      	ldrh	r3, [r7, #18]
 800e31e:	1ad3      	subs	r3, r2, r3
 800e320:	b29b      	uxth	r3, r3
 800e322:	f003 0301 	and.w	r3, r3, #1
 800e326:	b29b      	uxth	r3, r3
 800e328:	88fa      	ldrh	r2, [r7, #6]
 800e32a:	1ad3      	subs	r3, r2, r3
 800e32c:	80fb      	strh	r3, [r7, #6]
 800e32e:	e01c      	b.n	800e36a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e330:	88fb      	ldrh	r3, [r7, #6]
 800e332:	3b10      	subs	r3, #16
 800e334:	80fb      	strh	r3, [r7, #6]
 800e336:	e018      	b.n	800e36a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e338:	88fb      	ldrh	r3, [r7, #6]
 800e33a:	3b20      	subs	r3, #32
 800e33c:	80fb      	strh	r3, [r7, #6]
 800e33e:	e014      	b.n	800e36a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e340:	88fb      	ldrh	r3, [r7, #6]
 800e342:	3b30      	subs	r3, #48	; 0x30
 800e344:	80fb      	strh	r3, [r7, #6]
 800e346:	e010      	b.n	800e36a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e348:	88fb      	ldrh	r3, [r7, #6]
 800e34a:	3b1a      	subs	r3, #26
 800e34c:	80fb      	strh	r3, [r7, #6]
 800e34e:	e00c      	b.n	800e36a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e350:	88fb      	ldrh	r3, [r7, #6]
 800e352:	3308      	adds	r3, #8
 800e354:	80fb      	strh	r3, [r7, #6]
 800e356:	e008      	b.n	800e36a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e358:	88fb      	ldrh	r3, [r7, #6]
 800e35a:	3b50      	subs	r3, #80	; 0x50
 800e35c:	80fb      	strh	r3, [r7, #6]
 800e35e:	e004      	b.n	800e36a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e360:	88fb      	ldrh	r3, [r7, #6]
 800e362:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800e366:	80fb      	strh	r3, [r7, #6]
 800e368:	bf00      	nop
			}
			break;
 800e36a:	e008      	b.n	800e37e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e36c:	89fb      	ldrh	r3, [r7, #14]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d195      	bne.n	800e29e <ff_wtoupper+0x1a>
 800e372:	8a3b      	ldrh	r3, [r7, #16]
 800e374:	005b      	lsls	r3, r3, #1
 800e376:	697a      	ldr	r2, [r7, #20]
 800e378:	4413      	add	r3, r2
 800e37a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800e37c:	e78f      	b.n	800e29e <ff_wtoupper+0x1a>
			break;
 800e37e:	bf00      	nop
	}

	return chr;
 800e380:	88fb      	ldrh	r3, [r7, #6]
}
 800e382:	4618      	mov	r0, r3
 800e384:	371c      	adds	r7, #28
 800e386:	46bd      	mov	sp, r7
 800e388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38c:	4770      	bx	lr
 800e38e:	bf00      	nop
 800e390:	08010828 	.word	0x08010828
 800e394:	08010a1c 	.word	0x08010a1c

0800e398 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b082      	sub	sp, #8
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	f000 f83f 	bl	800e424 <malloc>
 800e3a6:	4603      	mov	r3, r0
}
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	3708      	adds	r7, #8
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}

0800e3b0 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b082      	sub	sp, #8
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f000 f83b 	bl	800e434 <free>
}
 800e3be:	bf00      	nop
 800e3c0:	3708      	adds	r7, #8
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}

0800e3c6 <atoi>:
 800e3c6:	220a      	movs	r2, #10
 800e3c8:	2100      	movs	r1, #0
 800e3ca:	f000 bb13 	b.w	800e9f4 <strtol>
	...

0800e3d0 <__errno>:
 800e3d0:	4b01      	ldr	r3, [pc, #4]	; (800e3d8 <__errno+0x8>)
 800e3d2:	6818      	ldr	r0, [r3, #0]
 800e3d4:	4770      	bx	lr
 800e3d6:	bf00      	nop
 800e3d8:	200000cc 	.word	0x200000cc

0800e3dc <__libc_init_array>:
 800e3dc:	b570      	push	{r4, r5, r6, lr}
 800e3de:	4d0d      	ldr	r5, [pc, #52]	; (800e414 <__libc_init_array+0x38>)
 800e3e0:	4c0d      	ldr	r4, [pc, #52]	; (800e418 <__libc_init_array+0x3c>)
 800e3e2:	1b64      	subs	r4, r4, r5
 800e3e4:	10a4      	asrs	r4, r4, #2
 800e3e6:	2600      	movs	r6, #0
 800e3e8:	42a6      	cmp	r6, r4
 800e3ea:	d109      	bne.n	800e400 <__libc_init_array+0x24>
 800e3ec:	4d0b      	ldr	r5, [pc, #44]	; (800e41c <__libc_init_array+0x40>)
 800e3ee:	4c0c      	ldr	r4, [pc, #48]	; (800e420 <__libc_init_array+0x44>)
 800e3f0:	f001 fc0e 	bl	800fc10 <_init>
 800e3f4:	1b64      	subs	r4, r4, r5
 800e3f6:	10a4      	asrs	r4, r4, #2
 800e3f8:	2600      	movs	r6, #0
 800e3fa:	42a6      	cmp	r6, r4
 800e3fc:	d105      	bne.n	800e40a <__libc_init_array+0x2e>
 800e3fe:	bd70      	pop	{r4, r5, r6, pc}
 800e400:	f855 3b04 	ldr.w	r3, [r5], #4
 800e404:	4798      	blx	r3
 800e406:	3601      	adds	r6, #1
 800e408:	e7ee      	b.n	800e3e8 <__libc_init_array+0xc>
 800e40a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e40e:	4798      	blx	r3
 800e410:	3601      	adds	r6, #1
 800e412:	e7f2      	b.n	800e3fa <__libc_init_array+0x1e>
 800e414:	08010d2c 	.word	0x08010d2c
 800e418:	08010d2c 	.word	0x08010d2c
 800e41c:	08010d2c 	.word	0x08010d2c
 800e420:	08010d30 	.word	0x08010d30

0800e424 <malloc>:
 800e424:	4b02      	ldr	r3, [pc, #8]	; (800e430 <malloc+0xc>)
 800e426:	4601      	mov	r1, r0
 800e428:	6818      	ldr	r0, [r3, #0]
 800e42a:	f000 b88d 	b.w	800e548 <_malloc_r>
 800e42e:	bf00      	nop
 800e430:	200000cc 	.word	0x200000cc

0800e434 <free>:
 800e434:	4b02      	ldr	r3, [pc, #8]	; (800e440 <free+0xc>)
 800e436:	4601      	mov	r1, r0
 800e438:	6818      	ldr	r0, [r3, #0]
 800e43a:	f000 b819 	b.w	800e470 <_free_r>
 800e43e:	bf00      	nop
 800e440:	200000cc 	.word	0x200000cc

0800e444 <memcpy>:
 800e444:	440a      	add	r2, r1
 800e446:	4291      	cmp	r1, r2
 800e448:	f100 33ff 	add.w	r3, r0, #4294967295
 800e44c:	d100      	bne.n	800e450 <memcpy+0xc>
 800e44e:	4770      	bx	lr
 800e450:	b510      	push	{r4, lr}
 800e452:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e456:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e45a:	4291      	cmp	r1, r2
 800e45c:	d1f9      	bne.n	800e452 <memcpy+0xe>
 800e45e:	bd10      	pop	{r4, pc}

0800e460 <memset>:
 800e460:	4402      	add	r2, r0
 800e462:	4603      	mov	r3, r0
 800e464:	4293      	cmp	r3, r2
 800e466:	d100      	bne.n	800e46a <memset+0xa>
 800e468:	4770      	bx	lr
 800e46a:	f803 1b01 	strb.w	r1, [r3], #1
 800e46e:	e7f9      	b.n	800e464 <memset+0x4>

0800e470 <_free_r>:
 800e470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e472:	2900      	cmp	r1, #0
 800e474:	d044      	beq.n	800e500 <_free_r+0x90>
 800e476:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e47a:	9001      	str	r0, [sp, #4]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	f1a1 0404 	sub.w	r4, r1, #4
 800e482:	bfb8      	it	lt
 800e484:	18e4      	addlt	r4, r4, r3
 800e486:	f000 fdcf 	bl	800f028 <__malloc_lock>
 800e48a:	4a1e      	ldr	r2, [pc, #120]	; (800e504 <_free_r+0x94>)
 800e48c:	9801      	ldr	r0, [sp, #4]
 800e48e:	6813      	ldr	r3, [r2, #0]
 800e490:	b933      	cbnz	r3, 800e4a0 <_free_r+0x30>
 800e492:	6063      	str	r3, [r4, #4]
 800e494:	6014      	str	r4, [r2, #0]
 800e496:	b003      	add	sp, #12
 800e498:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e49c:	f000 bdca 	b.w	800f034 <__malloc_unlock>
 800e4a0:	42a3      	cmp	r3, r4
 800e4a2:	d908      	bls.n	800e4b6 <_free_r+0x46>
 800e4a4:	6825      	ldr	r5, [r4, #0]
 800e4a6:	1961      	adds	r1, r4, r5
 800e4a8:	428b      	cmp	r3, r1
 800e4aa:	bf01      	itttt	eq
 800e4ac:	6819      	ldreq	r1, [r3, #0]
 800e4ae:	685b      	ldreq	r3, [r3, #4]
 800e4b0:	1949      	addeq	r1, r1, r5
 800e4b2:	6021      	streq	r1, [r4, #0]
 800e4b4:	e7ed      	b.n	800e492 <_free_r+0x22>
 800e4b6:	461a      	mov	r2, r3
 800e4b8:	685b      	ldr	r3, [r3, #4]
 800e4ba:	b10b      	cbz	r3, 800e4c0 <_free_r+0x50>
 800e4bc:	42a3      	cmp	r3, r4
 800e4be:	d9fa      	bls.n	800e4b6 <_free_r+0x46>
 800e4c0:	6811      	ldr	r1, [r2, #0]
 800e4c2:	1855      	adds	r5, r2, r1
 800e4c4:	42a5      	cmp	r5, r4
 800e4c6:	d10b      	bne.n	800e4e0 <_free_r+0x70>
 800e4c8:	6824      	ldr	r4, [r4, #0]
 800e4ca:	4421      	add	r1, r4
 800e4cc:	1854      	adds	r4, r2, r1
 800e4ce:	42a3      	cmp	r3, r4
 800e4d0:	6011      	str	r1, [r2, #0]
 800e4d2:	d1e0      	bne.n	800e496 <_free_r+0x26>
 800e4d4:	681c      	ldr	r4, [r3, #0]
 800e4d6:	685b      	ldr	r3, [r3, #4]
 800e4d8:	6053      	str	r3, [r2, #4]
 800e4da:	4421      	add	r1, r4
 800e4dc:	6011      	str	r1, [r2, #0]
 800e4de:	e7da      	b.n	800e496 <_free_r+0x26>
 800e4e0:	d902      	bls.n	800e4e8 <_free_r+0x78>
 800e4e2:	230c      	movs	r3, #12
 800e4e4:	6003      	str	r3, [r0, #0]
 800e4e6:	e7d6      	b.n	800e496 <_free_r+0x26>
 800e4e8:	6825      	ldr	r5, [r4, #0]
 800e4ea:	1961      	adds	r1, r4, r5
 800e4ec:	428b      	cmp	r3, r1
 800e4ee:	bf04      	itt	eq
 800e4f0:	6819      	ldreq	r1, [r3, #0]
 800e4f2:	685b      	ldreq	r3, [r3, #4]
 800e4f4:	6063      	str	r3, [r4, #4]
 800e4f6:	bf04      	itt	eq
 800e4f8:	1949      	addeq	r1, r1, r5
 800e4fa:	6021      	streq	r1, [r4, #0]
 800e4fc:	6054      	str	r4, [r2, #4]
 800e4fe:	e7ca      	b.n	800e496 <_free_r+0x26>
 800e500:	b003      	add	sp, #12
 800e502:	bd30      	pop	{r4, r5, pc}
 800e504:	20000ee8 	.word	0x20000ee8

0800e508 <sbrk_aligned>:
 800e508:	b570      	push	{r4, r5, r6, lr}
 800e50a:	4e0e      	ldr	r6, [pc, #56]	; (800e544 <sbrk_aligned+0x3c>)
 800e50c:	460c      	mov	r4, r1
 800e50e:	6831      	ldr	r1, [r6, #0]
 800e510:	4605      	mov	r5, r0
 800e512:	b911      	cbnz	r1, 800e51a <sbrk_aligned+0x12>
 800e514:	f000 f930 	bl	800e778 <_sbrk_r>
 800e518:	6030      	str	r0, [r6, #0]
 800e51a:	4621      	mov	r1, r4
 800e51c:	4628      	mov	r0, r5
 800e51e:	f000 f92b 	bl	800e778 <_sbrk_r>
 800e522:	1c43      	adds	r3, r0, #1
 800e524:	d00a      	beq.n	800e53c <sbrk_aligned+0x34>
 800e526:	1cc4      	adds	r4, r0, #3
 800e528:	f024 0403 	bic.w	r4, r4, #3
 800e52c:	42a0      	cmp	r0, r4
 800e52e:	d007      	beq.n	800e540 <sbrk_aligned+0x38>
 800e530:	1a21      	subs	r1, r4, r0
 800e532:	4628      	mov	r0, r5
 800e534:	f000 f920 	bl	800e778 <_sbrk_r>
 800e538:	3001      	adds	r0, #1
 800e53a:	d101      	bne.n	800e540 <sbrk_aligned+0x38>
 800e53c:	f04f 34ff 	mov.w	r4, #4294967295
 800e540:	4620      	mov	r0, r4
 800e542:	bd70      	pop	{r4, r5, r6, pc}
 800e544:	20000eec 	.word	0x20000eec

0800e548 <_malloc_r>:
 800e548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e54c:	1ccd      	adds	r5, r1, #3
 800e54e:	f025 0503 	bic.w	r5, r5, #3
 800e552:	3508      	adds	r5, #8
 800e554:	2d0c      	cmp	r5, #12
 800e556:	bf38      	it	cc
 800e558:	250c      	movcc	r5, #12
 800e55a:	2d00      	cmp	r5, #0
 800e55c:	4607      	mov	r7, r0
 800e55e:	db01      	blt.n	800e564 <_malloc_r+0x1c>
 800e560:	42a9      	cmp	r1, r5
 800e562:	d905      	bls.n	800e570 <_malloc_r+0x28>
 800e564:	230c      	movs	r3, #12
 800e566:	603b      	str	r3, [r7, #0]
 800e568:	2600      	movs	r6, #0
 800e56a:	4630      	mov	r0, r6
 800e56c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e570:	4e2e      	ldr	r6, [pc, #184]	; (800e62c <_malloc_r+0xe4>)
 800e572:	f000 fd59 	bl	800f028 <__malloc_lock>
 800e576:	6833      	ldr	r3, [r6, #0]
 800e578:	461c      	mov	r4, r3
 800e57a:	bb34      	cbnz	r4, 800e5ca <_malloc_r+0x82>
 800e57c:	4629      	mov	r1, r5
 800e57e:	4638      	mov	r0, r7
 800e580:	f7ff ffc2 	bl	800e508 <sbrk_aligned>
 800e584:	1c43      	adds	r3, r0, #1
 800e586:	4604      	mov	r4, r0
 800e588:	d14d      	bne.n	800e626 <_malloc_r+0xde>
 800e58a:	6834      	ldr	r4, [r6, #0]
 800e58c:	4626      	mov	r6, r4
 800e58e:	2e00      	cmp	r6, #0
 800e590:	d140      	bne.n	800e614 <_malloc_r+0xcc>
 800e592:	6823      	ldr	r3, [r4, #0]
 800e594:	4631      	mov	r1, r6
 800e596:	4638      	mov	r0, r7
 800e598:	eb04 0803 	add.w	r8, r4, r3
 800e59c:	f000 f8ec 	bl	800e778 <_sbrk_r>
 800e5a0:	4580      	cmp	r8, r0
 800e5a2:	d13a      	bne.n	800e61a <_malloc_r+0xd2>
 800e5a4:	6821      	ldr	r1, [r4, #0]
 800e5a6:	3503      	adds	r5, #3
 800e5a8:	1a6d      	subs	r5, r5, r1
 800e5aa:	f025 0503 	bic.w	r5, r5, #3
 800e5ae:	3508      	adds	r5, #8
 800e5b0:	2d0c      	cmp	r5, #12
 800e5b2:	bf38      	it	cc
 800e5b4:	250c      	movcc	r5, #12
 800e5b6:	4629      	mov	r1, r5
 800e5b8:	4638      	mov	r0, r7
 800e5ba:	f7ff ffa5 	bl	800e508 <sbrk_aligned>
 800e5be:	3001      	adds	r0, #1
 800e5c0:	d02b      	beq.n	800e61a <_malloc_r+0xd2>
 800e5c2:	6823      	ldr	r3, [r4, #0]
 800e5c4:	442b      	add	r3, r5
 800e5c6:	6023      	str	r3, [r4, #0]
 800e5c8:	e00e      	b.n	800e5e8 <_malloc_r+0xa0>
 800e5ca:	6822      	ldr	r2, [r4, #0]
 800e5cc:	1b52      	subs	r2, r2, r5
 800e5ce:	d41e      	bmi.n	800e60e <_malloc_r+0xc6>
 800e5d0:	2a0b      	cmp	r2, #11
 800e5d2:	d916      	bls.n	800e602 <_malloc_r+0xba>
 800e5d4:	1961      	adds	r1, r4, r5
 800e5d6:	42a3      	cmp	r3, r4
 800e5d8:	6025      	str	r5, [r4, #0]
 800e5da:	bf18      	it	ne
 800e5dc:	6059      	strne	r1, [r3, #4]
 800e5de:	6863      	ldr	r3, [r4, #4]
 800e5e0:	bf08      	it	eq
 800e5e2:	6031      	streq	r1, [r6, #0]
 800e5e4:	5162      	str	r2, [r4, r5]
 800e5e6:	604b      	str	r3, [r1, #4]
 800e5e8:	4638      	mov	r0, r7
 800e5ea:	f104 060b 	add.w	r6, r4, #11
 800e5ee:	f000 fd21 	bl	800f034 <__malloc_unlock>
 800e5f2:	f026 0607 	bic.w	r6, r6, #7
 800e5f6:	1d23      	adds	r3, r4, #4
 800e5f8:	1af2      	subs	r2, r6, r3
 800e5fa:	d0b6      	beq.n	800e56a <_malloc_r+0x22>
 800e5fc:	1b9b      	subs	r3, r3, r6
 800e5fe:	50a3      	str	r3, [r4, r2]
 800e600:	e7b3      	b.n	800e56a <_malloc_r+0x22>
 800e602:	6862      	ldr	r2, [r4, #4]
 800e604:	42a3      	cmp	r3, r4
 800e606:	bf0c      	ite	eq
 800e608:	6032      	streq	r2, [r6, #0]
 800e60a:	605a      	strne	r2, [r3, #4]
 800e60c:	e7ec      	b.n	800e5e8 <_malloc_r+0xa0>
 800e60e:	4623      	mov	r3, r4
 800e610:	6864      	ldr	r4, [r4, #4]
 800e612:	e7b2      	b.n	800e57a <_malloc_r+0x32>
 800e614:	4634      	mov	r4, r6
 800e616:	6876      	ldr	r6, [r6, #4]
 800e618:	e7b9      	b.n	800e58e <_malloc_r+0x46>
 800e61a:	230c      	movs	r3, #12
 800e61c:	603b      	str	r3, [r7, #0]
 800e61e:	4638      	mov	r0, r7
 800e620:	f000 fd08 	bl	800f034 <__malloc_unlock>
 800e624:	e7a1      	b.n	800e56a <_malloc_r+0x22>
 800e626:	6025      	str	r5, [r4, #0]
 800e628:	e7de      	b.n	800e5e8 <_malloc_r+0xa0>
 800e62a:	bf00      	nop
 800e62c:	20000ee8 	.word	0x20000ee8

0800e630 <iprintf>:
 800e630:	b40f      	push	{r0, r1, r2, r3}
 800e632:	4b0a      	ldr	r3, [pc, #40]	; (800e65c <iprintf+0x2c>)
 800e634:	b513      	push	{r0, r1, r4, lr}
 800e636:	681c      	ldr	r4, [r3, #0]
 800e638:	b124      	cbz	r4, 800e644 <iprintf+0x14>
 800e63a:	69a3      	ldr	r3, [r4, #24]
 800e63c:	b913      	cbnz	r3, 800e644 <iprintf+0x14>
 800e63e:	4620      	mov	r0, r4
 800e640:	f000 fbda 	bl	800edf8 <__sinit>
 800e644:	ab05      	add	r3, sp, #20
 800e646:	9a04      	ldr	r2, [sp, #16]
 800e648:	68a1      	ldr	r1, [r4, #8]
 800e64a:	9301      	str	r3, [sp, #4]
 800e64c:	4620      	mov	r0, r4
 800e64e:	f000 fe7d 	bl	800f34c <_vfiprintf_r>
 800e652:	b002      	add	sp, #8
 800e654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e658:	b004      	add	sp, #16
 800e65a:	4770      	bx	lr
 800e65c:	200000cc 	.word	0x200000cc

0800e660 <putchar>:
 800e660:	4b09      	ldr	r3, [pc, #36]	; (800e688 <putchar+0x28>)
 800e662:	b513      	push	{r0, r1, r4, lr}
 800e664:	681c      	ldr	r4, [r3, #0]
 800e666:	4601      	mov	r1, r0
 800e668:	b134      	cbz	r4, 800e678 <putchar+0x18>
 800e66a:	69a3      	ldr	r3, [r4, #24]
 800e66c:	b923      	cbnz	r3, 800e678 <putchar+0x18>
 800e66e:	9001      	str	r0, [sp, #4]
 800e670:	4620      	mov	r0, r4
 800e672:	f000 fbc1 	bl	800edf8 <__sinit>
 800e676:	9901      	ldr	r1, [sp, #4]
 800e678:	68a2      	ldr	r2, [r4, #8]
 800e67a:	4620      	mov	r0, r4
 800e67c:	b002      	add	sp, #8
 800e67e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e682:	f001 b927 	b.w	800f8d4 <_putc_r>
 800e686:	bf00      	nop
 800e688:	200000cc 	.word	0x200000cc

0800e68c <_puts_r>:
 800e68c:	b570      	push	{r4, r5, r6, lr}
 800e68e:	460e      	mov	r6, r1
 800e690:	4605      	mov	r5, r0
 800e692:	b118      	cbz	r0, 800e69c <_puts_r+0x10>
 800e694:	6983      	ldr	r3, [r0, #24]
 800e696:	b90b      	cbnz	r3, 800e69c <_puts_r+0x10>
 800e698:	f000 fbae 	bl	800edf8 <__sinit>
 800e69c:	69ab      	ldr	r3, [r5, #24]
 800e69e:	68ac      	ldr	r4, [r5, #8]
 800e6a0:	b913      	cbnz	r3, 800e6a8 <_puts_r+0x1c>
 800e6a2:	4628      	mov	r0, r5
 800e6a4:	f000 fba8 	bl	800edf8 <__sinit>
 800e6a8:	4b2c      	ldr	r3, [pc, #176]	; (800e75c <_puts_r+0xd0>)
 800e6aa:	429c      	cmp	r4, r3
 800e6ac:	d120      	bne.n	800e6f0 <_puts_r+0x64>
 800e6ae:	686c      	ldr	r4, [r5, #4]
 800e6b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e6b2:	07db      	lsls	r3, r3, #31
 800e6b4:	d405      	bmi.n	800e6c2 <_puts_r+0x36>
 800e6b6:	89a3      	ldrh	r3, [r4, #12]
 800e6b8:	0598      	lsls	r0, r3, #22
 800e6ba:	d402      	bmi.n	800e6c2 <_puts_r+0x36>
 800e6bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e6be:	f000 fc4b 	bl	800ef58 <__retarget_lock_acquire_recursive>
 800e6c2:	89a3      	ldrh	r3, [r4, #12]
 800e6c4:	0719      	lsls	r1, r3, #28
 800e6c6:	d51d      	bpl.n	800e704 <_puts_r+0x78>
 800e6c8:	6923      	ldr	r3, [r4, #16]
 800e6ca:	b1db      	cbz	r3, 800e704 <_puts_r+0x78>
 800e6cc:	3e01      	subs	r6, #1
 800e6ce:	68a3      	ldr	r3, [r4, #8]
 800e6d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e6d4:	3b01      	subs	r3, #1
 800e6d6:	60a3      	str	r3, [r4, #8]
 800e6d8:	bb39      	cbnz	r1, 800e72a <_puts_r+0x9e>
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	da38      	bge.n	800e750 <_puts_r+0xc4>
 800e6de:	4622      	mov	r2, r4
 800e6e0:	210a      	movs	r1, #10
 800e6e2:	4628      	mov	r0, r5
 800e6e4:	f000 f990 	bl	800ea08 <__swbuf_r>
 800e6e8:	3001      	adds	r0, #1
 800e6ea:	d011      	beq.n	800e710 <_puts_r+0x84>
 800e6ec:	250a      	movs	r5, #10
 800e6ee:	e011      	b.n	800e714 <_puts_r+0x88>
 800e6f0:	4b1b      	ldr	r3, [pc, #108]	; (800e760 <_puts_r+0xd4>)
 800e6f2:	429c      	cmp	r4, r3
 800e6f4:	d101      	bne.n	800e6fa <_puts_r+0x6e>
 800e6f6:	68ac      	ldr	r4, [r5, #8]
 800e6f8:	e7da      	b.n	800e6b0 <_puts_r+0x24>
 800e6fa:	4b1a      	ldr	r3, [pc, #104]	; (800e764 <_puts_r+0xd8>)
 800e6fc:	429c      	cmp	r4, r3
 800e6fe:	bf08      	it	eq
 800e700:	68ec      	ldreq	r4, [r5, #12]
 800e702:	e7d5      	b.n	800e6b0 <_puts_r+0x24>
 800e704:	4621      	mov	r1, r4
 800e706:	4628      	mov	r0, r5
 800e708:	f000 f9d0 	bl	800eaac <__swsetup_r>
 800e70c:	2800      	cmp	r0, #0
 800e70e:	d0dd      	beq.n	800e6cc <_puts_r+0x40>
 800e710:	f04f 35ff 	mov.w	r5, #4294967295
 800e714:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e716:	07da      	lsls	r2, r3, #31
 800e718:	d405      	bmi.n	800e726 <_puts_r+0x9a>
 800e71a:	89a3      	ldrh	r3, [r4, #12]
 800e71c:	059b      	lsls	r3, r3, #22
 800e71e:	d402      	bmi.n	800e726 <_puts_r+0x9a>
 800e720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e722:	f000 fc1a 	bl	800ef5a <__retarget_lock_release_recursive>
 800e726:	4628      	mov	r0, r5
 800e728:	bd70      	pop	{r4, r5, r6, pc}
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	da04      	bge.n	800e738 <_puts_r+0xac>
 800e72e:	69a2      	ldr	r2, [r4, #24]
 800e730:	429a      	cmp	r2, r3
 800e732:	dc06      	bgt.n	800e742 <_puts_r+0xb6>
 800e734:	290a      	cmp	r1, #10
 800e736:	d004      	beq.n	800e742 <_puts_r+0xb6>
 800e738:	6823      	ldr	r3, [r4, #0]
 800e73a:	1c5a      	adds	r2, r3, #1
 800e73c:	6022      	str	r2, [r4, #0]
 800e73e:	7019      	strb	r1, [r3, #0]
 800e740:	e7c5      	b.n	800e6ce <_puts_r+0x42>
 800e742:	4622      	mov	r2, r4
 800e744:	4628      	mov	r0, r5
 800e746:	f000 f95f 	bl	800ea08 <__swbuf_r>
 800e74a:	3001      	adds	r0, #1
 800e74c:	d1bf      	bne.n	800e6ce <_puts_r+0x42>
 800e74e:	e7df      	b.n	800e710 <_puts_r+0x84>
 800e750:	6823      	ldr	r3, [r4, #0]
 800e752:	250a      	movs	r5, #10
 800e754:	1c5a      	adds	r2, r3, #1
 800e756:	6022      	str	r2, [r4, #0]
 800e758:	701d      	strb	r5, [r3, #0]
 800e75a:	e7db      	b.n	800e714 <_puts_r+0x88>
 800e75c:	08010cb0 	.word	0x08010cb0
 800e760:	08010cd0 	.word	0x08010cd0
 800e764:	08010c90 	.word	0x08010c90

0800e768 <puts>:
 800e768:	4b02      	ldr	r3, [pc, #8]	; (800e774 <puts+0xc>)
 800e76a:	4601      	mov	r1, r0
 800e76c:	6818      	ldr	r0, [r3, #0]
 800e76e:	f7ff bf8d 	b.w	800e68c <_puts_r>
 800e772:	bf00      	nop
 800e774:	200000cc 	.word	0x200000cc

0800e778 <_sbrk_r>:
 800e778:	b538      	push	{r3, r4, r5, lr}
 800e77a:	4d06      	ldr	r5, [pc, #24]	; (800e794 <_sbrk_r+0x1c>)
 800e77c:	2300      	movs	r3, #0
 800e77e:	4604      	mov	r4, r0
 800e780:	4608      	mov	r0, r1
 800e782:	602b      	str	r3, [r5, #0]
 800e784:	f7f3 f8fe 	bl	8001984 <_sbrk>
 800e788:	1c43      	adds	r3, r0, #1
 800e78a:	d102      	bne.n	800e792 <_sbrk_r+0x1a>
 800e78c:	682b      	ldr	r3, [r5, #0]
 800e78e:	b103      	cbz	r3, 800e792 <_sbrk_r+0x1a>
 800e790:	6023      	str	r3, [r4, #0]
 800e792:	bd38      	pop	{r3, r4, r5, pc}
 800e794:	20000ef4 	.word	0x20000ef4

0800e798 <siprintf>:
 800e798:	b40e      	push	{r1, r2, r3}
 800e79a:	b500      	push	{lr}
 800e79c:	b09c      	sub	sp, #112	; 0x70
 800e79e:	ab1d      	add	r3, sp, #116	; 0x74
 800e7a0:	9002      	str	r0, [sp, #8]
 800e7a2:	9006      	str	r0, [sp, #24]
 800e7a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e7a8:	4809      	ldr	r0, [pc, #36]	; (800e7d0 <siprintf+0x38>)
 800e7aa:	9107      	str	r1, [sp, #28]
 800e7ac:	9104      	str	r1, [sp, #16]
 800e7ae:	4909      	ldr	r1, [pc, #36]	; (800e7d4 <siprintf+0x3c>)
 800e7b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7b4:	9105      	str	r1, [sp, #20]
 800e7b6:	6800      	ldr	r0, [r0, #0]
 800e7b8:	9301      	str	r3, [sp, #4]
 800e7ba:	a902      	add	r1, sp, #8
 800e7bc:	f000 fc9c 	bl	800f0f8 <_svfiprintf_r>
 800e7c0:	9b02      	ldr	r3, [sp, #8]
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	701a      	strb	r2, [r3, #0]
 800e7c6:	b01c      	add	sp, #112	; 0x70
 800e7c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e7cc:	b003      	add	sp, #12
 800e7ce:	4770      	bx	lr
 800e7d0:	200000cc 	.word	0x200000cc
 800e7d4:	ffff0208 	.word	0xffff0208

0800e7d8 <strcpy>:
 800e7d8:	4603      	mov	r3, r0
 800e7da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e7de:	f803 2b01 	strb.w	r2, [r3], #1
 800e7e2:	2a00      	cmp	r2, #0
 800e7e4:	d1f9      	bne.n	800e7da <strcpy+0x2>
 800e7e6:	4770      	bx	lr

0800e7e8 <strncmp>:
 800e7e8:	b510      	push	{r4, lr}
 800e7ea:	b17a      	cbz	r2, 800e80c <strncmp+0x24>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	3901      	subs	r1, #1
 800e7f0:	1884      	adds	r4, r0, r2
 800e7f2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e7f6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e7fa:	4290      	cmp	r0, r2
 800e7fc:	d101      	bne.n	800e802 <strncmp+0x1a>
 800e7fe:	42a3      	cmp	r3, r4
 800e800:	d101      	bne.n	800e806 <strncmp+0x1e>
 800e802:	1a80      	subs	r0, r0, r2
 800e804:	bd10      	pop	{r4, pc}
 800e806:	2800      	cmp	r0, #0
 800e808:	d1f3      	bne.n	800e7f2 <strncmp+0xa>
 800e80a:	e7fa      	b.n	800e802 <strncmp+0x1a>
 800e80c:	4610      	mov	r0, r2
 800e80e:	e7f9      	b.n	800e804 <strncmp+0x1c>

0800e810 <strrchr>:
 800e810:	b538      	push	{r3, r4, r5, lr}
 800e812:	4603      	mov	r3, r0
 800e814:	460c      	mov	r4, r1
 800e816:	b969      	cbnz	r1, 800e834 <strrchr+0x24>
 800e818:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e81c:	f001 b8e5 	b.w	800f9ea <strchr>
 800e820:	1c43      	adds	r3, r0, #1
 800e822:	4605      	mov	r5, r0
 800e824:	4621      	mov	r1, r4
 800e826:	4618      	mov	r0, r3
 800e828:	f001 f8df 	bl	800f9ea <strchr>
 800e82c:	2800      	cmp	r0, #0
 800e82e:	d1f7      	bne.n	800e820 <strrchr+0x10>
 800e830:	4628      	mov	r0, r5
 800e832:	bd38      	pop	{r3, r4, r5, pc}
 800e834:	2500      	movs	r5, #0
 800e836:	e7f5      	b.n	800e824 <strrchr+0x14>

0800e838 <strtok>:
 800e838:	4b16      	ldr	r3, [pc, #88]	; (800e894 <strtok+0x5c>)
 800e83a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e83c:	681e      	ldr	r6, [r3, #0]
 800e83e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800e840:	4605      	mov	r5, r0
 800e842:	b9fc      	cbnz	r4, 800e884 <strtok+0x4c>
 800e844:	2050      	movs	r0, #80	; 0x50
 800e846:	9101      	str	r1, [sp, #4]
 800e848:	f7ff fdec 	bl	800e424 <malloc>
 800e84c:	9901      	ldr	r1, [sp, #4]
 800e84e:	65b0      	str	r0, [r6, #88]	; 0x58
 800e850:	4602      	mov	r2, r0
 800e852:	b920      	cbnz	r0, 800e85e <strtok+0x26>
 800e854:	4b10      	ldr	r3, [pc, #64]	; (800e898 <strtok+0x60>)
 800e856:	4811      	ldr	r0, [pc, #68]	; (800e89c <strtok+0x64>)
 800e858:	2157      	movs	r1, #87	; 0x57
 800e85a:	f000 f995 	bl	800eb88 <__assert_func>
 800e85e:	e9c0 4400 	strd	r4, r4, [r0]
 800e862:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800e866:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800e86a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800e86e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800e872:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800e876:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800e87a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800e87e:	6184      	str	r4, [r0, #24]
 800e880:	7704      	strb	r4, [r0, #28]
 800e882:	6244      	str	r4, [r0, #36]	; 0x24
 800e884:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800e886:	2301      	movs	r3, #1
 800e888:	4628      	mov	r0, r5
 800e88a:	b002      	add	sp, #8
 800e88c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e890:	f000 b806 	b.w	800e8a0 <__strtok_r>
 800e894:	200000cc 	.word	0x200000cc
 800e898:	08010be0 	.word	0x08010be0
 800e89c:	08010bf7 	.word	0x08010bf7

0800e8a0 <__strtok_r>:
 800e8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8a2:	b908      	cbnz	r0, 800e8a8 <__strtok_r+0x8>
 800e8a4:	6810      	ldr	r0, [r2, #0]
 800e8a6:	b188      	cbz	r0, 800e8cc <__strtok_r+0x2c>
 800e8a8:	4604      	mov	r4, r0
 800e8aa:	4620      	mov	r0, r4
 800e8ac:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e8b0:	460f      	mov	r7, r1
 800e8b2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e8b6:	b91e      	cbnz	r6, 800e8c0 <__strtok_r+0x20>
 800e8b8:	b965      	cbnz	r5, 800e8d4 <__strtok_r+0x34>
 800e8ba:	6015      	str	r5, [r2, #0]
 800e8bc:	4628      	mov	r0, r5
 800e8be:	e005      	b.n	800e8cc <__strtok_r+0x2c>
 800e8c0:	42b5      	cmp	r5, r6
 800e8c2:	d1f6      	bne.n	800e8b2 <__strtok_r+0x12>
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d1f0      	bne.n	800e8aa <__strtok_r+0xa>
 800e8c8:	6014      	str	r4, [r2, #0]
 800e8ca:	7003      	strb	r3, [r0, #0]
 800e8cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8ce:	461c      	mov	r4, r3
 800e8d0:	e00c      	b.n	800e8ec <__strtok_r+0x4c>
 800e8d2:	b915      	cbnz	r5, 800e8da <__strtok_r+0x3a>
 800e8d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e8d8:	460e      	mov	r6, r1
 800e8da:	f816 5b01 	ldrb.w	r5, [r6], #1
 800e8de:	42ab      	cmp	r3, r5
 800e8e0:	d1f7      	bne.n	800e8d2 <__strtok_r+0x32>
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d0f3      	beq.n	800e8ce <__strtok_r+0x2e>
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800e8ec:	6014      	str	r4, [r2, #0]
 800e8ee:	e7ed      	b.n	800e8cc <__strtok_r+0x2c>

0800e8f0 <_strtol_l.constprop.0>:
 800e8f0:	2b01      	cmp	r3, #1
 800e8f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8f6:	d001      	beq.n	800e8fc <_strtol_l.constprop.0+0xc>
 800e8f8:	2b24      	cmp	r3, #36	; 0x24
 800e8fa:	d906      	bls.n	800e90a <_strtol_l.constprop.0+0x1a>
 800e8fc:	f7ff fd68 	bl	800e3d0 <__errno>
 800e900:	2316      	movs	r3, #22
 800e902:	6003      	str	r3, [r0, #0]
 800e904:	2000      	movs	r0, #0
 800e906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e90a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e9f0 <_strtol_l.constprop.0+0x100>
 800e90e:	460d      	mov	r5, r1
 800e910:	462e      	mov	r6, r5
 800e912:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e916:	f814 700c 	ldrb.w	r7, [r4, ip]
 800e91a:	f017 0708 	ands.w	r7, r7, #8
 800e91e:	d1f7      	bne.n	800e910 <_strtol_l.constprop.0+0x20>
 800e920:	2c2d      	cmp	r4, #45	; 0x2d
 800e922:	d132      	bne.n	800e98a <_strtol_l.constprop.0+0x9a>
 800e924:	782c      	ldrb	r4, [r5, #0]
 800e926:	2701      	movs	r7, #1
 800e928:	1cb5      	adds	r5, r6, #2
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d05b      	beq.n	800e9e6 <_strtol_l.constprop.0+0xf6>
 800e92e:	2b10      	cmp	r3, #16
 800e930:	d109      	bne.n	800e946 <_strtol_l.constprop.0+0x56>
 800e932:	2c30      	cmp	r4, #48	; 0x30
 800e934:	d107      	bne.n	800e946 <_strtol_l.constprop.0+0x56>
 800e936:	782c      	ldrb	r4, [r5, #0]
 800e938:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e93c:	2c58      	cmp	r4, #88	; 0x58
 800e93e:	d14d      	bne.n	800e9dc <_strtol_l.constprop.0+0xec>
 800e940:	786c      	ldrb	r4, [r5, #1]
 800e942:	2310      	movs	r3, #16
 800e944:	3502      	adds	r5, #2
 800e946:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e94a:	f108 38ff 	add.w	r8, r8, #4294967295
 800e94e:	f04f 0c00 	mov.w	ip, #0
 800e952:	fbb8 f9f3 	udiv	r9, r8, r3
 800e956:	4666      	mov	r6, ip
 800e958:	fb03 8a19 	mls	sl, r3, r9, r8
 800e95c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800e960:	f1be 0f09 	cmp.w	lr, #9
 800e964:	d816      	bhi.n	800e994 <_strtol_l.constprop.0+0xa4>
 800e966:	4674      	mov	r4, lr
 800e968:	42a3      	cmp	r3, r4
 800e96a:	dd24      	ble.n	800e9b6 <_strtol_l.constprop.0+0xc6>
 800e96c:	f1bc 0f00 	cmp.w	ip, #0
 800e970:	db1e      	blt.n	800e9b0 <_strtol_l.constprop.0+0xc0>
 800e972:	45b1      	cmp	r9, r6
 800e974:	d31c      	bcc.n	800e9b0 <_strtol_l.constprop.0+0xc0>
 800e976:	d101      	bne.n	800e97c <_strtol_l.constprop.0+0x8c>
 800e978:	45a2      	cmp	sl, r4
 800e97a:	db19      	blt.n	800e9b0 <_strtol_l.constprop.0+0xc0>
 800e97c:	fb06 4603 	mla	r6, r6, r3, r4
 800e980:	f04f 0c01 	mov.w	ip, #1
 800e984:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e988:	e7e8      	b.n	800e95c <_strtol_l.constprop.0+0x6c>
 800e98a:	2c2b      	cmp	r4, #43	; 0x2b
 800e98c:	bf04      	itt	eq
 800e98e:	782c      	ldrbeq	r4, [r5, #0]
 800e990:	1cb5      	addeq	r5, r6, #2
 800e992:	e7ca      	b.n	800e92a <_strtol_l.constprop.0+0x3a>
 800e994:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e998:	f1be 0f19 	cmp.w	lr, #25
 800e99c:	d801      	bhi.n	800e9a2 <_strtol_l.constprop.0+0xb2>
 800e99e:	3c37      	subs	r4, #55	; 0x37
 800e9a0:	e7e2      	b.n	800e968 <_strtol_l.constprop.0+0x78>
 800e9a2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800e9a6:	f1be 0f19 	cmp.w	lr, #25
 800e9aa:	d804      	bhi.n	800e9b6 <_strtol_l.constprop.0+0xc6>
 800e9ac:	3c57      	subs	r4, #87	; 0x57
 800e9ae:	e7db      	b.n	800e968 <_strtol_l.constprop.0+0x78>
 800e9b0:	f04f 3cff 	mov.w	ip, #4294967295
 800e9b4:	e7e6      	b.n	800e984 <_strtol_l.constprop.0+0x94>
 800e9b6:	f1bc 0f00 	cmp.w	ip, #0
 800e9ba:	da05      	bge.n	800e9c8 <_strtol_l.constprop.0+0xd8>
 800e9bc:	2322      	movs	r3, #34	; 0x22
 800e9be:	6003      	str	r3, [r0, #0]
 800e9c0:	4646      	mov	r6, r8
 800e9c2:	b942      	cbnz	r2, 800e9d6 <_strtol_l.constprop.0+0xe6>
 800e9c4:	4630      	mov	r0, r6
 800e9c6:	e79e      	b.n	800e906 <_strtol_l.constprop.0+0x16>
 800e9c8:	b107      	cbz	r7, 800e9cc <_strtol_l.constprop.0+0xdc>
 800e9ca:	4276      	negs	r6, r6
 800e9cc:	2a00      	cmp	r2, #0
 800e9ce:	d0f9      	beq.n	800e9c4 <_strtol_l.constprop.0+0xd4>
 800e9d0:	f1bc 0f00 	cmp.w	ip, #0
 800e9d4:	d000      	beq.n	800e9d8 <_strtol_l.constprop.0+0xe8>
 800e9d6:	1e69      	subs	r1, r5, #1
 800e9d8:	6011      	str	r1, [r2, #0]
 800e9da:	e7f3      	b.n	800e9c4 <_strtol_l.constprop.0+0xd4>
 800e9dc:	2430      	movs	r4, #48	; 0x30
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d1b1      	bne.n	800e946 <_strtol_l.constprop.0+0x56>
 800e9e2:	2308      	movs	r3, #8
 800e9e4:	e7af      	b.n	800e946 <_strtol_l.constprop.0+0x56>
 800e9e6:	2c30      	cmp	r4, #48	; 0x30
 800e9e8:	d0a5      	beq.n	800e936 <_strtol_l.constprop.0+0x46>
 800e9ea:	230a      	movs	r3, #10
 800e9ec:	e7ab      	b.n	800e946 <_strtol_l.constprop.0+0x56>
 800e9ee:	bf00      	nop
 800e9f0:	08010ad9 	.word	0x08010ad9

0800e9f4 <strtol>:
 800e9f4:	4613      	mov	r3, r2
 800e9f6:	460a      	mov	r2, r1
 800e9f8:	4601      	mov	r1, r0
 800e9fa:	4802      	ldr	r0, [pc, #8]	; (800ea04 <strtol+0x10>)
 800e9fc:	6800      	ldr	r0, [r0, #0]
 800e9fe:	f7ff bf77 	b.w	800e8f0 <_strtol_l.constprop.0>
 800ea02:	bf00      	nop
 800ea04:	200000cc 	.word	0x200000cc

0800ea08 <__swbuf_r>:
 800ea08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea0a:	460e      	mov	r6, r1
 800ea0c:	4614      	mov	r4, r2
 800ea0e:	4605      	mov	r5, r0
 800ea10:	b118      	cbz	r0, 800ea1a <__swbuf_r+0x12>
 800ea12:	6983      	ldr	r3, [r0, #24]
 800ea14:	b90b      	cbnz	r3, 800ea1a <__swbuf_r+0x12>
 800ea16:	f000 f9ef 	bl	800edf8 <__sinit>
 800ea1a:	4b21      	ldr	r3, [pc, #132]	; (800eaa0 <__swbuf_r+0x98>)
 800ea1c:	429c      	cmp	r4, r3
 800ea1e:	d12b      	bne.n	800ea78 <__swbuf_r+0x70>
 800ea20:	686c      	ldr	r4, [r5, #4]
 800ea22:	69a3      	ldr	r3, [r4, #24]
 800ea24:	60a3      	str	r3, [r4, #8]
 800ea26:	89a3      	ldrh	r3, [r4, #12]
 800ea28:	071a      	lsls	r2, r3, #28
 800ea2a:	d52f      	bpl.n	800ea8c <__swbuf_r+0x84>
 800ea2c:	6923      	ldr	r3, [r4, #16]
 800ea2e:	b36b      	cbz	r3, 800ea8c <__swbuf_r+0x84>
 800ea30:	6923      	ldr	r3, [r4, #16]
 800ea32:	6820      	ldr	r0, [r4, #0]
 800ea34:	1ac0      	subs	r0, r0, r3
 800ea36:	6963      	ldr	r3, [r4, #20]
 800ea38:	b2f6      	uxtb	r6, r6
 800ea3a:	4283      	cmp	r3, r0
 800ea3c:	4637      	mov	r7, r6
 800ea3e:	dc04      	bgt.n	800ea4a <__swbuf_r+0x42>
 800ea40:	4621      	mov	r1, r4
 800ea42:	4628      	mov	r0, r5
 800ea44:	f000 f944 	bl	800ecd0 <_fflush_r>
 800ea48:	bb30      	cbnz	r0, 800ea98 <__swbuf_r+0x90>
 800ea4a:	68a3      	ldr	r3, [r4, #8]
 800ea4c:	3b01      	subs	r3, #1
 800ea4e:	60a3      	str	r3, [r4, #8]
 800ea50:	6823      	ldr	r3, [r4, #0]
 800ea52:	1c5a      	adds	r2, r3, #1
 800ea54:	6022      	str	r2, [r4, #0]
 800ea56:	701e      	strb	r6, [r3, #0]
 800ea58:	6963      	ldr	r3, [r4, #20]
 800ea5a:	3001      	adds	r0, #1
 800ea5c:	4283      	cmp	r3, r0
 800ea5e:	d004      	beq.n	800ea6a <__swbuf_r+0x62>
 800ea60:	89a3      	ldrh	r3, [r4, #12]
 800ea62:	07db      	lsls	r3, r3, #31
 800ea64:	d506      	bpl.n	800ea74 <__swbuf_r+0x6c>
 800ea66:	2e0a      	cmp	r6, #10
 800ea68:	d104      	bne.n	800ea74 <__swbuf_r+0x6c>
 800ea6a:	4621      	mov	r1, r4
 800ea6c:	4628      	mov	r0, r5
 800ea6e:	f000 f92f 	bl	800ecd0 <_fflush_r>
 800ea72:	b988      	cbnz	r0, 800ea98 <__swbuf_r+0x90>
 800ea74:	4638      	mov	r0, r7
 800ea76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea78:	4b0a      	ldr	r3, [pc, #40]	; (800eaa4 <__swbuf_r+0x9c>)
 800ea7a:	429c      	cmp	r4, r3
 800ea7c:	d101      	bne.n	800ea82 <__swbuf_r+0x7a>
 800ea7e:	68ac      	ldr	r4, [r5, #8]
 800ea80:	e7cf      	b.n	800ea22 <__swbuf_r+0x1a>
 800ea82:	4b09      	ldr	r3, [pc, #36]	; (800eaa8 <__swbuf_r+0xa0>)
 800ea84:	429c      	cmp	r4, r3
 800ea86:	bf08      	it	eq
 800ea88:	68ec      	ldreq	r4, [r5, #12]
 800ea8a:	e7ca      	b.n	800ea22 <__swbuf_r+0x1a>
 800ea8c:	4621      	mov	r1, r4
 800ea8e:	4628      	mov	r0, r5
 800ea90:	f000 f80c 	bl	800eaac <__swsetup_r>
 800ea94:	2800      	cmp	r0, #0
 800ea96:	d0cb      	beq.n	800ea30 <__swbuf_r+0x28>
 800ea98:	f04f 37ff 	mov.w	r7, #4294967295
 800ea9c:	e7ea      	b.n	800ea74 <__swbuf_r+0x6c>
 800ea9e:	bf00      	nop
 800eaa0:	08010cb0 	.word	0x08010cb0
 800eaa4:	08010cd0 	.word	0x08010cd0
 800eaa8:	08010c90 	.word	0x08010c90

0800eaac <__swsetup_r>:
 800eaac:	4b32      	ldr	r3, [pc, #200]	; (800eb78 <__swsetup_r+0xcc>)
 800eaae:	b570      	push	{r4, r5, r6, lr}
 800eab0:	681d      	ldr	r5, [r3, #0]
 800eab2:	4606      	mov	r6, r0
 800eab4:	460c      	mov	r4, r1
 800eab6:	b125      	cbz	r5, 800eac2 <__swsetup_r+0x16>
 800eab8:	69ab      	ldr	r3, [r5, #24]
 800eaba:	b913      	cbnz	r3, 800eac2 <__swsetup_r+0x16>
 800eabc:	4628      	mov	r0, r5
 800eabe:	f000 f99b 	bl	800edf8 <__sinit>
 800eac2:	4b2e      	ldr	r3, [pc, #184]	; (800eb7c <__swsetup_r+0xd0>)
 800eac4:	429c      	cmp	r4, r3
 800eac6:	d10f      	bne.n	800eae8 <__swsetup_r+0x3c>
 800eac8:	686c      	ldr	r4, [r5, #4]
 800eaca:	89a3      	ldrh	r3, [r4, #12]
 800eacc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ead0:	0719      	lsls	r1, r3, #28
 800ead2:	d42c      	bmi.n	800eb2e <__swsetup_r+0x82>
 800ead4:	06dd      	lsls	r5, r3, #27
 800ead6:	d411      	bmi.n	800eafc <__swsetup_r+0x50>
 800ead8:	2309      	movs	r3, #9
 800eada:	6033      	str	r3, [r6, #0]
 800eadc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800eae0:	81a3      	strh	r3, [r4, #12]
 800eae2:	f04f 30ff 	mov.w	r0, #4294967295
 800eae6:	e03e      	b.n	800eb66 <__swsetup_r+0xba>
 800eae8:	4b25      	ldr	r3, [pc, #148]	; (800eb80 <__swsetup_r+0xd4>)
 800eaea:	429c      	cmp	r4, r3
 800eaec:	d101      	bne.n	800eaf2 <__swsetup_r+0x46>
 800eaee:	68ac      	ldr	r4, [r5, #8]
 800eaf0:	e7eb      	b.n	800eaca <__swsetup_r+0x1e>
 800eaf2:	4b24      	ldr	r3, [pc, #144]	; (800eb84 <__swsetup_r+0xd8>)
 800eaf4:	429c      	cmp	r4, r3
 800eaf6:	bf08      	it	eq
 800eaf8:	68ec      	ldreq	r4, [r5, #12]
 800eafa:	e7e6      	b.n	800eaca <__swsetup_r+0x1e>
 800eafc:	0758      	lsls	r0, r3, #29
 800eafe:	d512      	bpl.n	800eb26 <__swsetup_r+0x7a>
 800eb00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb02:	b141      	cbz	r1, 800eb16 <__swsetup_r+0x6a>
 800eb04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb08:	4299      	cmp	r1, r3
 800eb0a:	d002      	beq.n	800eb12 <__swsetup_r+0x66>
 800eb0c:	4630      	mov	r0, r6
 800eb0e:	f7ff fcaf 	bl	800e470 <_free_r>
 800eb12:	2300      	movs	r3, #0
 800eb14:	6363      	str	r3, [r4, #52]	; 0x34
 800eb16:	89a3      	ldrh	r3, [r4, #12]
 800eb18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800eb1c:	81a3      	strh	r3, [r4, #12]
 800eb1e:	2300      	movs	r3, #0
 800eb20:	6063      	str	r3, [r4, #4]
 800eb22:	6923      	ldr	r3, [r4, #16]
 800eb24:	6023      	str	r3, [r4, #0]
 800eb26:	89a3      	ldrh	r3, [r4, #12]
 800eb28:	f043 0308 	orr.w	r3, r3, #8
 800eb2c:	81a3      	strh	r3, [r4, #12]
 800eb2e:	6923      	ldr	r3, [r4, #16]
 800eb30:	b94b      	cbnz	r3, 800eb46 <__swsetup_r+0x9a>
 800eb32:	89a3      	ldrh	r3, [r4, #12]
 800eb34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800eb38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eb3c:	d003      	beq.n	800eb46 <__swsetup_r+0x9a>
 800eb3e:	4621      	mov	r1, r4
 800eb40:	4630      	mov	r0, r6
 800eb42:	f000 fa31 	bl	800efa8 <__smakebuf_r>
 800eb46:	89a0      	ldrh	r0, [r4, #12]
 800eb48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eb4c:	f010 0301 	ands.w	r3, r0, #1
 800eb50:	d00a      	beq.n	800eb68 <__swsetup_r+0xbc>
 800eb52:	2300      	movs	r3, #0
 800eb54:	60a3      	str	r3, [r4, #8]
 800eb56:	6963      	ldr	r3, [r4, #20]
 800eb58:	425b      	negs	r3, r3
 800eb5a:	61a3      	str	r3, [r4, #24]
 800eb5c:	6923      	ldr	r3, [r4, #16]
 800eb5e:	b943      	cbnz	r3, 800eb72 <__swsetup_r+0xc6>
 800eb60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800eb64:	d1ba      	bne.n	800eadc <__swsetup_r+0x30>
 800eb66:	bd70      	pop	{r4, r5, r6, pc}
 800eb68:	0781      	lsls	r1, r0, #30
 800eb6a:	bf58      	it	pl
 800eb6c:	6963      	ldrpl	r3, [r4, #20]
 800eb6e:	60a3      	str	r3, [r4, #8]
 800eb70:	e7f4      	b.n	800eb5c <__swsetup_r+0xb0>
 800eb72:	2000      	movs	r0, #0
 800eb74:	e7f7      	b.n	800eb66 <__swsetup_r+0xba>
 800eb76:	bf00      	nop
 800eb78:	200000cc 	.word	0x200000cc
 800eb7c:	08010cb0 	.word	0x08010cb0
 800eb80:	08010cd0 	.word	0x08010cd0
 800eb84:	08010c90 	.word	0x08010c90

0800eb88 <__assert_func>:
 800eb88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eb8a:	4614      	mov	r4, r2
 800eb8c:	461a      	mov	r2, r3
 800eb8e:	4b09      	ldr	r3, [pc, #36]	; (800ebb4 <__assert_func+0x2c>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	4605      	mov	r5, r0
 800eb94:	68d8      	ldr	r0, [r3, #12]
 800eb96:	b14c      	cbz	r4, 800ebac <__assert_func+0x24>
 800eb98:	4b07      	ldr	r3, [pc, #28]	; (800ebb8 <__assert_func+0x30>)
 800eb9a:	9100      	str	r1, [sp, #0]
 800eb9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eba0:	4906      	ldr	r1, [pc, #24]	; (800ebbc <__assert_func+0x34>)
 800eba2:	462b      	mov	r3, r5
 800eba4:	f000 f9a6 	bl	800eef4 <fiprintf>
 800eba8:	f000 ff3e 	bl	800fa28 <abort>
 800ebac:	4b04      	ldr	r3, [pc, #16]	; (800ebc0 <__assert_func+0x38>)
 800ebae:	461c      	mov	r4, r3
 800ebb0:	e7f3      	b.n	800eb9a <__assert_func+0x12>
 800ebb2:	bf00      	nop
 800ebb4:	200000cc 	.word	0x200000cc
 800ebb8:	08010c54 	.word	0x08010c54
 800ebbc:	08010c61 	.word	0x08010c61
 800ebc0:	08010c8f 	.word	0x08010c8f

0800ebc4 <__sflush_r>:
 800ebc4:	898a      	ldrh	r2, [r1, #12]
 800ebc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebca:	4605      	mov	r5, r0
 800ebcc:	0710      	lsls	r0, r2, #28
 800ebce:	460c      	mov	r4, r1
 800ebd0:	d458      	bmi.n	800ec84 <__sflush_r+0xc0>
 800ebd2:	684b      	ldr	r3, [r1, #4]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	dc05      	bgt.n	800ebe4 <__sflush_r+0x20>
 800ebd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	dc02      	bgt.n	800ebe4 <__sflush_r+0x20>
 800ebde:	2000      	movs	r0, #0
 800ebe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebe4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ebe6:	2e00      	cmp	r6, #0
 800ebe8:	d0f9      	beq.n	800ebde <__sflush_r+0x1a>
 800ebea:	2300      	movs	r3, #0
 800ebec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ebf0:	682f      	ldr	r7, [r5, #0]
 800ebf2:	602b      	str	r3, [r5, #0]
 800ebf4:	d032      	beq.n	800ec5c <__sflush_r+0x98>
 800ebf6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ebf8:	89a3      	ldrh	r3, [r4, #12]
 800ebfa:	075a      	lsls	r2, r3, #29
 800ebfc:	d505      	bpl.n	800ec0a <__sflush_r+0x46>
 800ebfe:	6863      	ldr	r3, [r4, #4]
 800ec00:	1ac0      	subs	r0, r0, r3
 800ec02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ec04:	b10b      	cbz	r3, 800ec0a <__sflush_r+0x46>
 800ec06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ec08:	1ac0      	subs	r0, r0, r3
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	4602      	mov	r2, r0
 800ec0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ec10:	6a21      	ldr	r1, [r4, #32]
 800ec12:	4628      	mov	r0, r5
 800ec14:	47b0      	blx	r6
 800ec16:	1c43      	adds	r3, r0, #1
 800ec18:	89a3      	ldrh	r3, [r4, #12]
 800ec1a:	d106      	bne.n	800ec2a <__sflush_r+0x66>
 800ec1c:	6829      	ldr	r1, [r5, #0]
 800ec1e:	291d      	cmp	r1, #29
 800ec20:	d82c      	bhi.n	800ec7c <__sflush_r+0xb8>
 800ec22:	4a2a      	ldr	r2, [pc, #168]	; (800eccc <__sflush_r+0x108>)
 800ec24:	40ca      	lsrs	r2, r1
 800ec26:	07d6      	lsls	r6, r2, #31
 800ec28:	d528      	bpl.n	800ec7c <__sflush_r+0xb8>
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	6062      	str	r2, [r4, #4]
 800ec2e:	04d9      	lsls	r1, r3, #19
 800ec30:	6922      	ldr	r2, [r4, #16]
 800ec32:	6022      	str	r2, [r4, #0]
 800ec34:	d504      	bpl.n	800ec40 <__sflush_r+0x7c>
 800ec36:	1c42      	adds	r2, r0, #1
 800ec38:	d101      	bne.n	800ec3e <__sflush_r+0x7a>
 800ec3a:	682b      	ldr	r3, [r5, #0]
 800ec3c:	b903      	cbnz	r3, 800ec40 <__sflush_r+0x7c>
 800ec3e:	6560      	str	r0, [r4, #84]	; 0x54
 800ec40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec42:	602f      	str	r7, [r5, #0]
 800ec44:	2900      	cmp	r1, #0
 800ec46:	d0ca      	beq.n	800ebde <__sflush_r+0x1a>
 800ec48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec4c:	4299      	cmp	r1, r3
 800ec4e:	d002      	beq.n	800ec56 <__sflush_r+0x92>
 800ec50:	4628      	mov	r0, r5
 800ec52:	f7ff fc0d 	bl	800e470 <_free_r>
 800ec56:	2000      	movs	r0, #0
 800ec58:	6360      	str	r0, [r4, #52]	; 0x34
 800ec5a:	e7c1      	b.n	800ebe0 <__sflush_r+0x1c>
 800ec5c:	6a21      	ldr	r1, [r4, #32]
 800ec5e:	2301      	movs	r3, #1
 800ec60:	4628      	mov	r0, r5
 800ec62:	47b0      	blx	r6
 800ec64:	1c41      	adds	r1, r0, #1
 800ec66:	d1c7      	bne.n	800ebf8 <__sflush_r+0x34>
 800ec68:	682b      	ldr	r3, [r5, #0]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d0c4      	beq.n	800ebf8 <__sflush_r+0x34>
 800ec6e:	2b1d      	cmp	r3, #29
 800ec70:	d001      	beq.n	800ec76 <__sflush_r+0xb2>
 800ec72:	2b16      	cmp	r3, #22
 800ec74:	d101      	bne.n	800ec7a <__sflush_r+0xb6>
 800ec76:	602f      	str	r7, [r5, #0]
 800ec78:	e7b1      	b.n	800ebde <__sflush_r+0x1a>
 800ec7a:	89a3      	ldrh	r3, [r4, #12]
 800ec7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec80:	81a3      	strh	r3, [r4, #12]
 800ec82:	e7ad      	b.n	800ebe0 <__sflush_r+0x1c>
 800ec84:	690f      	ldr	r7, [r1, #16]
 800ec86:	2f00      	cmp	r7, #0
 800ec88:	d0a9      	beq.n	800ebde <__sflush_r+0x1a>
 800ec8a:	0793      	lsls	r3, r2, #30
 800ec8c:	680e      	ldr	r6, [r1, #0]
 800ec8e:	bf08      	it	eq
 800ec90:	694b      	ldreq	r3, [r1, #20]
 800ec92:	600f      	str	r7, [r1, #0]
 800ec94:	bf18      	it	ne
 800ec96:	2300      	movne	r3, #0
 800ec98:	eba6 0807 	sub.w	r8, r6, r7
 800ec9c:	608b      	str	r3, [r1, #8]
 800ec9e:	f1b8 0f00 	cmp.w	r8, #0
 800eca2:	dd9c      	ble.n	800ebde <__sflush_r+0x1a>
 800eca4:	6a21      	ldr	r1, [r4, #32]
 800eca6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eca8:	4643      	mov	r3, r8
 800ecaa:	463a      	mov	r2, r7
 800ecac:	4628      	mov	r0, r5
 800ecae:	47b0      	blx	r6
 800ecb0:	2800      	cmp	r0, #0
 800ecb2:	dc06      	bgt.n	800ecc2 <__sflush_r+0xfe>
 800ecb4:	89a3      	ldrh	r3, [r4, #12]
 800ecb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecba:	81a3      	strh	r3, [r4, #12]
 800ecbc:	f04f 30ff 	mov.w	r0, #4294967295
 800ecc0:	e78e      	b.n	800ebe0 <__sflush_r+0x1c>
 800ecc2:	4407      	add	r7, r0
 800ecc4:	eba8 0800 	sub.w	r8, r8, r0
 800ecc8:	e7e9      	b.n	800ec9e <__sflush_r+0xda>
 800ecca:	bf00      	nop
 800eccc:	20400001 	.word	0x20400001

0800ecd0 <_fflush_r>:
 800ecd0:	b538      	push	{r3, r4, r5, lr}
 800ecd2:	690b      	ldr	r3, [r1, #16]
 800ecd4:	4605      	mov	r5, r0
 800ecd6:	460c      	mov	r4, r1
 800ecd8:	b913      	cbnz	r3, 800ece0 <_fflush_r+0x10>
 800ecda:	2500      	movs	r5, #0
 800ecdc:	4628      	mov	r0, r5
 800ecde:	bd38      	pop	{r3, r4, r5, pc}
 800ece0:	b118      	cbz	r0, 800ecea <_fflush_r+0x1a>
 800ece2:	6983      	ldr	r3, [r0, #24]
 800ece4:	b90b      	cbnz	r3, 800ecea <_fflush_r+0x1a>
 800ece6:	f000 f887 	bl	800edf8 <__sinit>
 800ecea:	4b14      	ldr	r3, [pc, #80]	; (800ed3c <_fflush_r+0x6c>)
 800ecec:	429c      	cmp	r4, r3
 800ecee:	d11b      	bne.n	800ed28 <_fflush_r+0x58>
 800ecf0:	686c      	ldr	r4, [r5, #4]
 800ecf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d0ef      	beq.n	800ecda <_fflush_r+0xa>
 800ecfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ecfc:	07d0      	lsls	r0, r2, #31
 800ecfe:	d404      	bmi.n	800ed0a <_fflush_r+0x3a>
 800ed00:	0599      	lsls	r1, r3, #22
 800ed02:	d402      	bmi.n	800ed0a <_fflush_r+0x3a>
 800ed04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed06:	f000 f927 	bl	800ef58 <__retarget_lock_acquire_recursive>
 800ed0a:	4628      	mov	r0, r5
 800ed0c:	4621      	mov	r1, r4
 800ed0e:	f7ff ff59 	bl	800ebc4 <__sflush_r>
 800ed12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ed14:	07da      	lsls	r2, r3, #31
 800ed16:	4605      	mov	r5, r0
 800ed18:	d4e0      	bmi.n	800ecdc <_fflush_r+0xc>
 800ed1a:	89a3      	ldrh	r3, [r4, #12]
 800ed1c:	059b      	lsls	r3, r3, #22
 800ed1e:	d4dd      	bmi.n	800ecdc <_fflush_r+0xc>
 800ed20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed22:	f000 f91a 	bl	800ef5a <__retarget_lock_release_recursive>
 800ed26:	e7d9      	b.n	800ecdc <_fflush_r+0xc>
 800ed28:	4b05      	ldr	r3, [pc, #20]	; (800ed40 <_fflush_r+0x70>)
 800ed2a:	429c      	cmp	r4, r3
 800ed2c:	d101      	bne.n	800ed32 <_fflush_r+0x62>
 800ed2e:	68ac      	ldr	r4, [r5, #8]
 800ed30:	e7df      	b.n	800ecf2 <_fflush_r+0x22>
 800ed32:	4b04      	ldr	r3, [pc, #16]	; (800ed44 <_fflush_r+0x74>)
 800ed34:	429c      	cmp	r4, r3
 800ed36:	bf08      	it	eq
 800ed38:	68ec      	ldreq	r4, [r5, #12]
 800ed3a:	e7da      	b.n	800ecf2 <_fflush_r+0x22>
 800ed3c:	08010cb0 	.word	0x08010cb0
 800ed40:	08010cd0 	.word	0x08010cd0
 800ed44:	08010c90 	.word	0x08010c90

0800ed48 <std>:
 800ed48:	2300      	movs	r3, #0
 800ed4a:	b510      	push	{r4, lr}
 800ed4c:	4604      	mov	r4, r0
 800ed4e:	e9c0 3300 	strd	r3, r3, [r0]
 800ed52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ed56:	6083      	str	r3, [r0, #8]
 800ed58:	8181      	strh	r1, [r0, #12]
 800ed5a:	6643      	str	r3, [r0, #100]	; 0x64
 800ed5c:	81c2      	strh	r2, [r0, #14]
 800ed5e:	6183      	str	r3, [r0, #24]
 800ed60:	4619      	mov	r1, r3
 800ed62:	2208      	movs	r2, #8
 800ed64:	305c      	adds	r0, #92	; 0x5c
 800ed66:	f7ff fb7b 	bl	800e460 <memset>
 800ed6a:	4b05      	ldr	r3, [pc, #20]	; (800ed80 <std+0x38>)
 800ed6c:	6263      	str	r3, [r4, #36]	; 0x24
 800ed6e:	4b05      	ldr	r3, [pc, #20]	; (800ed84 <std+0x3c>)
 800ed70:	62a3      	str	r3, [r4, #40]	; 0x28
 800ed72:	4b05      	ldr	r3, [pc, #20]	; (800ed88 <std+0x40>)
 800ed74:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ed76:	4b05      	ldr	r3, [pc, #20]	; (800ed8c <std+0x44>)
 800ed78:	6224      	str	r4, [r4, #32]
 800ed7a:	6323      	str	r3, [r4, #48]	; 0x30
 800ed7c:	bd10      	pop	{r4, pc}
 800ed7e:	bf00      	nop
 800ed80:	0800f965 	.word	0x0800f965
 800ed84:	0800f987 	.word	0x0800f987
 800ed88:	0800f9bf 	.word	0x0800f9bf
 800ed8c:	0800f9e3 	.word	0x0800f9e3

0800ed90 <_cleanup_r>:
 800ed90:	4901      	ldr	r1, [pc, #4]	; (800ed98 <_cleanup_r+0x8>)
 800ed92:	f000 b8c1 	b.w	800ef18 <_fwalk_reent>
 800ed96:	bf00      	nop
 800ed98:	0800ecd1 	.word	0x0800ecd1

0800ed9c <__sfmoreglue>:
 800ed9c:	b570      	push	{r4, r5, r6, lr}
 800ed9e:	2268      	movs	r2, #104	; 0x68
 800eda0:	1e4d      	subs	r5, r1, #1
 800eda2:	4355      	muls	r5, r2
 800eda4:	460e      	mov	r6, r1
 800eda6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800edaa:	f7ff fbcd 	bl	800e548 <_malloc_r>
 800edae:	4604      	mov	r4, r0
 800edb0:	b140      	cbz	r0, 800edc4 <__sfmoreglue+0x28>
 800edb2:	2100      	movs	r1, #0
 800edb4:	e9c0 1600 	strd	r1, r6, [r0]
 800edb8:	300c      	adds	r0, #12
 800edba:	60a0      	str	r0, [r4, #8]
 800edbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800edc0:	f7ff fb4e 	bl	800e460 <memset>
 800edc4:	4620      	mov	r0, r4
 800edc6:	bd70      	pop	{r4, r5, r6, pc}

0800edc8 <__sfp_lock_acquire>:
 800edc8:	4801      	ldr	r0, [pc, #4]	; (800edd0 <__sfp_lock_acquire+0x8>)
 800edca:	f000 b8c5 	b.w	800ef58 <__retarget_lock_acquire_recursive>
 800edce:	bf00      	nop
 800edd0:	20000ef1 	.word	0x20000ef1

0800edd4 <__sfp_lock_release>:
 800edd4:	4801      	ldr	r0, [pc, #4]	; (800eddc <__sfp_lock_release+0x8>)
 800edd6:	f000 b8c0 	b.w	800ef5a <__retarget_lock_release_recursive>
 800edda:	bf00      	nop
 800eddc:	20000ef1 	.word	0x20000ef1

0800ede0 <__sinit_lock_acquire>:
 800ede0:	4801      	ldr	r0, [pc, #4]	; (800ede8 <__sinit_lock_acquire+0x8>)
 800ede2:	f000 b8b9 	b.w	800ef58 <__retarget_lock_acquire_recursive>
 800ede6:	bf00      	nop
 800ede8:	20000ef2 	.word	0x20000ef2

0800edec <__sinit_lock_release>:
 800edec:	4801      	ldr	r0, [pc, #4]	; (800edf4 <__sinit_lock_release+0x8>)
 800edee:	f000 b8b4 	b.w	800ef5a <__retarget_lock_release_recursive>
 800edf2:	bf00      	nop
 800edf4:	20000ef2 	.word	0x20000ef2

0800edf8 <__sinit>:
 800edf8:	b510      	push	{r4, lr}
 800edfa:	4604      	mov	r4, r0
 800edfc:	f7ff fff0 	bl	800ede0 <__sinit_lock_acquire>
 800ee00:	69a3      	ldr	r3, [r4, #24]
 800ee02:	b11b      	cbz	r3, 800ee0c <__sinit+0x14>
 800ee04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee08:	f7ff bff0 	b.w	800edec <__sinit_lock_release>
 800ee0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ee10:	6523      	str	r3, [r4, #80]	; 0x50
 800ee12:	4b13      	ldr	r3, [pc, #76]	; (800ee60 <__sinit+0x68>)
 800ee14:	4a13      	ldr	r2, [pc, #76]	; (800ee64 <__sinit+0x6c>)
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	62a2      	str	r2, [r4, #40]	; 0x28
 800ee1a:	42a3      	cmp	r3, r4
 800ee1c:	bf04      	itt	eq
 800ee1e:	2301      	moveq	r3, #1
 800ee20:	61a3      	streq	r3, [r4, #24]
 800ee22:	4620      	mov	r0, r4
 800ee24:	f000 f820 	bl	800ee68 <__sfp>
 800ee28:	6060      	str	r0, [r4, #4]
 800ee2a:	4620      	mov	r0, r4
 800ee2c:	f000 f81c 	bl	800ee68 <__sfp>
 800ee30:	60a0      	str	r0, [r4, #8]
 800ee32:	4620      	mov	r0, r4
 800ee34:	f000 f818 	bl	800ee68 <__sfp>
 800ee38:	2200      	movs	r2, #0
 800ee3a:	60e0      	str	r0, [r4, #12]
 800ee3c:	2104      	movs	r1, #4
 800ee3e:	6860      	ldr	r0, [r4, #4]
 800ee40:	f7ff ff82 	bl	800ed48 <std>
 800ee44:	68a0      	ldr	r0, [r4, #8]
 800ee46:	2201      	movs	r2, #1
 800ee48:	2109      	movs	r1, #9
 800ee4a:	f7ff ff7d 	bl	800ed48 <std>
 800ee4e:	68e0      	ldr	r0, [r4, #12]
 800ee50:	2202      	movs	r2, #2
 800ee52:	2112      	movs	r1, #18
 800ee54:	f7ff ff78 	bl	800ed48 <std>
 800ee58:	2301      	movs	r3, #1
 800ee5a:	61a3      	str	r3, [r4, #24]
 800ee5c:	e7d2      	b.n	800ee04 <__sinit+0xc>
 800ee5e:	bf00      	nop
 800ee60:	08010bdc 	.word	0x08010bdc
 800ee64:	0800ed91 	.word	0x0800ed91

0800ee68 <__sfp>:
 800ee68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee6a:	4607      	mov	r7, r0
 800ee6c:	f7ff ffac 	bl	800edc8 <__sfp_lock_acquire>
 800ee70:	4b1e      	ldr	r3, [pc, #120]	; (800eeec <__sfp+0x84>)
 800ee72:	681e      	ldr	r6, [r3, #0]
 800ee74:	69b3      	ldr	r3, [r6, #24]
 800ee76:	b913      	cbnz	r3, 800ee7e <__sfp+0x16>
 800ee78:	4630      	mov	r0, r6
 800ee7a:	f7ff ffbd 	bl	800edf8 <__sinit>
 800ee7e:	3648      	adds	r6, #72	; 0x48
 800ee80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ee84:	3b01      	subs	r3, #1
 800ee86:	d503      	bpl.n	800ee90 <__sfp+0x28>
 800ee88:	6833      	ldr	r3, [r6, #0]
 800ee8a:	b30b      	cbz	r3, 800eed0 <__sfp+0x68>
 800ee8c:	6836      	ldr	r6, [r6, #0]
 800ee8e:	e7f7      	b.n	800ee80 <__sfp+0x18>
 800ee90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ee94:	b9d5      	cbnz	r5, 800eecc <__sfp+0x64>
 800ee96:	4b16      	ldr	r3, [pc, #88]	; (800eef0 <__sfp+0x88>)
 800ee98:	60e3      	str	r3, [r4, #12]
 800ee9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ee9e:	6665      	str	r5, [r4, #100]	; 0x64
 800eea0:	f000 f859 	bl	800ef56 <__retarget_lock_init_recursive>
 800eea4:	f7ff ff96 	bl	800edd4 <__sfp_lock_release>
 800eea8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800eeac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800eeb0:	6025      	str	r5, [r4, #0]
 800eeb2:	61a5      	str	r5, [r4, #24]
 800eeb4:	2208      	movs	r2, #8
 800eeb6:	4629      	mov	r1, r5
 800eeb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eebc:	f7ff fad0 	bl	800e460 <memset>
 800eec0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800eec4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800eec8:	4620      	mov	r0, r4
 800eeca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eecc:	3468      	adds	r4, #104	; 0x68
 800eece:	e7d9      	b.n	800ee84 <__sfp+0x1c>
 800eed0:	2104      	movs	r1, #4
 800eed2:	4638      	mov	r0, r7
 800eed4:	f7ff ff62 	bl	800ed9c <__sfmoreglue>
 800eed8:	4604      	mov	r4, r0
 800eeda:	6030      	str	r0, [r6, #0]
 800eedc:	2800      	cmp	r0, #0
 800eede:	d1d5      	bne.n	800ee8c <__sfp+0x24>
 800eee0:	f7ff ff78 	bl	800edd4 <__sfp_lock_release>
 800eee4:	230c      	movs	r3, #12
 800eee6:	603b      	str	r3, [r7, #0]
 800eee8:	e7ee      	b.n	800eec8 <__sfp+0x60>
 800eeea:	bf00      	nop
 800eeec:	08010bdc 	.word	0x08010bdc
 800eef0:	ffff0001 	.word	0xffff0001

0800eef4 <fiprintf>:
 800eef4:	b40e      	push	{r1, r2, r3}
 800eef6:	b503      	push	{r0, r1, lr}
 800eef8:	4601      	mov	r1, r0
 800eefa:	ab03      	add	r3, sp, #12
 800eefc:	4805      	ldr	r0, [pc, #20]	; (800ef14 <fiprintf+0x20>)
 800eefe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef02:	6800      	ldr	r0, [r0, #0]
 800ef04:	9301      	str	r3, [sp, #4]
 800ef06:	f000 fa21 	bl	800f34c <_vfiprintf_r>
 800ef0a:	b002      	add	sp, #8
 800ef0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef10:	b003      	add	sp, #12
 800ef12:	4770      	bx	lr
 800ef14:	200000cc 	.word	0x200000cc

0800ef18 <_fwalk_reent>:
 800ef18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef1c:	4606      	mov	r6, r0
 800ef1e:	4688      	mov	r8, r1
 800ef20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ef24:	2700      	movs	r7, #0
 800ef26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ef2a:	f1b9 0901 	subs.w	r9, r9, #1
 800ef2e:	d505      	bpl.n	800ef3c <_fwalk_reent+0x24>
 800ef30:	6824      	ldr	r4, [r4, #0]
 800ef32:	2c00      	cmp	r4, #0
 800ef34:	d1f7      	bne.n	800ef26 <_fwalk_reent+0xe>
 800ef36:	4638      	mov	r0, r7
 800ef38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef3c:	89ab      	ldrh	r3, [r5, #12]
 800ef3e:	2b01      	cmp	r3, #1
 800ef40:	d907      	bls.n	800ef52 <_fwalk_reent+0x3a>
 800ef42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ef46:	3301      	adds	r3, #1
 800ef48:	d003      	beq.n	800ef52 <_fwalk_reent+0x3a>
 800ef4a:	4629      	mov	r1, r5
 800ef4c:	4630      	mov	r0, r6
 800ef4e:	47c0      	blx	r8
 800ef50:	4307      	orrs	r7, r0
 800ef52:	3568      	adds	r5, #104	; 0x68
 800ef54:	e7e9      	b.n	800ef2a <_fwalk_reent+0x12>

0800ef56 <__retarget_lock_init_recursive>:
 800ef56:	4770      	bx	lr

0800ef58 <__retarget_lock_acquire_recursive>:
 800ef58:	4770      	bx	lr

0800ef5a <__retarget_lock_release_recursive>:
 800ef5a:	4770      	bx	lr

0800ef5c <__swhatbuf_r>:
 800ef5c:	b570      	push	{r4, r5, r6, lr}
 800ef5e:	460e      	mov	r6, r1
 800ef60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef64:	2900      	cmp	r1, #0
 800ef66:	b096      	sub	sp, #88	; 0x58
 800ef68:	4614      	mov	r4, r2
 800ef6a:	461d      	mov	r5, r3
 800ef6c:	da08      	bge.n	800ef80 <__swhatbuf_r+0x24>
 800ef6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ef72:	2200      	movs	r2, #0
 800ef74:	602a      	str	r2, [r5, #0]
 800ef76:	061a      	lsls	r2, r3, #24
 800ef78:	d410      	bmi.n	800ef9c <__swhatbuf_r+0x40>
 800ef7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef7e:	e00e      	b.n	800ef9e <__swhatbuf_r+0x42>
 800ef80:	466a      	mov	r2, sp
 800ef82:	f000 fd69 	bl	800fa58 <_fstat_r>
 800ef86:	2800      	cmp	r0, #0
 800ef88:	dbf1      	blt.n	800ef6e <__swhatbuf_r+0x12>
 800ef8a:	9a01      	ldr	r2, [sp, #4]
 800ef8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ef90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ef94:	425a      	negs	r2, r3
 800ef96:	415a      	adcs	r2, r3
 800ef98:	602a      	str	r2, [r5, #0]
 800ef9a:	e7ee      	b.n	800ef7a <__swhatbuf_r+0x1e>
 800ef9c:	2340      	movs	r3, #64	; 0x40
 800ef9e:	2000      	movs	r0, #0
 800efa0:	6023      	str	r3, [r4, #0]
 800efa2:	b016      	add	sp, #88	; 0x58
 800efa4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800efa8 <__smakebuf_r>:
 800efa8:	898b      	ldrh	r3, [r1, #12]
 800efaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800efac:	079d      	lsls	r5, r3, #30
 800efae:	4606      	mov	r6, r0
 800efb0:	460c      	mov	r4, r1
 800efb2:	d507      	bpl.n	800efc4 <__smakebuf_r+0x1c>
 800efb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800efb8:	6023      	str	r3, [r4, #0]
 800efba:	6123      	str	r3, [r4, #16]
 800efbc:	2301      	movs	r3, #1
 800efbe:	6163      	str	r3, [r4, #20]
 800efc0:	b002      	add	sp, #8
 800efc2:	bd70      	pop	{r4, r5, r6, pc}
 800efc4:	ab01      	add	r3, sp, #4
 800efc6:	466a      	mov	r2, sp
 800efc8:	f7ff ffc8 	bl	800ef5c <__swhatbuf_r>
 800efcc:	9900      	ldr	r1, [sp, #0]
 800efce:	4605      	mov	r5, r0
 800efd0:	4630      	mov	r0, r6
 800efd2:	f7ff fab9 	bl	800e548 <_malloc_r>
 800efd6:	b948      	cbnz	r0, 800efec <__smakebuf_r+0x44>
 800efd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efdc:	059a      	lsls	r2, r3, #22
 800efde:	d4ef      	bmi.n	800efc0 <__smakebuf_r+0x18>
 800efe0:	f023 0303 	bic.w	r3, r3, #3
 800efe4:	f043 0302 	orr.w	r3, r3, #2
 800efe8:	81a3      	strh	r3, [r4, #12]
 800efea:	e7e3      	b.n	800efb4 <__smakebuf_r+0xc>
 800efec:	4b0d      	ldr	r3, [pc, #52]	; (800f024 <__smakebuf_r+0x7c>)
 800efee:	62b3      	str	r3, [r6, #40]	; 0x28
 800eff0:	89a3      	ldrh	r3, [r4, #12]
 800eff2:	6020      	str	r0, [r4, #0]
 800eff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eff8:	81a3      	strh	r3, [r4, #12]
 800effa:	9b00      	ldr	r3, [sp, #0]
 800effc:	6163      	str	r3, [r4, #20]
 800effe:	9b01      	ldr	r3, [sp, #4]
 800f000:	6120      	str	r0, [r4, #16]
 800f002:	b15b      	cbz	r3, 800f01c <__smakebuf_r+0x74>
 800f004:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f008:	4630      	mov	r0, r6
 800f00a:	f000 fd37 	bl	800fa7c <_isatty_r>
 800f00e:	b128      	cbz	r0, 800f01c <__smakebuf_r+0x74>
 800f010:	89a3      	ldrh	r3, [r4, #12]
 800f012:	f023 0303 	bic.w	r3, r3, #3
 800f016:	f043 0301 	orr.w	r3, r3, #1
 800f01a:	81a3      	strh	r3, [r4, #12]
 800f01c:	89a0      	ldrh	r0, [r4, #12]
 800f01e:	4305      	orrs	r5, r0
 800f020:	81a5      	strh	r5, [r4, #12]
 800f022:	e7cd      	b.n	800efc0 <__smakebuf_r+0x18>
 800f024:	0800ed91 	.word	0x0800ed91

0800f028 <__malloc_lock>:
 800f028:	4801      	ldr	r0, [pc, #4]	; (800f030 <__malloc_lock+0x8>)
 800f02a:	f7ff bf95 	b.w	800ef58 <__retarget_lock_acquire_recursive>
 800f02e:	bf00      	nop
 800f030:	20000ef0 	.word	0x20000ef0

0800f034 <__malloc_unlock>:
 800f034:	4801      	ldr	r0, [pc, #4]	; (800f03c <__malloc_unlock+0x8>)
 800f036:	f7ff bf90 	b.w	800ef5a <__retarget_lock_release_recursive>
 800f03a:	bf00      	nop
 800f03c:	20000ef0 	.word	0x20000ef0

0800f040 <__ssputs_r>:
 800f040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f044:	688e      	ldr	r6, [r1, #8]
 800f046:	429e      	cmp	r6, r3
 800f048:	4682      	mov	sl, r0
 800f04a:	460c      	mov	r4, r1
 800f04c:	4690      	mov	r8, r2
 800f04e:	461f      	mov	r7, r3
 800f050:	d838      	bhi.n	800f0c4 <__ssputs_r+0x84>
 800f052:	898a      	ldrh	r2, [r1, #12]
 800f054:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f058:	d032      	beq.n	800f0c0 <__ssputs_r+0x80>
 800f05a:	6825      	ldr	r5, [r4, #0]
 800f05c:	6909      	ldr	r1, [r1, #16]
 800f05e:	eba5 0901 	sub.w	r9, r5, r1
 800f062:	6965      	ldr	r5, [r4, #20]
 800f064:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f068:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f06c:	3301      	adds	r3, #1
 800f06e:	444b      	add	r3, r9
 800f070:	106d      	asrs	r5, r5, #1
 800f072:	429d      	cmp	r5, r3
 800f074:	bf38      	it	cc
 800f076:	461d      	movcc	r5, r3
 800f078:	0553      	lsls	r3, r2, #21
 800f07a:	d531      	bpl.n	800f0e0 <__ssputs_r+0xa0>
 800f07c:	4629      	mov	r1, r5
 800f07e:	f7ff fa63 	bl	800e548 <_malloc_r>
 800f082:	4606      	mov	r6, r0
 800f084:	b950      	cbnz	r0, 800f09c <__ssputs_r+0x5c>
 800f086:	230c      	movs	r3, #12
 800f088:	f8ca 3000 	str.w	r3, [sl]
 800f08c:	89a3      	ldrh	r3, [r4, #12]
 800f08e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f092:	81a3      	strh	r3, [r4, #12]
 800f094:	f04f 30ff 	mov.w	r0, #4294967295
 800f098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f09c:	6921      	ldr	r1, [r4, #16]
 800f09e:	464a      	mov	r2, r9
 800f0a0:	f7ff f9d0 	bl	800e444 <memcpy>
 800f0a4:	89a3      	ldrh	r3, [r4, #12]
 800f0a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f0aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0ae:	81a3      	strh	r3, [r4, #12]
 800f0b0:	6126      	str	r6, [r4, #16]
 800f0b2:	6165      	str	r5, [r4, #20]
 800f0b4:	444e      	add	r6, r9
 800f0b6:	eba5 0509 	sub.w	r5, r5, r9
 800f0ba:	6026      	str	r6, [r4, #0]
 800f0bc:	60a5      	str	r5, [r4, #8]
 800f0be:	463e      	mov	r6, r7
 800f0c0:	42be      	cmp	r6, r7
 800f0c2:	d900      	bls.n	800f0c6 <__ssputs_r+0x86>
 800f0c4:	463e      	mov	r6, r7
 800f0c6:	6820      	ldr	r0, [r4, #0]
 800f0c8:	4632      	mov	r2, r6
 800f0ca:	4641      	mov	r1, r8
 800f0cc:	f000 fcf8 	bl	800fac0 <memmove>
 800f0d0:	68a3      	ldr	r3, [r4, #8]
 800f0d2:	1b9b      	subs	r3, r3, r6
 800f0d4:	60a3      	str	r3, [r4, #8]
 800f0d6:	6823      	ldr	r3, [r4, #0]
 800f0d8:	4433      	add	r3, r6
 800f0da:	6023      	str	r3, [r4, #0]
 800f0dc:	2000      	movs	r0, #0
 800f0de:	e7db      	b.n	800f098 <__ssputs_r+0x58>
 800f0e0:	462a      	mov	r2, r5
 800f0e2:	f000 fd07 	bl	800faf4 <_realloc_r>
 800f0e6:	4606      	mov	r6, r0
 800f0e8:	2800      	cmp	r0, #0
 800f0ea:	d1e1      	bne.n	800f0b0 <__ssputs_r+0x70>
 800f0ec:	6921      	ldr	r1, [r4, #16]
 800f0ee:	4650      	mov	r0, sl
 800f0f0:	f7ff f9be 	bl	800e470 <_free_r>
 800f0f4:	e7c7      	b.n	800f086 <__ssputs_r+0x46>
	...

0800f0f8 <_svfiprintf_r>:
 800f0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0fc:	4698      	mov	r8, r3
 800f0fe:	898b      	ldrh	r3, [r1, #12]
 800f100:	061b      	lsls	r3, r3, #24
 800f102:	b09d      	sub	sp, #116	; 0x74
 800f104:	4607      	mov	r7, r0
 800f106:	460d      	mov	r5, r1
 800f108:	4614      	mov	r4, r2
 800f10a:	d50e      	bpl.n	800f12a <_svfiprintf_r+0x32>
 800f10c:	690b      	ldr	r3, [r1, #16]
 800f10e:	b963      	cbnz	r3, 800f12a <_svfiprintf_r+0x32>
 800f110:	2140      	movs	r1, #64	; 0x40
 800f112:	f7ff fa19 	bl	800e548 <_malloc_r>
 800f116:	6028      	str	r0, [r5, #0]
 800f118:	6128      	str	r0, [r5, #16]
 800f11a:	b920      	cbnz	r0, 800f126 <_svfiprintf_r+0x2e>
 800f11c:	230c      	movs	r3, #12
 800f11e:	603b      	str	r3, [r7, #0]
 800f120:	f04f 30ff 	mov.w	r0, #4294967295
 800f124:	e0d1      	b.n	800f2ca <_svfiprintf_r+0x1d2>
 800f126:	2340      	movs	r3, #64	; 0x40
 800f128:	616b      	str	r3, [r5, #20]
 800f12a:	2300      	movs	r3, #0
 800f12c:	9309      	str	r3, [sp, #36]	; 0x24
 800f12e:	2320      	movs	r3, #32
 800f130:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f134:	f8cd 800c 	str.w	r8, [sp, #12]
 800f138:	2330      	movs	r3, #48	; 0x30
 800f13a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f2e4 <_svfiprintf_r+0x1ec>
 800f13e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f142:	f04f 0901 	mov.w	r9, #1
 800f146:	4623      	mov	r3, r4
 800f148:	469a      	mov	sl, r3
 800f14a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f14e:	b10a      	cbz	r2, 800f154 <_svfiprintf_r+0x5c>
 800f150:	2a25      	cmp	r2, #37	; 0x25
 800f152:	d1f9      	bne.n	800f148 <_svfiprintf_r+0x50>
 800f154:	ebba 0b04 	subs.w	fp, sl, r4
 800f158:	d00b      	beq.n	800f172 <_svfiprintf_r+0x7a>
 800f15a:	465b      	mov	r3, fp
 800f15c:	4622      	mov	r2, r4
 800f15e:	4629      	mov	r1, r5
 800f160:	4638      	mov	r0, r7
 800f162:	f7ff ff6d 	bl	800f040 <__ssputs_r>
 800f166:	3001      	adds	r0, #1
 800f168:	f000 80aa 	beq.w	800f2c0 <_svfiprintf_r+0x1c8>
 800f16c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f16e:	445a      	add	r2, fp
 800f170:	9209      	str	r2, [sp, #36]	; 0x24
 800f172:	f89a 3000 	ldrb.w	r3, [sl]
 800f176:	2b00      	cmp	r3, #0
 800f178:	f000 80a2 	beq.w	800f2c0 <_svfiprintf_r+0x1c8>
 800f17c:	2300      	movs	r3, #0
 800f17e:	f04f 32ff 	mov.w	r2, #4294967295
 800f182:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f186:	f10a 0a01 	add.w	sl, sl, #1
 800f18a:	9304      	str	r3, [sp, #16]
 800f18c:	9307      	str	r3, [sp, #28]
 800f18e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f192:	931a      	str	r3, [sp, #104]	; 0x68
 800f194:	4654      	mov	r4, sl
 800f196:	2205      	movs	r2, #5
 800f198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f19c:	4851      	ldr	r0, [pc, #324]	; (800f2e4 <_svfiprintf_r+0x1ec>)
 800f19e:	f7f1 f857 	bl	8000250 <memchr>
 800f1a2:	9a04      	ldr	r2, [sp, #16]
 800f1a4:	b9d8      	cbnz	r0, 800f1de <_svfiprintf_r+0xe6>
 800f1a6:	06d0      	lsls	r0, r2, #27
 800f1a8:	bf44      	itt	mi
 800f1aa:	2320      	movmi	r3, #32
 800f1ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1b0:	0711      	lsls	r1, r2, #28
 800f1b2:	bf44      	itt	mi
 800f1b4:	232b      	movmi	r3, #43	; 0x2b
 800f1b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1ba:	f89a 3000 	ldrb.w	r3, [sl]
 800f1be:	2b2a      	cmp	r3, #42	; 0x2a
 800f1c0:	d015      	beq.n	800f1ee <_svfiprintf_r+0xf6>
 800f1c2:	9a07      	ldr	r2, [sp, #28]
 800f1c4:	4654      	mov	r4, sl
 800f1c6:	2000      	movs	r0, #0
 800f1c8:	f04f 0c0a 	mov.w	ip, #10
 800f1cc:	4621      	mov	r1, r4
 800f1ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f1d2:	3b30      	subs	r3, #48	; 0x30
 800f1d4:	2b09      	cmp	r3, #9
 800f1d6:	d94e      	bls.n	800f276 <_svfiprintf_r+0x17e>
 800f1d8:	b1b0      	cbz	r0, 800f208 <_svfiprintf_r+0x110>
 800f1da:	9207      	str	r2, [sp, #28]
 800f1dc:	e014      	b.n	800f208 <_svfiprintf_r+0x110>
 800f1de:	eba0 0308 	sub.w	r3, r0, r8
 800f1e2:	fa09 f303 	lsl.w	r3, r9, r3
 800f1e6:	4313      	orrs	r3, r2
 800f1e8:	9304      	str	r3, [sp, #16]
 800f1ea:	46a2      	mov	sl, r4
 800f1ec:	e7d2      	b.n	800f194 <_svfiprintf_r+0x9c>
 800f1ee:	9b03      	ldr	r3, [sp, #12]
 800f1f0:	1d19      	adds	r1, r3, #4
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	9103      	str	r1, [sp, #12]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	bfbb      	ittet	lt
 800f1fa:	425b      	neglt	r3, r3
 800f1fc:	f042 0202 	orrlt.w	r2, r2, #2
 800f200:	9307      	strge	r3, [sp, #28]
 800f202:	9307      	strlt	r3, [sp, #28]
 800f204:	bfb8      	it	lt
 800f206:	9204      	strlt	r2, [sp, #16]
 800f208:	7823      	ldrb	r3, [r4, #0]
 800f20a:	2b2e      	cmp	r3, #46	; 0x2e
 800f20c:	d10c      	bne.n	800f228 <_svfiprintf_r+0x130>
 800f20e:	7863      	ldrb	r3, [r4, #1]
 800f210:	2b2a      	cmp	r3, #42	; 0x2a
 800f212:	d135      	bne.n	800f280 <_svfiprintf_r+0x188>
 800f214:	9b03      	ldr	r3, [sp, #12]
 800f216:	1d1a      	adds	r2, r3, #4
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	9203      	str	r2, [sp, #12]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	bfb8      	it	lt
 800f220:	f04f 33ff 	movlt.w	r3, #4294967295
 800f224:	3402      	adds	r4, #2
 800f226:	9305      	str	r3, [sp, #20]
 800f228:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f2f4 <_svfiprintf_r+0x1fc>
 800f22c:	7821      	ldrb	r1, [r4, #0]
 800f22e:	2203      	movs	r2, #3
 800f230:	4650      	mov	r0, sl
 800f232:	f7f1 f80d 	bl	8000250 <memchr>
 800f236:	b140      	cbz	r0, 800f24a <_svfiprintf_r+0x152>
 800f238:	2340      	movs	r3, #64	; 0x40
 800f23a:	eba0 000a 	sub.w	r0, r0, sl
 800f23e:	fa03 f000 	lsl.w	r0, r3, r0
 800f242:	9b04      	ldr	r3, [sp, #16]
 800f244:	4303      	orrs	r3, r0
 800f246:	3401      	adds	r4, #1
 800f248:	9304      	str	r3, [sp, #16]
 800f24a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f24e:	4826      	ldr	r0, [pc, #152]	; (800f2e8 <_svfiprintf_r+0x1f0>)
 800f250:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f254:	2206      	movs	r2, #6
 800f256:	f7f0 fffb 	bl	8000250 <memchr>
 800f25a:	2800      	cmp	r0, #0
 800f25c:	d038      	beq.n	800f2d0 <_svfiprintf_r+0x1d8>
 800f25e:	4b23      	ldr	r3, [pc, #140]	; (800f2ec <_svfiprintf_r+0x1f4>)
 800f260:	bb1b      	cbnz	r3, 800f2aa <_svfiprintf_r+0x1b2>
 800f262:	9b03      	ldr	r3, [sp, #12]
 800f264:	3307      	adds	r3, #7
 800f266:	f023 0307 	bic.w	r3, r3, #7
 800f26a:	3308      	adds	r3, #8
 800f26c:	9303      	str	r3, [sp, #12]
 800f26e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f270:	4433      	add	r3, r6
 800f272:	9309      	str	r3, [sp, #36]	; 0x24
 800f274:	e767      	b.n	800f146 <_svfiprintf_r+0x4e>
 800f276:	fb0c 3202 	mla	r2, ip, r2, r3
 800f27a:	460c      	mov	r4, r1
 800f27c:	2001      	movs	r0, #1
 800f27e:	e7a5      	b.n	800f1cc <_svfiprintf_r+0xd4>
 800f280:	2300      	movs	r3, #0
 800f282:	3401      	adds	r4, #1
 800f284:	9305      	str	r3, [sp, #20]
 800f286:	4619      	mov	r1, r3
 800f288:	f04f 0c0a 	mov.w	ip, #10
 800f28c:	4620      	mov	r0, r4
 800f28e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f292:	3a30      	subs	r2, #48	; 0x30
 800f294:	2a09      	cmp	r2, #9
 800f296:	d903      	bls.n	800f2a0 <_svfiprintf_r+0x1a8>
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d0c5      	beq.n	800f228 <_svfiprintf_r+0x130>
 800f29c:	9105      	str	r1, [sp, #20]
 800f29e:	e7c3      	b.n	800f228 <_svfiprintf_r+0x130>
 800f2a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f2a4:	4604      	mov	r4, r0
 800f2a6:	2301      	movs	r3, #1
 800f2a8:	e7f0      	b.n	800f28c <_svfiprintf_r+0x194>
 800f2aa:	ab03      	add	r3, sp, #12
 800f2ac:	9300      	str	r3, [sp, #0]
 800f2ae:	462a      	mov	r2, r5
 800f2b0:	4b0f      	ldr	r3, [pc, #60]	; (800f2f0 <_svfiprintf_r+0x1f8>)
 800f2b2:	a904      	add	r1, sp, #16
 800f2b4:	4638      	mov	r0, r7
 800f2b6:	f3af 8000 	nop.w
 800f2ba:	1c42      	adds	r2, r0, #1
 800f2bc:	4606      	mov	r6, r0
 800f2be:	d1d6      	bne.n	800f26e <_svfiprintf_r+0x176>
 800f2c0:	89ab      	ldrh	r3, [r5, #12]
 800f2c2:	065b      	lsls	r3, r3, #25
 800f2c4:	f53f af2c 	bmi.w	800f120 <_svfiprintf_r+0x28>
 800f2c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f2ca:	b01d      	add	sp, #116	; 0x74
 800f2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2d0:	ab03      	add	r3, sp, #12
 800f2d2:	9300      	str	r3, [sp, #0]
 800f2d4:	462a      	mov	r2, r5
 800f2d6:	4b06      	ldr	r3, [pc, #24]	; (800f2f0 <_svfiprintf_r+0x1f8>)
 800f2d8:	a904      	add	r1, sp, #16
 800f2da:	4638      	mov	r0, r7
 800f2dc:	f000 f9d4 	bl	800f688 <_printf_i>
 800f2e0:	e7eb      	b.n	800f2ba <_svfiprintf_r+0x1c2>
 800f2e2:	bf00      	nop
 800f2e4:	08010cf0 	.word	0x08010cf0
 800f2e8:	08010cfa 	.word	0x08010cfa
 800f2ec:	00000000 	.word	0x00000000
 800f2f0:	0800f041 	.word	0x0800f041
 800f2f4:	08010cf6 	.word	0x08010cf6

0800f2f8 <__sfputc_r>:
 800f2f8:	6893      	ldr	r3, [r2, #8]
 800f2fa:	3b01      	subs	r3, #1
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	b410      	push	{r4}
 800f300:	6093      	str	r3, [r2, #8]
 800f302:	da08      	bge.n	800f316 <__sfputc_r+0x1e>
 800f304:	6994      	ldr	r4, [r2, #24]
 800f306:	42a3      	cmp	r3, r4
 800f308:	db01      	blt.n	800f30e <__sfputc_r+0x16>
 800f30a:	290a      	cmp	r1, #10
 800f30c:	d103      	bne.n	800f316 <__sfputc_r+0x1e>
 800f30e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f312:	f7ff bb79 	b.w	800ea08 <__swbuf_r>
 800f316:	6813      	ldr	r3, [r2, #0]
 800f318:	1c58      	adds	r0, r3, #1
 800f31a:	6010      	str	r0, [r2, #0]
 800f31c:	7019      	strb	r1, [r3, #0]
 800f31e:	4608      	mov	r0, r1
 800f320:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f324:	4770      	bx	lr

0800f326 <__sfputs_r>:
 800f326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f328:	4606      	mov	r6, r0
 800f32a:	460f      	mov	r7, r1
 800f32c:	4614      	mov	r4, r2
 800f32e:	18d5      	adds	r5, r2, r3
 800f330:	42ac      	cmp	r4, r5
 800f332:	d101      	bne.n	800f338 <__sfputs_r+0x12>
 800f334:	2000      	movs	r0, #0
 800f336:	e007      	b.n	800f348 <__sfputs_r+0x22>
 800f338:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f33c:	463a      	mov	r2, r7
 800f33e:	4630      	mov	r0, r6
 800f340:	f7ff ffda 	bl	800f2f8 <__sfputc_r>
 800f344:	1c43      	adds	r3, r0, #1
 800f346:	d1f3      	bne.n	800f330 <__sfputs_r+0xa>
 800f348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f34c <_vfiprintf_r>:
 800f34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f350:	460d      	mov	r5, r1
 800f352:	b09d      	sub	sp, #116	; 0x74
 800f354:	4614      	mov	r4, r2
 800f356:	4698      	mov	r8, r3
 800f358:	4606      	mov	r6, r0
 800f35a:	b118      	cbz	r0, 800f364 <_vfiprintf_r+0x18>
 800f35c:	6983      	ldr	r3, [r0, #24]
 800f35e:	b90b      	cbnz	r3, 800f364 <_vfiprintf_r+0x18>
 800f360:	f7ff fd4a 	bl	800edf8 <__sinit>
 800f364:	4b89      	ldr	r3, [pc, #548]	; (800f58c <_vfiprintf_r+0x240>)
 800f366:	429d      	cmp	r5, r3
 800f368:	d11b      	bne.n	800f3a2 <_vfiprintf_r+0x56>
 800f36a:	6875      	ldr	r5, [r6, #4]
 800f36c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f36e:	07d9      	lsls	r1, r3, #31
 800f370:	d405      	bmi.n	800f37e <_vfiprintf_r+0x32>
 800f372:	89ab      	ldrh	r3, [r5, #12]
 800f374:	059a      	lsls	r2, r3, #22
 800f376:	d402      	bmi.n	800f37e <_vfiprintf_r+0x32>
 800f378:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f37a:	f7ff fded 	bl	800ef58 <__retarget_lock_acquire_recursive>
 800f37e:	89ab      	ldrh	r3, [r5, #12]
 800f380:	071b      	lsls	r3, r3, #28
 800f382:	d501      	bpl.n	800f388 <_vfiprintf_r+0x3c>
 800f384:	692b      	ldr	r3, [r5, #16]
 800f386:	b9eb      	cbnz	r3, 800f3c4 <_vfiprintf_r+0x78>
 800f388:	4629      	mov	r1, r5
 800f38a:	4630      	mov	r0, r6
 800f38c:	f7ff fb8e 	bl	800eaac <__swsetup_r>
 800f390:	b1c0      	cbz	r0, 800f3c4 <_vfiprintf_r+0x78>
 800f392:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f394:	07dc      	lsls	r4, r3, #31
 800f396:	d50e      	bpl.n	800f3b6 <_vfiprintf_r+0x6a>
 800f398:	f04f 30ff 	mov.w	r0, #4294967295
 800f39c:	b01d      	add	sp, #116	; 0x74
 800f39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3a2:	4b7b      	ldr	r3, [pc, #492]	; (800f590 <_vfiprintf_r+0x244>)
 800f3a4:	429d      	cmp	r5, r3
 800f3a6:	d101      	bne.n	800f3ac <_vfiprintf_r+0x60>
 800f3a8:	68b5      	ldr	r5, [r6, #8]
 800f3aa:	e7df      	b.n	800f36c <_vfiprintf_r+0x20>
 800f3ac:	4b79      	ldr	r3, [pc, #484]	; (800f594 <_vfiprintf_r+0x248>)
 800f3ae:	429d      	cmp	r5, r3
 800f3b0:	bf08      	it	eq
 800f3b2:	68f5      	ldreq	r5, [r6, #12]
 800f3b4:	e7da      	b.n	800f36c <_vfiprintf_r+0x20>
 800f3b6:	89ab      	ldrh	r3, [r5, #12]
 800f3b8:	0598      	lsls	r0, r3, #22
 800f3ba:	d4ed      	bmi.n	800f398 <_vfiprintf_r+0x4c>
 800f3bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f3be:	f7ff fdcc 	bl	800ef5a <__retarget_lock_release_recursive>
 800f3c2:	e7e9      	b.n	800f398 <_vfiprintf_r+0x4c>
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	9309      	str	r3, [sp, #36]	; 0x24
 800f3c8:	2320      	movs	r3, #32
 800f3ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f3ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800f3d2:	2330      	movs	r3, #48	; 0x30
 800f3d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f598 <_vfiprintf_r+0x24c>
 800f3d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f3dc:	f04f 0901 	mov.w	r9, #1
 800f3e0:	4623      	mov	r3, r4
 800f3e2:	469a      	mov	sl, r3
 800f3e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f3e8:	b10a      	cbz	r2, 800f3ee <_vfiprintf_r+0xa2>
 800f3ea:	2a25      	cmp	r2, #37	; 0x25
 800f3ec:	d1f9      	bne.n	800f3e2 <_vfiprintf_r+0x96>
 800f3ee:	ebba 0b04 	subs.w	fp, sl, r4
 800f3f2:	d00b      	beq.n	800f40c <_vfiprintf_r+0xc0>
 800f3f4:	465b      	mov	r3, fp
 800f3f6:	4622      	mov	r2, r4
 800f3f8:	4629      	mov	r1, r5
 800f3fa:	4630      	mov	r0, r6
 800f3fc:	f7ff ff93 	bl	800f326 <__sfputs_r>
 800f400:	3001      	adds	r0, #1
 800f402:	f000 80aa 	beq.w	800f55a <_vfiprintf_r+0x20e>
 800f406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f408:	445a      	add	r2, fp
 800f40a:	9209      	str	r2, [sp, #36]	; 0x24
 800f40c:	f89a 3000 	ldrb.w	r3, [sl]
 800f410:	2b00      	cmp	r3, #0
 800f412:	f000 80a2 	beq.w	800f55a <_vfiprintf_r+0x20e>
 800f416:	2300      	movs	r3, #0
 800f418:	f04f 32ff 	mov.w	r2, #4294967295
 800f41c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f420:	f10a 0a01 	add.w	sl, sl, #1
 800f424:	9304      	str	r3, [sp, #16]
 800f426:	9307      	str	r3, [sp, #28]
 800f428:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f42c:	931a      	str	r3, [sp, #104]	; 0x68
 800f42e:	4654      	mov	r4, sl
 800f430:	2205      	movs	r2, #5
 800f432:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f436:	4858      	ldr	r0, [pc, #352]	; (800f598 <_vfiprintf_r+0x24c>)
 800f438:	f7f0 ff0a 	bl	8000250 <memchr>
 800f43c:	9a04      	ldr	r2, [sp, #16]
 800f43e:	b9d8      	cbnz	r0, 800f478 <_vfiprintf_r+0x12c>
 800f440:	06d1      	lsls	r1, r2, #27
 800f442:	bf44      	itt	mi
 800f444:	2320      	movmi	r3, #32
 800f446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f44a:	0713      	lsls	r3, r2, #28
 800f44c:	bf44      	itt	mi
 800f44e:	232b      	movmi	r3, #43	; 0x2b
 800f450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f454:	f89a 3000 	ldrb.w	r3, [sl]
 800f458:	2b2a      	cmp	r3, #42	; 0x2a
 800f45a:	d015      	beq.n	800f488 <_vfiprintf_r+0x13c>
 800f45c:	9a07      	ldr	r2, [sp, #28]
 800f45e:	4654      	mov	r4, sl
 800f460:	2000      	movs	r0, #0
 800f462:	f04f 0c0a 	mov.w	ip, #10
 800f466:	4621      	mov	r1, r4
 800f468:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f46c:	3b30      	subs	r3, #48	; 0x30
 800f46e:	2b09      	cmp	r3, #9
 800f470:	d94e      	bls.n	800f510 <_vfiprintf_r+0x1c4>
 800f472:	b1b0      	cbz	r0, 800f4a2 <_vfiprintf_r+0x156>
 800f474:	9207      	str	r2, [sp, #28]
 800f476:	e014      	b.n	800f4a2 <_vfiprintf_r+0x156>
 800f478:	eba0 0308 	sub.w	r3, r0, r8
 800f47c:	fa09 f303 	lsl.w	r3, r9, r3
 800f480:	4313      	orrs	r3, r2
 800f482:	9304      	str	r3, [sp, #16]
 800f484:	46a2      	mov	sl, r4
 800f486:	e7d2      	b.n	800f42e <_vfiprintf_r+0xe2>
 800f488:	9b03      	ldr	r3, [sp, #12]
 800f48a:	1d19      	adds	r1, r3, #4
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	9103      	str	r1, [sp, #12]
 800f490:	2b00      	cmp	r3, #0
 800f492:	bfbb      	ittet	lt
 800f494:	425b      	neglt	r3, r3
 800f496:	f042 0202 	orrlt.w	r2, r2, #2
 800f49a:	9307      	strge	r3, [sp, #28]
 800f49c:	9307      	strlt	r3, [sp, #28]
 800f49e:	bfb8      	it	lt
 800f4a0:	9204      	strlt	r2, [sp, #16]
 800f4a2:	7823      	ldrb	r3, [r4, #0]
 800f4a4:	2b2e      	cmp	r3, #46	; 0x2e
 800f4a6:	d10c      	bne.n	800f4c2 <_vfiprintf_r+0x176>
 800f4a8:	7863      	ldrb	r3, [r4, #1]
 800f4aa:	2b2a      	cmp	r3, #42	; 0x2a
 800f4ac:	d135      	bne.n	800f51a <_vfiprintf_r+0x1ce>
 800f4ae:	9b03      	ldr	r3, [sp, #12]
 800f4b0:	1d1a      	adds	r2, r3, #4
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	9203      	str	r2, [sp, #12]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	bfb8      	it	lt
 800f4ba:	f04f 33ff 	movlt.w	r3, #4294967295
 800f4be:	3402      	adds	r4, #2
 800f4c0:	9305      	str	r3, [sp, #20]
 800f4c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f5a8 <_vfiprintf_r+0x25c>
 800f4c6:	7821      	ldrb	r1, [r4, #0]
 800f4c8:	2203      	movs	r2, #3
 800f4ca:	4650      	mov	r0, sl
 800f4cc:	f7f0 fec0 	bl	8000250 <memchr>
 800f4d0:	b140      	cbz	r0, 800f4e4 <_vfiprintf_r+0x198>
 800f4d2:	2340      	movs	r3, #64	; 0x40
 800f4d4:	eba0 000a 	sub.w	r0, r0, sl
 800f4d8:	fa03 f000 	lsl.w	r0, r3, r0
 800f4dc:	9b04      	ldr	r3, [sp, #16]
 800f4de:	4303      	orrs	r3, r0
 800f4e0:	3401      	adds	r4, #1
 800f4e2:	9304      	str	r3, [sp, #16]
 800f4e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4e8:	482c      	ldr	r0, [pc, #176]	; (800f59c <_vfiprintf_r+0x250>)
 800f4ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f4ee:	2206      	movs	r2, #6
 800f4f0:	f7f0 feae 	bl	8000250 <memchr>
 800f4f4:	2800      	cmp	r0, #0
 800f4f6:	d03f      	beq.n	800f578 <_vfiprintf_r+0x22c>
 800f4f8:	4b29      	ldr	r3, [pc, #164]	; (800f5a0 <_vfiprintf_r+0x254>)
 800f4fa:	bb1b      	cbnz	r3, 800f544 <_vfiprintf_r+0x1f8>
 800f4fc:	9b03      	ldr	r3, [sp, #12]
 800f4fe:	3307      	adds	r3, #7
 800f500:	f023 0307 	bic.w	r3, r3, #7
 800f504:	3308      	adds	r3, #8
 800f506:	9303      	str	r3, [sp, #12]
 800f508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f50a:	443b      	add	r3, r7
 800f50c:	9309      	str	r3, [sp, #36]	; 0x24
 800f50e:	e767      	b.n	800f3e0 <_vfiprintf_r+0x94>
 800f510:	fb0c 3202 	mla	r2, ip, r2, r3
 800f514:	460c      	mov	r4, r1
 800f516:	2001      	movs	r0, #1
 800f518:	e7a5      	b.n	800f466 <_vfiprintf_r+0x11a>
 800f51a:	2300      	movs	r3, #0
 800f51c:	3401      	adds	r4, #1
 800f51e:	9305      	str	r3, [sp, #20]
 800f520:	4619      	mov	r1, r3
 800f522:	f04f 0c0a 	mov.w	ip, #10
 800f526:	4620      	mov	r0, r4
 800f528:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f52c:	3a30      	subs	r2, #48	; 0x30
 800f52e:	2a09      	cmp	r2, #9
 800f530:	d903      	bls.n	800f53a <_vfiprintf_r+0x1ee>
 800f532:	2b00      	cmp	r3, #0
 800f534:	d0c5      	beq.n	800f4c2 <_vfiprintf_r+0x176>
 800f536:	9105      	str	r1, [sp, #20]
 800f538:	e7c3      	b.n	800f4c2 <_vfiprintf_r+0x176>
 800f53a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f53e:	4604      	mov	r4, r0
 800f540:	2301      	movs	r3, #1
 800f542:	e7f0      	b.n	800f526 <_vfiprintf_r+0x1da>
 800f544:	ab03      	add	r3, sp, #12
 800f546:	9300      	str	r3, [sp, #0]
 800f548:	462a      	mov	r2, r5
 800f54a:	4b16      	ldr	r3, [pc, #88]	; (800f5a4 <_vfiprintf_r+0x258>)
 800f54c:	a904      	add	r1, sp, #16
 800f54e:	4630      	mov	r0, r6
 800f550:	f3af 8000 	nop.w
 800f554:	4607      	mov	r7, r0
 800f556:	1c78      	adds	r0, r7, #1
 800f558:	d1d6      	bne.n	800f508 <_vfiprintf_r+0x1bc>
 800f55a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f55c:	07d9      	lsls	r1, r3, #31
 800f55e:	d405      	bmi.n	800f56c <_vfiprintf_r+0x220>
 800f560:	89ab      	ldrh	r3, [r5, #12]
 800f562:	059a      	lsls	r2, r3, #22
 800f564:	d402      	bmi.n	800f56c <_vfiprintf_r+0x220>
 800f566:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f568:	f7ff fcf7 	bl	800ef5a <__retarget_lock_release_recursive>
 800f56c:	89ab      	ldrh	r3, [r5, #12]
 800f56e:	065b      	lsls	r3, r3, #25
 800f570:	f53f af12 	bmi.w	800f398 <_vfiprintf_r+0x4c>
 800f574:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f576:	e711      	b.n	800f39c <_vfiprintf_r+0x50>
 800f578:	ab03      	add	r3, sp, #12
 800f57a:	9300      	str	r3, [sp, #0]
 800f57c:	462a      	mov	r2, r5
 800f57e:	4b09      	ldr	r3, [pc, #36]	; (800f5a4 <_vfiprintf_r+0x258>)
 800f580:	a904      	add	r1, sp, #16
 800f582:	4630      	mov	r0, r6
 800f584:	f000 f880 	bl	800f688 <_printf_i>
 800f588:	e7e4      	b.n	800f554 <_vfiprintf_r+0x208>
 800f58a:	bf00      	nop
 800f58c:	08010cb0 	.word	0x08010cb0
 800f590:	08010cd0 	.word	0x08010cd0
 800f594:	08010c90 	.word	0x08010c90
 800f598:	08010cf0 	.word	0x08010cf0
 800f59c:	08010cfa 	.word	0x08010cfa
 800f5a0:	00000000 	.word	0x00000000
 800f5a4:	0800f327 	.word	0x0800f327
 800f5a8:	08010cf6 	.word	0x08010cf6

0800f5ac <_printf_common>:
 800f5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5b0:	4616      	mov	r6, r2
 800f5b2:	4699      	mov	r9, r3
 800f5b4:	688a      	ldr	r2, [r1, #8]
 800f5b6:	690b      	ldr	r3, [r1, #16]
 800f5b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f5bc:	4293      	cmp	r3, r2
 800f5be:	bfb8      	it	lt
 800f5c0:	4613      	movlt	r3, r2
 800f5c2:	6033      	str	r3, [r6, #0]
 800f5c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f5c8:	4607      	mov	r7, r0
 800f5ca:	460c      	mov	r4, r1
 800f5cc:	b10a      	cbz	r2, 800f5d2 <_printf_common+0x26>
 800f5ce:	3301      	adds	r3, #1
 800f5d0:	6033      	str	r3, [r6, #0]
 800f5d2:	6823      	ldr	r3, [r4, #0]
 800f5d4:	0699      	lsls	r1, r3, #26
 800f5d6:	bf42      	ittt	mi
 800f5d8:	6833      	ldrmi	r3, [r6, #0]
 800f5da:	3302      	addmi	r3, #2
 800f5dc:	6033      	strmi	r3, [r6, #0]
 800f5de:	6825      	ldr	r5, [r4, #0]
 800f5e0:	f015 0506 	ands.w	r5, r5, #6
 800f5e4:	d106      	bne.n	800f5f4 <_printf_common+0x48>
 800f5e6:	f104 0a19 	add.w	sl, r4, #25
 800f5ea:	68e3      	ldr	r3, [r4, #12]
 800f5ec:	6832      	ldr	r2, [r6, #0]
 800f5ee:	1a9b      	subs	r3, r3, r2
 800f5f0:	42ab      	cmp	r3, r5
 800f5f2:	dc26      	bgt.n	800f642 <_printf_common+0x96>
 800f5f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f5f8:	1e13      	subs	r3, r2, #0
 800f5fa:	6822      	ldr	r2, [r4, #0]
 800f5fc:	bf18      	it	ne
 800f5fe:	2301      	movne	r3, #1
 800f600:	0692      	lsls	r2, r2, #26
 800f602:	d42b      	bmi.n	800f65c <_printf_common+0xb0>
 800f604:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f608:	4649      	mov	r1, r9
 800f60a:	4638      	mov	r0, r7
 800f60c:	47c0      	blx	r8
 800f60e:	3001      	adds	r0, #1
 800f610:	d01e      	beq.n	800f650 <_printf_common+0xa4>
 800f612:	6823      	ldr	r3, [r4, #0]
 800f614:	68e5      	ldr	r5, [r4, #12]
 800f616:	6832      	ldr	r2, [r6, #0]
 800f618:	f003 0306 	and.w	r3, r3, #6
 800f61c:	2b04      	cmp	r3, #4
 800f61e:	bf08      	it	eq
 800f620:	1aad      	subeq	r5, r5, r2
 800f622:	68a3      	ldr	r3, [r4, #8]
 800f624:	6922      	ldr	r2, [r4, #16]
 800f626:	bf0c      	ite	eq
 800f628:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f62c:	2500      	movne	r5, #0
 800f62e:	4293      	cmp	r3, r2
 800f630:	bfc4      	itt	gt
 800f632:	1a9b      	subgt	r3, r3, r2
 800f634:	18ed      	addgt	r5, r5, r3
 800f636:	2600      	movs	r6, #0
 800f638:	341a      	adds	r4, #26
 800f63a:	42b5      	cmp	r5, r6
 800f63c:	d11a      	bne.n	800f674 <_printf_common+0xc8>
 800f63e:	2000      	movs	r0, #0
 800f640:	e008      	b.n	800f654 <_printf_common+0xa8>
 800f642:	2301      	movs	r3, #1
 800f644:	4652      	mov	r2, sl
 800f646:	4649      	mov	r1, r9
 800f648:	4638      	mov	r0, r7
 800f64a:	47c0      	blx	r8
 800f64c:	3001      	adds	r0, #1
 800f64e:	d103      	bne.n	800f658 <_printf_common+0xac>
 800f650:	f04f 30ff 	mov.w	r0, #4294967295
 800f654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f658:	3501      	adds	r5, #1
 800f65a:	e7c6      	b.n	800f5ea <_printf_common+0x3e>
 800f65c:	18e1      	adds	r1, r4, r3
 800f65e:	1c5a      	adds	r2, r3, #1
 800f660:	2030      	movs	r0, #48	; 0x30
 800f662:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f666:	4422      	add	r2, r4
 800f668:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f66c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f670:	3302      	adds	r3, #2
 800f672:	e7c7      	b.n	800f604 <_printf_common+0x58>
 800f674:	2301      	movs	r3, #1
 800f676:	4622      	mov	r2, r4
 800f678:	4649      	mov	r1, r9
 800f67a:	4638      	mov	r0, r7
 800f67c:	47c0      	blx	r8
 800f67e:	3001      	adds	r0, #1
 800f680:	d0e6      	beq.n	800f650 <_printf_common+0xa4>
 800f682:	3601      	adds	r6, #1
 800f684:	e7d9      	b.n	800f63a <_printf_common+0x8e>
	...

0800f688 <_printf_i>:
 800f688:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f68c:	7e0f      	ldrb	r7, [r1, #24]
 800f68e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f690:	2f78      	cmp	r7, #120	; 0x78
 800f692:	4691      	mov	r9, r2
 800f694:	4680      	mov	r8, r0
 800f696:	460c      	mov	r4, r1
 800f698:	469a      	mov	sl, r3
 800f69a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f69e:	d807      	bhi.n	800f6b0 <_printf_i+0x28>
 800f6a0:	2f62      	cmp	r7, #98	; 0x62
 800f6a2:	d80a      	bhi.n	800f6ba <_printf_i+0x32>
 800f6a4:	2f00      	cmp	r7, #0
 800f6a6:	f000 80d8 	beq.w	800f85a <_printf_i+0x1d2>
 800f6aa:	2f58      	cmp	r7, #88	; 0x58
 800f6ac:	f000 80a3 	beq.w	800f7f6 <_printf_i+0x16e>
 800f6b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f6b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f6b8:	e03a      	b.n	800f730 <_printf_i+0xa8>
 800f6ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f6be:	2b15      	cmp	r3, #21
 800f6c0:	d8f6      	bhi.n	800f6b0 <_printf_i+0x28>
 800f6c2:	a101      	add	r1, pc, #4	; (adr r1, 800f6c8 <_printf_i+0x40>)
 800f6c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f6c8:	0800f721 	.word	0x0800f721
 800f6cc:	0800f735 	.word	0x0800f735
 800f6d0:	0800f6b1 	.word	0x0800f6b1
 800f6d4:	0800f6b1 	.word	0x0800f6b1
 800f6d8:	0800f6b1 	.word	0x0800f6b1
 800f6dc:	0800f6b1 	.word	0x0800f6b1
 800f6e0:	0800f735 	.word	0x0800f735
 800f6e4:	0800f6b1 	.word	0x0800f6b1
 800f6e8:	0800f6b1 	.word	0x0800f6b1
 800f6ec:	0800f6b1 	.word	0x0800f6b1
 800f6f0:	0800f6b1 	.word	0x0800f6b1
 800f6f4:	0800f841 	.word	0x0800f841
 800f6f8:	0800f765 	.word	0x0800f765
 800f6fc:	0800f823 	.word	0x0800f823
 800f700:	0800f6b1 	.word	0x0800f6b1
 800f704:	0800f6b1 	.word	0x0800f6b1
 800f708:	0800f863 	.word	0x0800f863
 800f70c:	0800f6b1 	.word	0x0800f6b1
 800f710:	0800f765 	.word	0x0800f765
 800f714:	0800f6b1 	.word	0x0800f6b1
 800f718:	0800f6b1 	.word	0x0800f6b1
 800f71c:	0800f82b 	.word	0x0800f82b
 800f720:	682b      	ldr	r3, [r5, #0]
 800f722:	1d1a      	adds	r2, r3, #4
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	602a      	str	r2, [r5, #0]
 800f728:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f72c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f730:	2301      	movs	r3, #1
 800f732:	e0a3      	b.n	800f87c <_printf_i+0x1f4>
 800f734:	6820      	ldr	r0, [r4, #0]
 800f736:	6829      	ldr	r1, [r5, #0]
 800f738:	0606      	lsls	r6, r0, #24
 800f73a:	f101 0304 	add.w	r3, r1, #4
 800f73e:	d50a      	bpl.n	800f756 <_printf_i+0xce>
 800f740:	680e      	ldr	r6, [r1, #0]
 800f742:	602b      	str	r3, [r5, #0]
 800f744:	2e00      	cmp	r6, #0
 800f746:	da03      	bge.n	800f750 <_printf_i+0xc8>
 800f748:	232d      	movs	r3, #45	; 0x2d
 800f74a:	4276      	negs	r6, r6
 800f74c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f750:	485e      	ldr	r0, [pc, #376]	; (800f8cc <_printf_i+0x244>)
 800f752:	230a      	movs	r3, #10
 800f754:	e019      	b.n	800f78a <_printf_i+0x102>
 800f756:	680e      	ldr	r6, [r1, #0]
 800f758:	602b      	str	r3, [r5, #0]
 800f75a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f75e:	bf18      	it	ne
 800f760:	b236      	sxthne	r6, r6
 800f762:	e7ef      	b.n	800f744 <_printf_i+0xbc>
 800f764:	682b      	ldr	r3, [r5, #0]
 800f766:	6820      	ldr	r0, [r4, #0]
 800f768:	1d19      	adds	r1, r3, #4
 800f76a:	6029      	str	r1, [r5, #0]
 800f76c:	0601      	lsls	r1, r0, #24
 800f76e:	d501      	bpl.n	800f774 <_printf_i+0xec>
 800f770:	681e      	ldr	r6, [r3, #0]
 800f772:	e002      	b.n	800f77a <_printf_i+0xf2>
 800f774:	0646      	lsls	r6, r0, #25
 800f776:	d5fb      	bpl.n	800f770 <_printf_i+0xe8>
 800f778:	881e      	ldrh	r6, [r3, #0]
 800f77a:	4854      	ldr	r0, [pc, #336]	; (800f8cc <_printf_i+0x244>)
 800f77c:	2f6f      	cmp	r7, #111	; 0x6f
 800f77e:	bf0c      	ite	eq
 800f780:	2308      	moveq	r3, #8
 800f782:	230a      	movne	r3, #10
 800f784:	2100      	movs	r1, #0
 800f786:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f78a:	6865      	ldr	r5, [r4, #4]
 800f78c:	60a5      	str	r5, [r4, #8]
 800f78e:	2d00      	cmp	r5, #0
 800f790:	bfa2      	ittt	ge
 800f792:	6821      	ldrge	r1, [r4, #0]
 800f794:	f021 0104 	bicge.w	r1, r1, #4
 800f798:	6021      	strge	r1, [r4, #0]
 800f79a:	b90e      	cbnz	r6, 800f7a0 <_printf_i+0x118>
 800f79c:	2d00      	cmp	r5, #0
 800f79e:	d04d      	beq.n	800f83c <_printf_i+0x1b4>
 800f7a0:	4615      	mov	r5, r2
 800f7a2:	fbb6 f1f3 	udiv	r1, r6, r3
 800f7a6:	fb03 6711 	mls	r7, r3, r1, r6
 800f7aa:	5dc7      	ldrb	r7, [r0, r7]
 800f7ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f7b0:	4637      	mov	r7, r6
 800f7b2:	42bb      	cmp	r3, r7
 800f7b4:	460e      	mov	r6, r1
 800f7b6:	d9f4      	bls.n	800f7a2 <_printf_i+0x11a>
 800f7b8:	2b08      	cmp	r3, #8
 800f7ba:	d10b      	bne.n	800f7d4 <_printf_i+0x14c>
 800f7bc:	6823      	ldr	r3, [r4, #0]
 800f7be:	07de      	lsls	r6, r3, #31
 800f7c0:	d508      	bpl.n	800f7d4 <_printf_i+0x14c>
 800f7c2:	6923      	ldr	r3, [r4, #16]
 800f7c4:	6861      	ldr	r1, [r4, #4]
 800f7c6:	4299      	cmp	r1, r3
 800f7c8:	bfde      	ittt	le
 800f7ca:	2330      	movle	r3, #48	; 0x30
 800f7cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f7d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f7d4:	1b52      	subs	r2, r2, r5
 800f7d6:	6122      	str	r2, [r4, #16]
 800f7d8:	f8cd a000 	str.w	sl, [sp]
 800f7dc:	464b      	mov	r3, r9
 800f7de:	aa03      	add	r2, sp, #12
 800f7e0:	4621      	mov	r1, r4
 800f7e2:	4640      	mov	r0, r8
 800f7e4:	f7ff fee2 	bl	800f5ac <_printf_common>
 800f7e8:	3001      	adds	r0, #1
 800f7ea:	d14c      	bne.n	800f886 <_printf_i+0x1fe>
 800f7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f7f0:	b004      	add	sp, #16
 800f7f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7f6:	4835      	ldr	r0, [pc, #212]	; (800f8cc <_printf_i+0x244>)
 800f7f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f7fc:	6829      	ldr	r1, [r5, #0]
 800f7fe:	6823      	ldr	r3, [r4, #0]
 800f800:	f851 6b04 	ldr.w	r6, [r1], #4
 800f804:	6029      	str	r1, [r5, #0]
 800f806:	061d      	lsls	r5, r3, #24
 800f808:	d514      	bpl.n	800f834 <_printf_i+0x1ac>
 800f80a:	07df      	lsls	r7, r3, #31
 800f80c:	bf44      	itt	mi
 800f80e:	f043 0320 	orrmi.w	r3, r3, #32
 800f812:	6023      	strmi	r3, [r4, #0]
 800f814:	b91e      	cbnz	r6, 800f81e <_printf_i+0x196>
 800f816:	6823      	ldr	r3, [r4, #0]
 800f818:	f023 0320 	bic.w	r3, r3, #32
 800f81c:	6023      	str	r3, [r4, #0]
 800f81e:	2310      	movs	r3, #16
 800f820:	e7b0      	b.n	800f784 <_printf_i+0xfc>
 800f822:	6823      	ldr	r3, [r4, #0]
 800f824:	f043 0320 	orr.w	r3, r3, #32
 800f828:	6023      	str	r3, [r4, #0]
 800f82a:	2378      	movs	r3, #120	; 0x78
 800f82c:	4828      	ldr	r0, [pc, #160]	; (800f8d0 <_printf_i+0x248>)
 800f82e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f832:	e7e3      	b.n	800f7fc <_printf_i+0x174>
 800f834:	0659      	lsls	r1, r3, #25
 800f836:	bf48      	it	mi
 800f838:	b2b6      	uxthmi	r6, r6
 800f83a:	e7e6      	b.n	800f80a <_printf_i+0x182>
 800f83c:	4615      	mov	r5, r2
 800f83e:	e7bb      	b.n	800f7b8 <_printf_i+0x130>
 800f840:	682b      	ldr	r3, [r5, #0]
 800f842:	6826      	ldr	r6, [r4, #0]
 800f844:	6961      	ldr	r1, [r4, #20]
 800f846:	1d18      	adds	r0, r3, #4
 800f848:	6028      	str	r0, [r5, #0]
 800f84a:	0635      	lsls	r5, r6, #24
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	d501      	bpl.n	800f854 <_printf_i+0x1cc>
 800f850:	6019      	str	r1, [r3, #0]
 800f852:	e002      	b.n	800f85a <_printf_i+0x1d2>
 800f854:	0670      	lsls	r0, r6, #25
 800f856:	d5fb      	bpl.n	800f850 <_printf_i+0x1c8>
 800f858:	8019      	strh	r1, [r3, #0]
 800f85a:	2300      	movs	r3, #0
 800f85c:	6123      	str	r3, [r4, #16]
 800f85e:	4615      	mov	r5, r2
 800f860:	e7ba      	b.n	800f7d8 <_printf_i+0x150>
 800f862:	682b      	ldr	r3, [r5, #0]
 800f864:	1d1a      	adds	r2, r3, #4
 800f866:	602a      	str	r2, [r5, #0]
 800f868:	681d      	ldr	r5, [r3, #0]
 800f86a:	6862      	ldr	r2, [r4, #4]
 800f86c:	2100      	movs	r1, #0
 800f86e:	4628      	mov	r0, r5
 800f870:	f7f0 fcee 	bl	8000250 <memchr>
 800f874:	b108      	cbz	r0, 800f87a <_printf_i+0x1f2>
 800f876:	1b40      	subs	r0, r0, r5
 800f878:	6060      	str	r0, [r4, #4]
 800f87a:	6863      	ldr	r3, [r4, #4]
 800f87c:	6123      	str	r3, [r4, #16]
 800f87e:	2300      	movs	r3, #0
 800f880:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f884:	e7a8      	b.n	800f7d8 <_printf_i+0x150>
 800f886:	6923      	ldr	r3, [r4, #16]
 800f888:	462a      	mov	r2, r5
 800f88a:	4649      	mov	r1, r9
 800f88c:	4640      	mov	r0, r8
 800f88e:	47d0      	blx	sl
 800f890:	3001      	adds	r0, #1
 800f892:	d0ab      	beq.n	800f7ec <_printf_i+0x164>
 800f894:	6823      	ldr	r3, [r4, #0]
 800f896:	079b      	lsls	r3, r3, #30
 800f898:	d413      	bmi.n	800f8c2 <_printf_i+0x23a>
 800f89a:	68e0      	ldr	r0, [r4, #12]
 800f89c:	9b03      	ldr	r3, [sp, #12]
 800f89e:	4298      	cmp	r0, r3
 800f8a0:	bfb8      	it	lt
 800f8a2:	4618      	movlt	r0, r3
 800f8a4:	e7a4      	b.n	800f7f0 <_printf_i+0x168>
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	4632      	mov	r2, r6
 800f8aa:	4649      	mov	r1, r9
 800f8ac:	4640      	mov	r0, r8
 800f8ae:	47d0      	blx	sl
 800f8b0:	3001      	adds	r0, #1
 800f8b2:	d09b      	beq.n	800f7ec <_printf_i+0x164>
 800f8b4:	3501      	adds	r5, #1
 800f8b6:	68e3      	ldr	r3, [r4, #12]
 800f8b8:	9903      	ldr	r1, [sp, #12]
 800f8ba:	1a5b      	subs	r3, r3, r1
 800f8bc:	42ab      	cmp	r3, r5
 800f8be:	dcf2      	bgt.n	800f8a6 <_printf_i+0x21e>
 800f8c0:	e7eb      	b.n	800f89a <_printf_i+0x212>
 800f8c2:	2500      	movs	r5, #0
 800f8c4:	f104 0619 	add.w	r6, r4, #25
 800f8c8:	e7f5      	b.n	800f8b6 <_printf_i+0x22e>
 800f8ca:	bf00      	nop
 800f8cc:	08010d01 	.word	0x08010d01
 800f8d0:	08010d12 	.word	0x08010d12

0800f8d4 <_putc_r>:
 800f8d4:	b570      	push	{r4, r5, r6, lr}
 800f8d6:	460d      	mov	r5, r1
 800f8d8:	4614      	mov	r4, r2
 800f8da:	4606      	mov	r6, r0
 800f8dc:	b118      	cbz	r0, 800f8e6 <_putc_r+0x12>
 800f8de:	6983      	ldr	r3, [r0, #24]
 800f8e0:	b90b      	cbnz	r3, 800f8e6 <_putc_r+0x12>
 800f8e2:	f7ff fa89 	bl	800edf8 <__sinit>
 800f8e6:	4b1c      	ldr	r3, [pc, #112]	; (800f958 <_putc_r+0x84>)
 800f8e8:	429c      	cmp	r4, r3
 800f8ea:	d124      	bne.n	800f936 <_putc_r+0x62>
 800f8ec:	6874      	ldr	r4, [r6, #4]
 800f8ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f8f0:	07d8      	lsls	r0, r3, #31
 800f8f2:	d405      	bmi.n	800f900 <_putc_r+0x2c>
 800f8f4:	89a3      	ldrh	r3, [r4, #12]
 800f8f6:	0599      	lsls	r1, r3, #22
 800f8f8:	d402      	bmi.n	800f900 <_putc_r+0x2c>
 800f8fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f8fc:	f7ff fb2c 	bl	800ef58 <__retarget_lock_acquire_recursive>
 800f900:	68a3      	ldr	r3, [r4, #8]
 800f902:	3b01      	subs	r3, #1
 800f904:	2b00      	cmp	r3, #0
 800f906:	60a3      	str	r3, [r4, #8]
 800f908:	da05      	bge.n	800f916 <_putc_r+0x42>
 800f90a:	69a2      	ldr	r2, [r4, #24]
 800f90c:	4293      	cmp	r3, r2
 800f90e:	db1c      	blt.n	800f94a <_putc_r+0x76>
 800f910:	b2eb      	uxtb	r3, r5
 800f912:	2b0a      	cmp	r3, #10
 800f914:	d019      	beq.n	800f94a <_putc_r+0x76>
 800f916:	6823      	ldr	r3, [r4, #0]
 800f918:	1c5a      	adds	r2, r3, #1
 800f91a:	6022      	str	r2, [r4, #0]
 800f91c:	701d      	strb	r5, [r3, #0]
 800f91e:	b2ed      	uxtb	r5, r5
 800f920:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f922:	07da      	lsls	r2, r3, #31
 800f924:	d405      	bmi.n	800f932 <_putc_r+0x5e>
 800f926:	89a3      	ldrh	r3, [r4, #12]
 800f928:	059b      	lsls	r3, r3, #22
 800f92a:	d402      	bmi.n	800f932 <_putc_r+0x5e>
 800f92c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f92e:	f7ff fb14 	bl	800ef5a <__retarget_lock_release_recursive>
 800f932:	4628      	mov	r0, r5
 800f934:	bd70      	pop	{r4, r5, r6, pc}
 800f936:	4b09      	ldr	r3, [pc, #36]	; (800f95c <_putc_r+0x88>)
 800f938:	429c      	cmp	r4, r3
 800f93a:	d101      	bne.n	800f940 <_putc_r+0x6c>
 800f93c:	68b4      	ldr	r4, [r6, #8]
 800f93e:	e7d6      	b.n	800f8ee <_putc_r+0x1a>
 800f940:	4b07      	ldr	r3, [pc, #28]	; (800f960 <_putc_r+0x8c>)
 800f942:	429c      	cmp	r4, r3
 800f944:	bf08      	it	eq
 800f946:	68f4      	ldreq	r4, [r6, #12]
 800f948:	e7d1      	b.n	800f8ee <_putc_r+0x1a>
 800f94a:	4629      	mov	r1, r5
 800f94c:	4622      	mov	r2, r4
 800f94e:	4630      	mov	r0, r6
 800f950:	f7ff f85a 	bl	800ea08 <__swbuf_r>
 800f954:	4605      	mov	r5, r0
 800f956:	e7e3      	b.n	800f920 <_putc_r+0x4c>
 800f958:	08010cb0 	.word	0x08010cb0
 800f95c:	08010cd0 	.word	0x08010cd0
 800f960:	08010c90 	.word	0x08010c90

0800f964 <__sread>:
 800f964:	b510      	push	{r4, lr}
 800f966:	460c      	mov	r4, r1
 800f968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f96c:	f000 f8f2 	bl	800fb54 <_read_r>
 800f970:	2800      	cmp	r0, #0
 800f972:	bfab      	itete	ge
 800f974:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f976:	89a3      	ldrhlt	r3, [r4, #12]
 800f978:	181b      	addge	r3, r3, r0
 800f97a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f97e:	bfac      	ite	ge
 800f980:	6563      	strge	r3, [r4, #84]	; 0x54
 800f982:	81a3      	strhlt	r3, [r4, #12]
 800f984:	bd10      	pop	{r4, pc}

0800f986 <__swrite>:
 800f986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f98a:	461f      	mov	r7, r3
 800f98c:	898b      	ldrh	r3, [r1, #12]
 800f98e:	05db      	lsls	r3, r3, #23
 800f990:	4605      	mov	r5, r0
 800f992:	460c      	mov	r4, r1
 800f994:	4616      	mov	r6, r2
 800f996:	d505      	bpl.n	800f9a4 <__swrite+0x1e>
 800f998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f99c:	2302      	movs	r3, #2
 800f99e:	2200      	movs	r2, #0
 800f9a0:	f000 f87c 	bl	800fa9c <_lseek_r>
 800f9a4:	89a3      	ldrh	r3, [r4, #12]
 800f9a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f9aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f9ae:	81a3      	strh	r3, [r4, #12]
 800f9b0:	4632      	mov	r2, r6
 800f9b2:	463b      	mov	r3, r7
 800f9b4:	4628      	mov	r0, r5
 800f9b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9ba:	f000 b823 	b.w	800fa04 <_write_r>

0800f9be <__sseek>:
 800f9be:	b510      	push	{r4, lr}
 800f9c0:	460c      	mov	r4, r1
 800f9c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9c6:	f000 f869 	bl	800fa9c <_lseek_r>
 800f9ca:	1c43      	adds	r3, r0, #1
 800f9cc:	89a3      	ldrh	r3, [r4, #12]
 800f9ce:	bf15      	itete	ne
 800f9d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800f9d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f9d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f9da:	81a3      	strheq	r3, [r4, #12]
 800f9dc:	bf18      	it	ne
 800f9de:	81a3      	strhne	r3, [r4, #12]
 800f9e0:	bd10      	pop	{r4, pc}

0800f9e2 <__sclose>:
 800f9e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9e6:	f000 b827 	b.w	800fa38 <_close_r>

0800f9ea <strchr>:
 800f9ea:	b2c9      	uxtb	r1, r1
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f9f2:	b11a      	cbz	r2, 800f9fc <strchr+0x12>
 800f9f4:	428a      	cmp	r2, r1
 800f9f6:	d1f9      	bne.n	800f9ec <strchr+0x2>
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	4770      	bx	lr
 800f9fc:	2900      	cmp	r1, #0
 800f9fe:	bf18      	it	ne
 800fa00:	2300      	movne	r3, #0
 800fa02:	e7f9      	b.n	800f9f8 <strchr+0xe>

0800fa04 <_write_r>:
 800fa04:	b538      	push	{r3, r4, r5, lr}
 800fa06:	4d07      	ldr	r5, [pc, #28]	; (800fa24 <_write_r+0x20>)
 800fa08:	4604      	mov	r4, r0
 800fa0a:	4608      	mov	r0, r1
 800fa0c:	4611      	mov	r1, r2
 800fa0e:	2200      	movs	r2, #0
 800fa10:	602a      	str	r2, [r5, #0]
 800fa12:	461a      	mov	r2, r3
 800fa14:	f7f1 ff66 	bl	80018e4 <_write>
 800fa18:	1c43      	adds	r3, r0, #1
 800fa1a:	d102      	bne.n	800fa22 <_write_r+0x1e>
 800fa1c:	682b      	ldr	r3, [r5, #0]
 800fa1e:	b103      	cbz	r3, 800fa22 <_write_r+0x1e>
 800fa20:	6023      	str	r3, [r4, #0]
 800fa22:	bd38      	pop	{r3, r4, r5, pc}
 800fa24:	20000ef4 	.word	0x20000ef4

0800fa28 <abort>:
 800fa28:	b508      	push	{r3, lr}
 800fa2a:	2006      	movs	r0, #6
 800fa2c:	f000 f8cc 	bl	800fbc8 <raise>
 800fa30:	2001      	movs	r0, #1
 800fa32:	f7f1 ff30 	bl	8001896 <_exit>
	...

0800fa38 <_close_r>:
 800fa38:	b538      	push	{r3, r4, r5, lr}
 800fa3a:	4d06      	ldr	r5, [pc, #24]	; (800fa54 <_close_r+0x1c>)
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	4604      	mov	r4, r0
 800fa40:	4608      	mov	r0, r1
 800fa42:	602b      	str	r3, [r5, #0]
 800fa44:	f7f1 ff6a 	bl	800191c <_close>
 800fa48:	1c43      	adds	r3, r0, #1
 800fa4a:	d102      	bne.n	800fa52 <_close_r+0x1a>
 800fa4c:	682b      	ldr	r3, [r5, #0]
 800fa4e:	b103      	cbz	r3, 800fa52 <_close_r+0x1a>
 800fa50:	6023      	str	r3, [r4, #0]
 800fa52:	bd38      	pop	{r3, r4, r5, pc}
 800fa54:	20000ef4 	.word	0x20000ef4

0800fa58 <_fstat_r>:
 800fa58:	b538      	push	{r3, r4, r5, lr}
 800fa5a:	4d07      	ldr	r5, [pc, #28]	; (800fa78 <_fstat_r+0x20>)
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	4604      	mov	r4, r0
 800fa60:	4608      	mov	r0, r1
 800fa62:	4611      	mov	r1, r2
 800fa64:	602b      	str	r3, [r5, #0]
 800fa66:	f7f1 ff65 	bl	8001934 <_fstat>
 800fa6a:	1c43      	adds	r3, r0, #1
 800fa6c:	d102      	bne.n	800fa74 <_fstat_r+0x1c>
 800fa6e:	682b      	ldr	r3, [r5, #0]
 800fa70:	b103      	cbz	r3, 800fa74 <_fstat_r+0x1c>
 800fa72:	6023      	str	r3, [r4, #0]
 800fa74:	bd38      	pop	{r3, r4, r5, pc}
 800fa76:	bf00      	nop
 800fa78:	20000ef4 	.word	0x20000ef4

0800fa7c <_isatty_r>:
 800fa7c:	b538      	push	{r3, r4, r5, lr}
 800fa7e:	4d06      	ldr	r5, [pc, #24]	; (800fa98 <_isatty_r+0x1c>)
 800fa80:	2300      	movs	r3, #0
 800fa82:	4604      	mov	r4, r0
 800fa84:	4608      	mov	r0, r1
 800fa86:	602b      	str	r3, [r5, #0]
 800fa88:	f7f1 ff64 	bl	8001954 <_isatty>
 800fa8c:	1c43      	adds	r3, r0, #1
 800fa8e:	d102      	bne.n	800fa96 <_isatty_r+0x1a>
 800fa90:	682b      	ldr	r3, [r5, #0]
 800fa92:	b103      	cbz	r3, 800fa96 <_isatty_r+0x1a>
 800fa94:	6023      	str	r3, [r4, #0]
 800fa96:	bd38      	pop	{r3, r4, r5, pc}
 800fa98:	20000ef4 	.word	0x20000ef4

0800fa9c <_lseek_r>:
 800fa9c:	b538      	push	{r3, r4, r5, lr}
 800fa9e:	4d07      	ldr	r5, [pc, #28]	; (800fabc <_lseek_r+0x20>)
 800faa0:	4604      	mov	r4, r0
 800faa2:	4608      	mov	r0, r1
 800faa4:	4611      	mov	r1, r2
 800faa6:	2200      	movs	r2, #0
 800faa8:	602a      	str	r2, [r5, #0]
 800faaa:	461a      	mov	r2, r3
 800faac:	f7f1 ff5d 	bl	800196a <_lseek>
 800fab0:	1c43      	adds	r3, r0, #1
 800fab2:	d102      	bne.n	800faba <_lseek_r+0x1e>
 800fab4:	682b      	ldr	r3, [r5, #0]
 800fab6:	b103      	cbz	r3, 800faba <_lseek_r+0x1e>
 800fab8:	6023      	str	r3, [r4, #0]
 800faba:	bd38      	pop	{r3, r4, r5, pc}
 800fabc:	20000ef4 	.word	0x20000ef4

0800fac0 <memmove>:
 800fac0:	4288      	cmp	r0, r1
 800fac2:	b510      	push	{r4, lr}
 800fac4:	eb01 0402 	add.w	r4, r1, r2
 800fac8:	d902      	bls.n	800fad0 <memmove+0x10>
 800faca:	4284      	cmp	r4, r0
 800facc:	4623      	mov	r3, r4
 800face:	d807      	bhi.n	800fae0 <memmove+0x20>
 800fad0:	1e43      	subs	r3, r0, #1
 800fad2:	42a1      	cmp	r1, r4
 800fad4:	d008      	beq.n	800fae8 <memmove+0x28>
 800fad6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fada:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fade:	e7f8      	b.n	800fad2 <memmove+0x12>
 800fae0:	4402      	add	r2, r0
 800fae2:	4601      	mov	r1, r0
 800fae4:	428a      	cmp	r2, r1
 800fae6:	d100      	bne.n	800faea <memmove+0x2a>
 800fae8:	bd10      	pop	{r4, pc}
 800faea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800faee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800faf2:	e7f7      	b.n	800fae4 <memmove+0x24>

0800faf4 <_realloc_r>:
 800faf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faf8:	4680      	mov	r8, r0
 800fafa:	4614      	mov	r4, r2
 800fafc:	460e      	mov	r6, r1
 800fafe:	b921      	cbnz	r1, 800fb0a <_realloc_r+0x16>
 800fb00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb04:	4611      	mov	r1, r2
 800fb06:	f7fe bd1f 	b.w	800e548 <_malloc_r>
 800fb0a:	b92a      	cbnz	r2, 800fb18 <_realloc_r+0x24>
 800fb0c:	f7fe fcb0 	bl	800e470 <_free_r>
 800fb10:	4625      	mov	r5, r4
 800fb12:	4628      	mov	r0, r5
 800fb14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb18:	f000 f872 	bl	800fc00 <_malloc_usable_size_r>
 800fb1c:	4284      	cmp	r4, r0
 800fb1e:	4607      	mov	r7, r0
 800fb20:	d802      	bhi.n	800fb28 <_realloc_r+0x34>
 800fb22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fb26:	d812      	bhi.n	800fb4e <_realloc_r+0x5a>
 800fb28:	4621      	mov	r1, r4
 800fb2a:	4640      	mov	r0, r8
 800fb2c:	f7fe fd0c 	bl	800e548 <_malloc_r>
 800fb30:	4605      	mov	r5, r0
 800fb32:	2800      	cmp	r0, #0
 800fb34:	d0ed      	beq.n	800fb12 <_realloc_r+0x1e>
 800fb36:	42bc      	cmp	r4, r7
 800fb38:	4622      	mov	r2, r4
 800fb3a:	4631      	mov	r1, r6
 800fb3c:	bf28      	it	cs
 800fb3e:	463a      	movcs	r2, r7
 800fb40:	f7fe fc80 	bl	800e444 <memcpy>
 800fb44:	4631      	mov	r1, r6
 800fb46:	4640      	mov	r0, r8
 800fb48:	f7fe fc92 	bl	800e470 <_free_r>
 800fb4c:	e7e1      	b.n	800fb12 <_realloc_r+0x1e>
 800fb4e:	4635      	mov	r5, r6
 800fb50:	e7df      	b.n	800fb12 <_realloc_r+0x1e>
	...

0800fb54 <_read_r>:
 800fb54:	b538      	push	{r3, r4, r5, lr}
 800fb56:	4d07      	ldr	r5, [pc, #28]	; (800fb74 <_read_r+0x20>)
 800fb58:	4604      	mov	r4, r0
 800fb5a:	4608      	mov	r0, r1
 800fb5c:	4611      	mov	r1, r2
 800fb5e:	2200      	movs	r2, #0
 800fb60:	602a      	str	r2, [r5, #0]
 800fb62:	461a      	mov	r2, r3
 800fb64:	f7f1 fea1 	bl	80018aa <_read>
 800fb68:	1c43      	adds	r3, r0, #1
 800fb6a:	d102      	bne.n	800fb72 <_read_r+0x1e>
 800fb6c:	682b      	ldr	r3, [r5, #0]
 800fb6e:	b103      	cbz	r3, 800fb72 <_read_r+0x1e>
 800fb70:	6023      	str	r3, [r4, #0]
 800fb72:	bd38      	pop	{r3, r4, r5, pc}
 800fb74:	20000ef4 	.word	0x20000ef4

0800fb78 <_raise_r>:
 800fb78:	291f      	cmp	r1, #31
 800fb7a:	b538      	push	{r3, r4, r5, lr}
 800fb7c:	4604      	mov	r4, r0
 800fb7e:	460d      	mov	r5, r1
 800fb80:	d904      	bls.n	800fb8c <_raise_r+0x14>
 800fb82:	2316      	movs	r3, #22
 800fb84:	6003      	str	r3, [r0, #0]
 800fb86:	f04f 30ff 	mov.w	r0, #4294967295
 800fb8a:	bd38      	pop	{r3, r4, r5, pc}
 800fb8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fb8e:	b112      	cbz	r2, 800fb96 <_raise_r+0x1e>
 800fb90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fb94:	b94b      	cbnz	r3, 800fbaa <_raise_r+0x32>
 800fb96:	4620      	mov	r0, r4
 800fb98:	f000 f830 	bl	800fbfc <_getpid_r>
 800fb9c:	462a      	mov	r2, r5
 800fb9e:	4601      	mov	r1, r0
 800fba0:	4620      	mov	r0, r4
 800fba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fba6:	f000 b817 	b.w	800fbd8 <_kill_r>
 800fbaa:	2b01      	cmp	r3, #1
 800fbac:	d00a      	beq.n	800fbc4 <_raise_r+0x4c>
 800fbae:	1c59      	adds	r1, r3, #1
 800fbb0:	d103      	bne.n	800fbba <_raise_r+0x42>
 800fbb2:	2316      	movs	r3, #22
 800fbb4:	6003      	str	r3, [r0, #0]
 800fbb6:	2001      	movs	r0, #1
 800fbb8:	e7e7      	b.n	800fb8a <_raise_r+0x12>
 800fbba:	2400      	movs	r4, #0
 800fbbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fbc0:	4628      	mov	r0, r5
 800fbc2:	4798      	blx	r3
 800fbc4:	2000      	movs	r0, #0
 800fbc6:	e7e0      	b.n	800fb8a <_raise_r+0x12>

0800fbc8 <raise>:
 800fbc8:	4b02      	ldr	r3, [pc, #8]	; (800fbd4 <raise+0xc>)
 800fbca:	4601      	mov	r1, r0
 800fbcc:	6818      	ldr	r0, [r3, #0]
 800fbce:	f7ff bfd3 	b.w	800fb78 <_raise_r>
 800fbd2:	bf00      	nop
 800fbd4:	200000cc 	.word	0x200000cc

0800fbd8 <_kill_r>:
 800fbd8:	b538      	push	{r3, r4, r5, lr}
 800fbda:	4d07      	ldr	r5, [pc, #28]	; (800fbf8 <_kill_r+0x20>)
 800fbdc:	2300      	movs	r3, #0
 800fbde:	4604      	mov	r4, r0
 800fbe0:	4608      	mov	r0, r1
 800fbe2:	4611      	mov	r1, r2
 800fbe4:	602b      	str	r3, [r5, #0]
 800fbe6:	f7f1 fe46 	bl	8001876 <_kill>
 800fbea:	1c43      	adds	r3, r0, #1
 800fbec:	d102      	bne.n	800fbf4 <_kill_r+0x1c>
 800fbee:	682b      	ldr	r3, [r5, #0]
 800fbf0:	b103      	cbz	r3, 800fbf4 <_kill_r+0x1c>
 800fbf2:	6023      	str	r3, [r4, #0]
 800fbf4:	bd38      	pop	{r3, r4, r5, pc}
 800fbf6:	bf00      	nop
 800fbf8:	20000ef4 	.word	0x20000ef4

0800fbfc <_getpid_r>:
 800fbfc:	f7f1 be33 	b.w	8001866 <_getpid>

0800fc00 <_malloc_usable_size_r>:
 800fc00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc04:	1f18      	subs	r0, r3, #4
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	bfbc      	itt	lt
 800fc0a:	580b      	ldrlt	r3, [r1, r0]
 800fc0c:	18c0      	addlt	r0, r0, r3
 800fc0e:	4770      	bx	lr

0800fc10 <_init>:
 800fc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc12:	bf00      	nop
 800fc14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc16:	bc08      	pop	{r3}
 800fc18:	469e      	mov	lr, r3
 800fc1a:	4770      	bx	lr

0800fc1c <_fini>:
 800fc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc1e:	bf00      	nop
 800fc20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc22:	bc08      	pop	{r3}
 800fc24:	469e      	mov	lr, r3
 800fc26:	4770      	bx	lr
